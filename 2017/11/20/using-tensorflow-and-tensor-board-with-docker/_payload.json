[{"data":1,"prerenderedAt":888},["ShallowReactive",2],{"using-tensorflow-and-tensor-board-with-docker":3},{"id":4,"title":5,"body":6,"comments":874,"date":875,"description":12,"draft":876,"extension":877,"external":878,"image":864,"meta":879,"navigation":874,"path":881,"seo":882,"stem":883,"tags":884,"__hash__":887},"blog/2017/11/20/using-tensorflow-and-tensor-board-with-docker.md","Using Tensorflow and Tensorboard with Docker",{"type":7,"value":8,"toc":872},"minimark",[9,13,16,27,38,44,59,62,68,71,842,845,851,858,865,868],[10,11,12],"p",{},"In my last article we set up Tensorflow with Docker. Next I want to try to get Tensorboard running.",[10,14,15],{},"When we opened the Jupyter notebook, our command included port mapping. Here is that command:",[17,18,23],"pre",{"className":19,"code":21,"language":22},[20],"language-text","$ sudo nvidia-docker run -it -p 8888:8888 tensorflow/tensorflow:latest-gpu\n","text",[24,25,21],"code",{"__ignoreMap":26},"",[10,28,29,30,33,34,37],{},"Tensorboard will be served in our browser on port ",[24,31,32],{},"6006",", so we will want to do that port mapping in our ",[24,35,36],{},"nvidia-docker"," command:",[17,39,42],{"className":40,"code":41,"language":22},[20],"sudo nvidia-docker run -p 0.0.0.0:6006:6006 -it tensorflow/tensorflow:latest-gpu bash\n",[24,43,41],{"__ignoreMap":26},[10,45,46,47,54,55,58],{},"I want to run ",[48,49,53],"a",{"href":50,"rel":51},"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/mnist/mnist_with_summaries.py",[52],"nofollow","this script"," from the Tensorflow github repo. It is an example of MNIST with summaries. Summaries are logs that are captured from script and they provide the data that runs Tensorboard. In this case they are recorded in ",[24,56,57],{},"/tmp/tensorflow/mnist/logs/",".",[10,60,61],{},"To start with this script let's just copy and paste it into a file. We will need to add vim to our docker container for that:",[17,63,66],{"className":64,"code":65,"language":22},[20],"# apt-get update\n# apt-get install vim\n",[24,67,65],{"__ignoreMap":26},[10,69,70],{},"Now we can copy and paste the script and run it:",[17,72,76],{"className":73,"code":74,"language":75,"meta":26,"style":26},"language-python shiki shiki-themes github-light github-dark","root@eb9e069064d7:~# python tb.py\nSuccessfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.\nExtracting /tmp/tensorflow/mnist/input_data/train-images-idx3-ubyte.gz\nSuccessfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.\nExtracting /tmp/tensorflow/mnist/input_data/train-labels-idx1-ubyte.gz\nSuccessfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\nExtracting /tmp/tensorflow/mnist/input_data/t10k-images-idx3-ubyte.gz\nSuccessfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\nExtracting /tmp/tensorflow/mnist/input_data/t10k-labels-idx1-ubyte.gz\n2017-11-20 03:52:53.792141: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA\n2017-11-20 03:52:53.878640: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:892] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n2017-11-20 03:52:53.878892: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 0 with properties:\nname: GeForce GTX 1080 major: 6 minor: 1 memoryClockRate(GHz): 1.7335\npciBusID: 0000:01:00.0\ntotalMemory: 7.92GiB freeMemory: 7.43GiB\n2017-11-20 03:52:53.878904: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: GeForce GTX 1080, pci bus id: 0000:01:00.0, compute capability: 6.1)\nAccuracy at step 0: 0.1235\nAccuracy at step 10: 0.7297\nAccuracy at step 20: 0.8414\nAccuracy at step 30: 0.8717\nAccuracy at step 40: 0.886\nAccuracy at step 50: 0.896\nAccuracy at step 60: 0.9027\nAccuracy at step 70: 0.9068\nAccuracy at step 80: 0.9101\nAccuracy at step 90: 0.9121\n2017-11-20 03:52:57.583676: I tensorflow/stream_executor/dso_loader.cc:139] successfully opened CUDA library libcupti.so.8.0 locally\nAdding run metadata for 99\nAccuracy at step 100: 0.9124\nAccuracy at step 110: 0.9164\nAccuracy at step 120: 0.9198\nAccuracy at step 130: 0.9205\nAccuracy at step 140: 0.9142\nAccuracy at step 150: 0.9224\nAccuracy at step 160: 0.9294\nAccuracy at step 170: 0.928\nAccuracy at step 180: 0.9312\nAccuracy at step 190: 0.9301\nAdding run metadata for 199\nAccuracy at step 200: 0.9346\nAccuracy at step 210: 0.9381\nAccuracy at step 220: 0.9396\nAccuracy at step 230: 0.9406\nAccuracy at step 240: 0.9273\nAccuracy at step 250: 0.941\nAccuracy at step 260: 0.9369\nAccuracy at step 270: 0.9329\nAccuracy at step 280: 0.9404\nAccuracy at step 290: 0.9444\nAdding run metadata for 299\nAccuracy at step 300: 0.9438\nAccuracy at step 310: 0.9426\nAccuracy at step 320: 0.9462\nAccuracy at step 330: 0.9449\nAccuracy at step 340: 0.9478\nAccuracy at step 350: 0.9458\nAccuracy at step 360: 0.9464\nAccuracy at step 370: 0.9474\nAccuracy at step 380: 0.9528\nAccuracy at step 390: 0.9499\nAdding run metadata for 399\nAccuracy at step 400: 0.9507\nAccuracy at step 410: 0.9501\nAccuracy at step 420: 0.9513\nAccuracy at step 430: 0.9483\nAccuracy at step 440: 0.9518\nAccuracy at step 450: 0.949\nAccuracy at step 460: 0.9543\nAccuracy at step 470: 0.9552\nAccuracy at step 480: 0.9515\nAccuracy at step 490: 0.9544\nAdding run metadata for 499\nAccuracy at step 500: 0.9586\nAccuracy at step 510: 0.9567\nAccuracy at step 520: 0.9572\nAccuracy at step 530: 0.9574\nAccuracy at step 540: 0.9584\nAccuracy at step 550: 0.9593\nAccuracy at step 560: 0.958\nAccuracy at step 570: 0.9575\nAccuracy at step 580: 0.9582\nAccuracy at step 590: 0.9609\nAdding run metadata for 599\nAccuracy at step 600: 0.9618\nAccuracy at step 610: 0.9605\nAccuracy at step 620: 0.9606\nAccuracy at step 630: 0.961\nAccuracy at step 640: 0.963\nAccuracy at step 650: 0.9614\nAccuracy at step 660: 0.9622\nAccuracy at step 670: 0.9634\nAccuracy at step 680: 0.9641\nAccuracy at step 690: 0.9627\nAdding run metadata for 699\nAccuracy at step 700: 0.9623\nAccuracy at step 710: 0.9612\nAccuracy at step 720: 0.9628\nAccuracy at step 730: 0.965\nAccuracy at step 740: 0.9635\nAccuracy at step 750: 0.9635\nAccuracy at step 760: 0.9648\nAccuracy at step 770: 0.9637\nAccuracy at step 780: 0.9658\nAccuracy at step 790: 0.9649\nAdding run metadata for 799\nAccuracy at step 800: 0.9681\nAccuracy at step 810: 0.9661\nAccuracy at step 820: 0.9657\nAccuracy at step 830: 0.9646\nAccuracy at step 840: 0.9647\nAccuracy at step 850: 0.965\nAccuracy at step 860: 0.9677\nAccuracy at step 870: 0.9649\nAccuracy at step 880: 0.9675\nAccuracy at step 890: 0.969\nAdding run metadata for 899\nAccuracy at step 900: 0.9689\nAccuracy at step 910: 0.967\nAccuracy at step 920: 0.9672\nAccuracy at step 930: 0.9645\nAccuracy at step 940: 0.9657\nAccuracy at step 950: 0.9699\nAccuracy at step 960: 0.968\nAccuracy at step 970: 0.9679\nAccuracy at step 980: 0.9651\nAccuracy at step 990: 0.9683\nAdding run metadata for 999\n","python",[24,77,78,86,92,98,104,110,116,122,128,134,140,146,152,158,164,170,176,182,188,194,200,206,212,218,224,230,236,242,248,254,260,266,272,278,284,290,296,302,308,314,320,326,332,338,344,350,356,362,368,374,380,386,392,398,404,410,416,422,428,434,440,446,452,458,464,470,476,482,488,494,500,506,512,518,524,530,536,542,548,554,560,566,572,578,584,590,596,602,608,614,620,626,632,638,644,650,656,662,668,674,680,686,692,698,704,710,716,722,728,734,740,746,752,758,764,770,776,782,788,794,800,806,812,818,824,830,836],{"__ignoreMap":26},[79,80,83],"span",{"class":81,"line":82},"line",1,[79,84,85],{},"root@eb9e069064d7:~# python tb.py\n",[79,87,89],{"class":81,"line":88},2,[79,90,91],{},"Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.\n",[79,93,95],{"class":81,"line":94},3,[79,96,97],{},"Extracting /tmp/tensorflow/mnist/input_data/train-images-idx3-ubyte.gz\n",[79,99,101],{"class":81,"line":100},4,[79,102,103],{},"Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.\n",[79,105,107],{"class":81,"line":106},5,[79,108,109],{},"Extracting /tmp/tensorflow/mnist/input_data/train-labels-idx1-ubyte.gz\n",[79,111,113],{"class":81,"line":112},6,[79,114,115],{},"Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\n",[79,117,119],{"class":81,"line":118},7,[79,120,121],{},"Extracting /tmp/tensorflow/mnist/input_data/t10k-images-idx3-ubyte.gz\n",[79,123,125],{"class":81,"line":124},8,[79,126,127],{},"Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\n",[79,129,131],{"class":81,"line":130},9,[79,132,133],{},"Extracting /tmp/tensorflow/mnist/input_data/t10k-labels-idx1-ubyte.gz\n",[79,135,137],{"class":81,"line":136},10,[79,138,139],{},"2017-11-20 03:52:53.792141: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA\n",[79,141,143],{"class":81,"line":142},11,[79,144,145],{},"2017-11-20 03:52:53.878640: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:892] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",[79,147,149],{"class":81,"line":148},12,[79,150,151],{},"2017-11-20 03:52:53.878892: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 0 with properties:\n",[79,153,155],{"class":81,"line":154},13,[79,156,157],{},"name: GeForce GTX 1080 major: 6 minor: 1 memoryClockRate(GHz): 1.7335\n",[79,159,161],{"class":81,"line":160},14,[79,162,163],{},"pciBusID: 0000:01:00.0\n",[79,165,167],{"class":81,"line":166},15,[79,168,169],{},"totalMemory: 7.92GiB freeMemory: 7.43GiB\n",[79,171,173],{"class":81,"line":172},16,[79,174,175],{},"2017-11-20 03:52:53.878904: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: GeForce GTX 1080, pci bus id: 0000:01:00.0, compute capability: 6.1)\n",[79,177,179],{"class":81,"line":178},17,[79,180,181],{},"Accuracy at step 0: 0.1235\n",[79,183,185],{"class":81,"line":184},18,[79,186,187],{},"Accuracy at step 10: 0.7297\n",[79,189,191],{"class":81,"line":190},19,[79,192,193],{},"Accuracy at step 20: 0.8414\n",[79,195,197],{"class":81,"line":196},20,[79,198,199],{},"Accuracy at step 30: 0.8717\n",[79,201,203],{"class":81,"line":202},21,[79,204,205],{},"Accuracy at step 40: 0.886\n",[79,207,209],{"class":81,"line":208},22,[79,210,211],{},"Accuracy at step 50: 0.896\n",[79,213,215],{"class":81,"line":214},23,[79,216,217],{},"Accuracy at step 60: 0.9027\n",[79,219,221],{"class":81,"line":220},24,[79,222,223],{},"Accuracy at step 70: 0.9068\n",[79,225,227],{"class":81,"line":226},25,[79,228,229],{},"Accuracy at step 80: 0.9101\n",[79,231,233],{"class":81,"line":232},26,[79,234,235],{},"Accuracy at step 90: 0.9121\n",[79,237,239],{"class":81,"line":238},27,[79,240,241],{},"2017-11-20 03:52:57.583676: I tensorflow/stream_executor/dso_loader.cc:139] successfully opened CUDA library libcupti.so.8.0 locally\n",[79,243,245],{"class":81,"line":244},28,[79,246,247],{},"Adding run metadata for 99\n",[79,249,251],{"class":81,"line":250},29,[79,252,253],{},"Accuracy at step 100: 0.9124\n",[79,255,257],{"class":81,"line":256},30,[79,258,259],{},"Accuracy at step 110: 0.9164\n",[79,261,263],{"class":81,"line":262},31,[79,264,265],{},"Accuracy at step 120: 0.9198\n",[79,267,269],{"class":81,"line":268},32,[79,270,271],{},"Accuracy at step 130: 0.9205\n",[79,273,275],{"class":81,"line":274},33,[79,276,277],{},"Accuracy at step 140: 0.9142\n",[79,279,281],{"class":81,"line":280},34,[79,282,283],{},"Accuracy at step 150: 0.9224\n",[79,285,287],{"class":81,"line":286},35,[79,288,289],{},"Accuracy at step 160: 0.9294\n",[79,291,293],{"class":81,"line":292},36,[79,294,295],{},"Accuracy at step 170: 0.928\n",[79,297,299],{"class":81,"line":298},37,[79,300,301],{},"Accuracy at step 180: 0.9312\n",[79,303,305],{"class":81,"line":304},38,[79,306,307],{},"Accuracy at step 190: 0.9301\n",[79,309,311],{"class":81,"line":310},39,[79,312,313],{},"Adding run metadata for 199\n",[79,315,317],{"class":81,"line":316},40,[79,318,319],{},"Accuracy at step 200: 0.9346\n",[79,321,323],{"class":81,"line":322},41,[79,324,325],{},"Accuracy at step 210: 0.9381\n",[79,327,329],{"class":81,"line":328},42,[79,330,331],{},"Accuracy at step 220: 0.9396\n",[79,333,335],{"class":81,"line":334},43,[79,336,337],{},"Accuracy at step 230: 0.9406\n",[79,339,341],{"class":81,"line":340},44,[79,342,343],{},"Accuracy at step 240: 0.9273\n",[79,345,347],{"class":81,"line":346},45,[79,348,349],{},"Accuracy at step 250: 0.941\n",[79,351,353],{"class":81,"line":352},46,[79,354,355],{},"Accuracy at step 260: 0.9369\n",[79,357,359],{"class":81,"line":358},47,[79,360,361],{},"Accuracy at step 270: 0.9329\n",[79,363,365],{"class":81,"line":364},48,[79,366,367],{},"Accuracy at step 280: 0.9404\n",[79,369,371],{"class":81,"line":370},49,[79,372,373],{},"Accuracy at step 290: 0.9444\n",[79,375,377],{"class":81,"line":376},50,[79,378,379],{},"Adding run metadata for 299\n",[79,381,383],{"class":81,"line":382},51,[79,384,385],{},"Accuracy at step 300: 0.9438\n",[79,387,389],{"class":81,"line":388},52,[79,390,391],{},"Accuracy at step 310: 0.9426\n",[79,393,395],{"class":81,"line":394},53,[79,396,397],{},"Accuracy at step 320: 0.9462\n",[79,399,401],{"class":81,"line":400},54,[79,402,403],{},"Accuracy at step 330: 0.9449\n",[79,405,407],{"class":81,"line":406},55,[79,408,409],{},"Accuracy at step 340: 0.9478\n",[79,411,413],{"class":81,"line":412},56,[79,414,415],{},"Accuracy at step 350: 0.9458\n",[79,417,419],{"class":81,"line":418},57,[79,420,421],{},"Accuracy at step 360: 0.9464\n",[79,423,425],{"class":81,"line":424},58,[79,426,427],{},"Accuracy at step 370: 0.9474\n",[79,429,431],{"class":81,"line":430},59,[79,432,433],{},"Accuracy at step 380: 0.9528\n",[79,435,437],{"class":81,"line":436},60,[79,438,439],{},"Accuracy at step 390: 0.9499\n",[79,441,443],{"class":81,"line":442},61,[79,444,445],{},"Adding run metadata for 399\n",[79,447,449],{"class":81,"line":448},62,[79,450,451],{},"Accuracy at step 400: 0.9507\n",[79,453,455],{"class":81,"line":454},63,[79,456,457],{},"Accuracy at step 410: 0.9501\n",[79,459,461],{"class":81,"line":460},64,[79,462,463],{},"Accuracy at step 420: 0.9513\n",[79,465,467],{"class":81,"line":466},65,[79,468,469],{},"Accuracy at step 430: 0.9483\n",[79,471,473],{"class":81,"line":472},66,[79,474,475],{},"Accuracy at step 440: 0.9518\n",[79,477,479],{"class":81,"line":478},67,[79,480,481],{},"Accuracy at step 450: 0.949\n",[79,483,485],{"class":81,"line":484},68,[79,486,487],{},"Accuracy at step 460: 0.9543\n",[79,489,491],{"class":81,"line":490},69,[79,492,493],{},"Accuracy at step 470: 0.9552\n",[79,495,497],{"class":81,"line":496},70,[79,498,499],{},"Accuracy at step 480: 0.9515\n",[79,501,503],{"class":81,"line":502},71,[79,504,505],{},"Accuracy at step 490: 0.9544\n",[79,507,509],{"class":81,"line":508},72,[79,510,511],{},"Adding run metadata for 499\n",[79,513,515],{"class":81,"line":514},73,[79,516,517],{},"Accuracy at step 500: 0.9586\n",[79,519,521],{"class":81,"line":520},74,[79,522,523],{},"Accuracy at step 510: 0.9567\n",[79,525,527],{"class":81,"line":526},75,[79,528,529],{},"Accuracy at step 520: 0.9572\n",[79,531,533],{"class":81,"line":532},76,[79,534,535],{},"Accuracy at step 530: 0.9574\n",[79,537,539],{"class":81,"line":538},77,[79,540,541],{},"Accuracy at step 540: 0.9584\n",[79,543,545],{"class":81,"line":544},78,[79,546,547],{},"Accuracy at step 550: 0.9593\n",[79,549,551],{"class":81,"line":550},79,[79,552,553],{},"Accuracy at step 560: 0.958\n",[79,555,557],{"class":81,"line":556},80,[79,558,559],{},"Accuracy at step 570: 0.9575\n",[79,561,563],{"class":81,"line":562},81,[79,564,565],{},"Accuracy at step 580: 0.9582\n",[79,567,569],{"class":81,"line":568},82,[79,570,571],{},"Accuracy at step 590: 0.9609\n",[79,573,575],{"class":81,"line":574},83,[79,576,577],{},"Adding run metadata for 599\n",[79,579,581],{"class":81,"line":580},84,[79,582,583],{},"Accuracy at step 600: 0.9618\n",[79,585,587],{"class":81,"line":586},85,[79,588,589],{},"Accuracy at step 610: 0.9605\n",[79,591,593],{"class":81,"line":592},86,[79,594,595],{},"Accuracy at step 620: 0.9606\n",[79,597,599],{"class":81,"line":598},87,[79,600,601],{},"Accuracy at step 630: 0.961\n",[79,603,605],{"class":81,"line":604},88,[79,606,607],{},"Accuracy at step 640: 0.963\n",[79,609,611],{"class":81,"line":610},89,[79,612,613],{},"Accuracy at step 650: 0.9614\n",[79,615,617],{"class":81,"line":616},90,[79,618,619],{},"Accuracy at step 660: 0.9622\n",[79,621,623],{"class":81,"line":622},91,[79,624,625],{},"Accuracy at step 670: 0.9634\n",[79,627,629],{"class":81,"line":628},92,[79,630,631],{},"Accuracy at step 680: 0.9641\n",[79,633,635],{"class":81,"line":634},93,[79,636,637],{},"Accuracy at step 690: 0.9627\n",[79,639,641],{"class":81,"line":640},94,[79,642,643],{},"Adding run metadata for 699\n",[79,645,647],{"class":81,"line":646},95,[79,648,649],{},"Accuracy at step 700: 0.9623\n",[79,651,653],{"class":81,"line":652},96,[79,654,655],{},"Accuracy at step 710: 0.9612\n",[79,657,659],{"class":81,"line":658},97,[79,660,661],{},"Accuracy at step 720: 0.9628\n",[79,663,665],{"class":81,"line":664},98,[79,666,667],{},"Accuracy at step 730: 0.965\n",[79,669,671],{"class":81,"line":670},99,[79,672,673],{},"Accuracy at step 740: 0.9635\n",[79,675,677],{"class":81,"line":676},100,[79,678,679],{},"Accuracy at step 750: 0.9635\n",[79,681,683],{"class":81,"line":682},101,[79,684,685],{},"Accuracy at step 760: 0.9648\n",[79,687,689],{"class":81,"line":688},102,[79,690,691],{},"Accuracy at step 770: 0.9637\n",[79,693,695],{"class":81,"line":694},103,[79,696,697],{},"Accuracy at step 780: 0.9658\n",[79,699,701],{"class":81,"line":700},104,[79,702,703],{},"Accuracy at step 790: 0.9649\n",[79,705,707],{"class":81,"line":706},105,[79,708,709],{},"Adding run metadata for 799\n",[79,711,713],{"class":81,"line":712},106,[79,714,715],{},"Accuracy at step 800: 0.9681\n",[79,717,719],{"class":81,"line":718},107,[79,720,721],{},"Accuracy at step 810: 0.9661\n",[79,723,725],{"class":81,"line":724},108,[79,726,727],{},"Accuracy at step 820: 0.9657\n",[79,729,731],{"class":81,"line":730},109,[79,732,733],{},"Accuracy at step 830: 0.9646\n",[79,735,737],{"class":81,"line":736},110,[79,738,739],{},"Accuracy at step 840: 0.9647\n",[79,741,743],{"class":81,"line":742},111,[79,744,745],{},"Accuracy at step 850: 0.965\n",[79,747,749],{"class":81,"line":748},112,[79,750,751],{},"Accuracy at step 860: 0.9677\n",[79,753,755],{"class":81,"line":754},113,[79,756,757],{},"Accuracy at step 870: 0.9649\n",[79,759,761],{"class":81,"line":760},114,[79,762,763],{},"Accuracy at step 880: 0.9675\n",[79,765,767],{"class":81,"line":766},115,[79,768,769],{},"Accuracy at step 890: 0.969\n",[79,771,773],{"class":81,"line":772},116,[79,774,775],{},"Adding run metadata for 899\n",[79,777,779],{"class":81,"line":778},117,[79,780,781],{},"Accuracy at step 900: 0.9689\n",[79,783,785],{"class":81,"line":784},118,[79,786,787],{},"Accuracy at step 910: 0.967\n",[79,789,791],{"class":81,"line":790},119,[79,792,793],{},"Accuracy at step 920: 0.9672\n",[79,795,797],{"class":81,"line":796},120,[79,798,799],{},"Accuracy at step 930: 0.9645\n",[79,801,803],{"class":81,"line":802},121,[79,804,805],{},"Accuracy at step 940: 0.9657\n",[79,807,809],{"class":81,"line":808},122,[79,810,811],{},"Accuracy at step 950: 0.9699\n",[79,813,815],{"class":81,"line":814},123,[79,816,817],{},"Accuracy at step 960: 0.968\n",[79,819,821],{"class":81,"line":820},124,[79,822,823],{},"Accuracy at step 970: 0.9679\n",[79,825,827],{"class":81,"line":826},125,[79,828,829],{},"Accuracy at step 980: 0.9651\n",[79,831,833],{"class":81,"line":832},126,[79,834,835],{},"Accuracy at step 990: 0.9683\n",[79,837,839],{"class":81,"line":838},127,[79,840,841],{},"Adding run metadata for 999\n",[10,843,844],{},"The script completed successfully! Now we can can take a look at what happened during the training. Launch Tensorboard with the following command:",[17,846,849],{"className":847,"code":848,"language":22},[20],"root@eb9e069064d7:~# tensorboard --logdir=/tmp/tensorflow/mnist/logs/\nTensorBoard 0.4.0rc2 at http://eb9e069064d7:6006 (Press CTRL+C to quit)\n",[24,850,848],{"__ignoreMap":26},[10,852,853,854,857],{},"Now we can simply navigate to ",[24,855,856],{},"localhost:6006"," in our browser to start using Tensorboard. Here's a screenshot of Tensorboard showing accuracy:",[10,859,860],{},[861,862],"img",{"alt":863,"src":864},"png","/static/tf.png",[10,866,867],{},"This wasn't too bad. The MNIST example included a very nice script with everything set up properly. My next big challenge is to implement some type of learning model with a data set of my own and visualize it with TensorBoard, but I'll have to go through several examples before then.",[869,870,871],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":26,"searchDepth":88,"depth":88,"links":873},[],true,"2017-11-20",false,"md",null,{"layout":880},"post","/2017/11/20/using-tensorflow-and-tensor-board-with-docker",{"title":5,"description":12},"2017/11/20/using-tensorflow-and-tensor-board-with-docker",[885,886],"tensorflow","docker","ybgqIS1EgjBhIqVmwzjnwYy2cWf5ZmNs5DhhTPngjPM",1753130149456]