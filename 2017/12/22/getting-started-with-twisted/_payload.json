[{"data":1,"prerenderedAt":338},["ShallowReactive",2],{"getting-started-with-twisted":3},{"id":4,"title":5,"body":6,"comments":130,"date":326,"description":40,"draft":327,"extension":328,"external":329,"image":16,"meta":330,"navigation":130,"path":332,"seo":333,"stem":334,"tags":335,"__hash__":337},"blog/2017/12/22/getting-started-with-twisted.md","Getting started with Python's Twisted Framework",{"type":7,"value":8,"toc":322},"minimark",[9,17,25,30,41,44,49,53,56,101,112,116,254,258,318],[10,11,12],"p",{},[13,14],"img",{"alt":15,"src":16},"png","/static/twisted-snakes.png",[10,18,19,20,24],{},"In this article I'm going to be exploring python's twisted framework. I'm working through the ",[21,22,23],"em",{},"Twisted Network Programming Essentials"," book from O'Reilly.",[26,27,29],"h2",{"id":28},"installation","Installation",[31,32,37],"pre",{"className":33,"code":35,"language":36},[34],"language-text"," $ pip install twisted\n","text",[38,39,35],"code",{"__ignoreMap":40},"",[10,42,43],{},"The main idea behind Twisted is that it gives us the parallelism of multithreading programming with the ease of reasoning of single threaded programming.",[10,45,46],{},[13,47],{"alt":15,"src":48},"/static/event-driven.jpg",[26,50,52],{"id":51},"the-reactor","The Reactor",[10,54,55],{},"This is the core of Twisted. Here is a simple explanation of what the reactor does with psuedo-code:",[31,57,61],{"className":58,"code":59,"language":60,"meta":40,"style":40},"language-python shiki shiki-themes github-light github-dark","while True:\n    timeout = timeout_until_next_timed_event()\n    events = wait_for_events(timeout)\n    events += timed_events_until(now())\n    for event in events:\n        event.process()\n","python",[38,62,63,71,77,83,89,95],{"__ignoreMap":40},[64,65,68],"span",{"class":66,"line":67},"line",1,[64,69,70],{},"while True:\n",[64,72,74],{"class":66,"line":73},2,[64,75,76],{},"    timeout = timeout_until_next_timed_event()\n",[64,78,80],{"class":66,"line":79},3,[64,81,82],{},"    events = wait_for_events(timeout)\n",[64,84,86],{"class":66,"line":85},4,[64,87,88],{},"    events += timed_events_until(now())\n",[64,90,92],{"class":66,"line":91},5,[64,93,94],{},"    for event in events:\n",[64,96,98],{"class":66,"line":97},6,[64,99,100],{},"        event.process()\n",[10,102,103,104,107,108,111],{},"Here's a simple echo server/client example that illustrates how the reactor works. It is composed of ",[38,105,106],{},"echoclient.py"," and ",[38,109,110],{},"echoserver.py",":",[10,113,114],{},[21,115,106],{},[31,117,119],{"className":58,"code":118,"language":60,"meta":40,"style":40},"from twisted.internet import reactor, protocol\n\nclass EchoClient(protocol.Protocol):\n    def connectionMade(self):\n        self.transport.write(u\"Hello, world!\".encode('utf-8'))\n\n    def dataReceived(self, data):\n        print(\"Server said:\", data)\n        self.transport.loseConnection()\n\nclass EchoFactory(protocol.ClientFactory):\n    def buildProtocol(self, addr):\n        return EchoClient()\n\n    def clientConnectionFailed(self, connector, reason):\n        print(\"Connection failed.\")\n        reactor.stop()\n\n    def clientConnectionLost(self, connector, reason):\n        print(\"Connection lost.\")\n        reactor.stop()\n\nreactor.connectTCP(\"localhost\", 8000, EchoFactory())\nreactor.run()\n",[38,120,121,126,132,137,142,147,151,157,163,169,174,180,186,192,197,203,209,215,220,226,232,237,242,248],{"__ignoreMap":40},[64,122,123],{"class":66,"line":67},[64,124,125],{},"from twisted.internet import reactor, protocol\n",[64,127,128],{"class":66,"line":73},[64,129,131],{"emptyLinePlaceholder":130},true,"\n",[64,133,134],{"class":66,"line":79},[64,135,136],{},"class EchoClient(protocol.Protocol):\n",[64,138,139],{"class":66,"line":85},[64,140,141],{},"    def connectionMade(self):\n",[64,143,144],{"class":66,"line":91},[64,145,146],{},"        self.transport.write(u\"Hello, world!\".encode('utf-8'))\n",[64,148,149],{"class":66,"line":97},[64,150,131],{"emptyLinePlaceholder":130},[64,152,154],{"class":66,"line":153},7,[64,155,156],{},"    def dataReceived(self, data):\n",[64,158,160],{"class":66,"line":159},8,[64,161,162],{},"        print(\"Server said:\", data)\n",[64,164,166],{"class":66,"line":165},9,[64,167,168],{},"        self.transport.loseConnection()\n",[64,170,172],{"class":66,"line":171},10,[64,173,131],{"emptyLinePlaceholder":130},[64,175,177],{"class":66,"line":176},11,[64,178,179],{},"class EchoFactory(protocol.ClientFactory):\n",[64,181,183],{"class":66,"line":182},12,[64,184,185],{},"    def buildProtocol(self, addr):\n",[64,187,189],{"class":66,"line":188},13,[64,190,191],{},"        return EchoClient()\n",[64,193,195],{"class":66,"line":194},14,[64,196,131],{"emptyLinePlaceholder":130},[64,198,200],{"class":66,"line":199},15,[64,201,202],{},"    def clientConnectionFailed(self, connector, reason):\n",[64,204,206],{"class":66,"line":205},16,[64,207,208],{},"        print(\"Connection failed.\")\n",[64,210,212],{"class":66,"line":211},17,[64,213,214],{},"        reactor.stop()\n",[64,216,218],{"class":66,"line":217},18,[64,219,131],{"emptyLinePlaceholder":130},[64,221,223],{"class":66,"line":222},19,[64,224,225],{},"    def clientConnectionLost(self, connector, reason):\n",[64,227,229],{"class":66,"line":228},20,[64,230,231],{},"        print(\"Connection lost.\")\n",[64,233,235],{"class":66,"line":234},21,[64,236,214],{},[64,238,240],{"class":66,"line":239},22,[64,241,131],{"emptyLinePlaceholder":130},[64,243,245],{"class":66,"line":244},23,[64,246,247],{},"reactor.connectTCP(\"localhost\", 8000, EchoFactory())\n",[64,249,251],{"class":66,"line":250},24,[64,252,253],{},"reactor.run()\n",[10,255,256],{},[21,257,110],{},[31,259,261],{"className":58,"code":260,"language":60,"meta":40,"style":40},"from twisted.internet import protocol, reactor\n\nclass Echo(protocol.Protocol):\n    def dataReceived(self,data):\n        self.transport.write(data)\n\nclass EchoFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Echo()\n\nreactor.listenTCP(8000, EchoFactory())\nreactor.run()\n",[38,262,263,268,272,277,282,287,291,296,300,305,309,314],{"__ignoreMap":40},[64,264,265],{"class":66,"line":67},[64,266,267],{},"from twisted.internet import protocol, reactor\n",[64,269,270],{"class":66,"line":73},[64,271,131],{"emptyLinePlaceholder":130},[64,273,274],{"class":66,"line":79},[64,275,276],{},"class Echo(protocol.Protocol):\n",[64,278,279],{"class":66,"line":85},[64,280,281],{},"    def dataReceived(self,data):\n",[64,283,284],{"class":66,"line":91},[64,285,286],{},"        self.transport.write(data)\n",[64,288,289],{"class":66,"line":97},[64,290,131],{"emptyLinePlaceholder":130},[64,292,293],{"class":66,"line":153},[64,294,295],{},"class EchoFactory(protocol.Factory):\n",[64,297,298],{"class":66,"line":159},[64,299,185],{},[64,301,302],{"class":66,"line":165},[64,303,304],{},"        return Echo()\n",[64,306,307],{"class":66,"line":171},[64,308,131],{"emptyLinePlaceholder":130},[64,310,311],{"class":66,"line":176},[64,312,313],{},"reactor.listenTCP(8000, EchoFactory())\n",[64,315,316],{"class":66,"line":182},[64,317,253],{},[319,320,321],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":40,"searchDepth":73,"depth":73,"links":323},[324,325],{"id":28,"depth":73,"text":29},{"id":51,"depth":73,"text":52},"2017-12-22",false,"md",null,{"layout":331},"post","/2017/12/22/getting-started-with-twisted",{"title":5,"description":40},"2017/12/22/getting-started-with-twisted",[60,336],"twisted","0bbDBKU8PLdboKlUP7UMQOO0FrqQijbGteo3aI2H7W8",1753130138068]