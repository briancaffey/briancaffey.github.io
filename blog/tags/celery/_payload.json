[{"data":1,"prerenderedAt":258},["ShallowReactive",2],{"/blog/tags/celery/":3},[4],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"date":11,"image":12,"tags":13,"body":21,"_type":252,"_id":253,"_source":254,"_file":255,"_stem":256,"_extension":257},"/2020/11/29/weekend-project-update-open-sec-data","29",false,"","Weekend project update: Open SEC Data","This project uses Django, DRF and Celery to read public SEC filings from sec.gov, build it into an API which is consumed through a Vue.js application.","2020-11-29T00:00:00.000Z","/static/sec-update.jpg",[14,15,16,17,18,19,20],"django","vue","data","api","gitlab","docker","celery",{"type":22,"children":23,"toc":249},"root",[24,32,72,86,91,177,182],{"type":25,"tag":26,"props":27,"children":28},"element","p",{},[29],{"type":30,"value":31},"text","Here's an early look at a project I have been working on to practice some Django and Vue.js concepts: Open SEC Data.",{"type":25,"tag":33,"props":34,"children":35},"ul",{},[36,50,61],{"type":25,"tag":37,"props":38,"children":39},"li",{},[40,48],{"type":25,"tag":41,"props":42,"children":46},"a",{"href":43,"rel":44},"https://opensecdata.ga",[45],"nofollow",[47],{"type":30,"value":43},{"type":30,"value":49}," (project staging website, deployed to docker swarm cluster running on DigitalOcean)",{"type":25,"tag":37,"props":51,"children":52},{},[53,59],{"type":25,"tag":41,"props":54,"children":57},{"href":55,"rel":56},"https://gitlab.com/briancaffey/sec-filings-app",[45],[58],{"type":30,"value":55},{"type":30,"value":60}," (main repository, requires GitLab account)",{"type":25,"tag":37,"props":62,"children":63},{},[64,70],{"type":25,"tag":41,"props":65,"children":68},{"href":66,"rel":67},"https://github.com/briancaffey/sec-filings-app",[45],[69],{"type":30,"value":66},{"type":30,"value":71}," (mirror, no account required to view)",{"type":25,"tag":26,"props":73,"children":74},{},[75,77,84],{"type":30,"value":76},"This project uses Django, DRF and Celery to read public SEC filings from ",{"type":25,"tag":41,"props":78,"children":81},{"href":79,"rel":80},"https://www.sec.gov/Archives/edgar/full-index/",[45],[82],{"type":30,"value":83},"sec.gov",{"type":30,"value":85},", build it into an API which is consumed through a Vue.js application. I'm currently focused on 13F filings which are required for large US investment funds managing over $100 million USD. There is data dating back to 1993 and it is published quarterly.",{"type":25,"tag":26,"props":87,"children":88},{},[89],{"type":30,"value":90},"Here are some of the things I'm focusing on in this project in no particular order:",{"type":25,"tag":33,"props":92,"children":93},{},[94,99,104,109,114,119,124,146,167,172],{"type":25,"tag":37,"props":95,"children":96},{},[97],{"type":30,"value":98},"Getting better at Django REST Framework. This project has been helping me apply some of the parts of DRF that I have found difficult. I'm currently using ViewSets which feels function-based views inside of class-based views. They are flexible, but I would like to add more abstraction with filtering",{"type":25,"tag":37,"props":100,"children":101},{},[102],{"type":30,"value":103},"Django admin. While this project primarily uses Django as a REST API with Django REST Framework, I have tried to take advantage of the Django admin to build out helpful views that can be used to spot check the data I'm creating. Most of my API is read-only, this makes things pretty simple.",{"type":25,"tag":37,"props":105,"children":106},{},[107],{"type":30,"value":108},"Moderately complex paginated data tables with Vue. I work with lots of paginated table data, and I think there is a better way to do abstract some of the repeated logic that I use (getting and setting current page, rows per page). I'm using Vuex, and I have heard of module factories, but I'm thinking that there will be a better way to do this when Vue 3 officially comes to Quasar Framework (Quasar is a Vue.js framework).",{"type":25,"tag":37,"props":110,"children":111},{},[112],{"type":30,"value":113},"Session authentication with DRF. There are a lot of guides showing how to use JWT and Token Authentication for DRF with Javascript frontends. The DRF recommends using Session Authentication for such use cases as a web-base Javascript client, so I hope I can promote some best practices around how to use Django's built-in session authentication for use with the Django REST Framework using an HttpOnly session cookie. I also understand that all security decisions have trade-offs, and I'm trying to understand what trade-offs come with handling authentication in this way.",{"type":25,"tag":37,"props":115,"children":116},{},[117],{"type":30,"value":118},"Social authentication. I have previously setup social authentication with Google, Facebook and GitHub using Python Social Auth. I think it is a great package, and it adds a lot of flexibility with it's concept of pipelines, but I haven't done much with these yet, so I'm hoping to dig in further and better understand how I can make better use of social authentication in my app. This app uses Linkedin 0Auth2 with a custom user model. Logging in with Linkedin account gives you the ability to request an API Token (Django REST Framework's Token) to access the public API.",{"type":25,"tag":37,"props":120,"children":121},{},[122],{"type":30,"value":123},"Automatic API documentation with OpenAPI. Swagger/OpenAPI seems like nice way to document and API, so I'm hoping to build best practices around how to document a DRF API automatically with OpenAPI and Swagger UI.",{"type":25,"tag":37,"props":125,"children":126},{},[127,129,136,138,144],{"type":30,"value":128},"CI/CD with GitLab and docker swarm. I will admit that I am huge GitLab fan. I love how flexible their CI/CD pipelines are. Being a docker fan as well, I chose to use docker swarm for this project to keep things simple and straightforward. I think one under-appreciate feature of docker is being able to set ",{"type":25,"tag":130,"props":131,"children":133},"code",{"className":132},[],[134],{"type":30,"value":135},"DOCKER_HOST",{"type":30,"value":137}," to an SSH connection, such as ",{"type":25,"tag":130,"props":139,"children":141},{"className":140},[],[142],{"type":30,"value":143},"ssh://root@123.456.789.10",{"type":30,"value":145},". This let's you control the remote docker host without needing to SSH to it first, and it is also how I'm able to deploy and run management commands \"manually\" through the GitLab UI.",{"type":25,"tag":37,"props":147,"children":148},{},[149,151,157,159,165],{"type":30,"value":150},"Productive development environment. To start the project, you only need to run docker-compose up (after copying ",{"type":25,"tag":130,"props":152,"children":154},{"className":153},[],[155],{"type":30,"value":156},".env.template",{"type":30,"value":158}," to ",{"type":25,"tag":130,"props":160,"children":162},{"className":161},[],[163],{"type":30,"value":164},".env",{"type":30,"value":166}," in the root directory for storing sensitive data outside of git such as LinkedIn OAuth2 keys). The development environment is very similar to how this project runs in production with some additional utilities for monitoring and debugging such as pgadmin4, flower (for celery), redis commander (a GUI for viewing redis databases), Django debug toolbar (a must have for any Django project, I believe), runserver_plus with Werkzeug, and others. Also, the backend and frontend hot reload automatically with the help of webpack for Vue and watchdog for Django and Celery.",{"type":25,"tag":37,"props":168,"children":169},{},[170],{"type":30,"value":171},"Automatic TLS certificate generation with Traefik. For a simple project in docker swarm, I'm really happy with how simple it is to request TLS certificates from Let's Encrypt automatically with Traefik. There are no scripts, cron jobs or one-time setup jobs, it just seems to work out of the box if configured correctly.",{"type":25,"tag":37,"props":173,"children":174},{},[175],{"type":30,"value":176},"Testing with pytest. I have only been trying to test most of my API views so far. I really like using factory with pytest, so I use that in most of my tests.",{"type":25,"tag":26,"props":178,"children":179},{},[180],{"type":30,"value":181},"That's all I have for now. I have a long list of questions, things I want to improve, add and experiment with, here are just a few that come to mind:",{"type":25,"tag":33,"props":183,"children":184},{},[185,190,195,209,214,219,224,229],{"type":25,"tag":37,"props":186,"children":187},{},[188],{"type":30,"value":189},"Frontend testing. I don't have any component testing or e2d tests, so this would be good to add eventually. Since I'm using a component library and my app uses these components directly, I'm not exactly sure how much testing I should be doing.",{"type":25,"tag":37,"props":191,"children":192},{},[193],{"type":30,"value":194},"Data verification/validation. There are a lot of site that do provide similar data, WhaleWisdom is the biggest one that I know of. Once I get more data built on the site it would be good to spot check some of the values. There are some nuances to the filing data that I haven't addressed, such as Amendment filings and additions.",{"type":25,"tag":37,"props":196,"children":197},{},[198,200,207],{"type":30,"value":199},"Calculating period changes. One of the features that I'm not sure how best to implement is the ability to sort holdings for a filer in a given period on the percent increase from the last period. One way would be to add these as additional fields to the Holding model and then calculate these values as I process the data in celery. If I process the data from recent periods to later periods, I will have to update these values once the previous period has been processed, so it would be an additional check to do. I'll probably post this question here in more detail later. Here's ",{"type":25,"tag":41,"props":201,"children":204},{"href":202,"rel":203},"https://whalewisdom.com/filer/ubs-ag#tabholdings_tab_link",[45],[205],{"type":30,"value":206},"an example of what this means from WhaleWisdom",{"type":30,"value":208},".",{"type":25,"tag":37,"props":210,"children":211},{},[212],{"type":30,"value":213},"Accessing LinkedIn profile data to populate fields on my CustomUser model.",{"type":25,"tag":37,"props":215,"children":216},{},[217],{"type":30,"value":218},"Scaling? I have a lot more experience with deploying projects to AWS which is built around the ability to scale. I don't know a project on DigitalOcean would be scaled automatically. A single node docker swarm cluster while take some time to process all of the data. I would probably be better of scaling vertically with much bigger droplets and higher celery concurrency.",{"type":25,"tag":37,"props":220,"children":221},{},[222],{"type":30,"value":223},"Docker swarm secrets. I'm currently using environment variables to pass secrets stored in GitLab CI when I build images and deploy to docker swarm. I would like to learn how to properly use swarm secrets and work them into my CI/CD pipeline.",{"type":25,"tag":37,"props":225,"children":226},{},[227],{"type":30,"value":228},"As I mentioned above, I'm also interested in updating this project to Vue3 and to apply some of its new features to this project.",{"type":25,"tag":37,"props":230,"children":231},{},[232,234,240,242,248],{"type":30,"value":233},"Use pipenv, poetry or some other way of pinning secondary python dependencies. Does anyone have a recommendation on how best to do this with docker. I have always thought that docker ",{"type":25,"tag":235,"props":236,"children":237},"em",{},[238],{"type":30,"value":239},"is",{"type":30,"value":241}," the virtual environment, but I realize that some versions of indirect dependencies may change when pip installing without using a lockfile similar to ",{"type":25,"tag":130,"props":243,"children":245},{"className":244},[],[246],{"type":30,"value":247},"package-lock.json",{"type":30,"value":208},{"title":8,"searchDepth":250,"depth":250,"links":251},2,[],"markdown","content:2020:11:29:weekend-project-update-open-sec-data.md","content","2020/11/29/weekend-project-update-open-sec-data.md","2020/11/29/weekend-project-update-open-sec-data","md",1731319307247]