[{"data":1,"prerenderedAt":2665},["ShallowReactive",2],{"/blog/tags/drf/":3},[4,913,2061],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"date":11,"image":12,"tags":13,"body":18,"_type":907,"_id":908,"_source":909,"_file":910,"_stem":911,"_extension":912},"/2021/01/02/using-the-stripe-api-for-recurring-monthly-saas-subscription-payments-in-django-and-vue-application","02",false,"","Using Stripe for recurring monthly SaaS subscriptions in a Django + Vue application","This article shares my experience learning and implementing the Stripe API for recurring monthly SaaS subscription payments in an application using Django and Vue.js","2021-01-02T00:00:00.000Z","/static/django_vue_stripe.png",[14,15,16,17],"django","vue","drf","stripe",{"type":19,"children":20,"toc":895},"root",[21,30,36,41,48,63,76,82,103,112,118,123,130,367,373,378,709,715,720,783,789],{"type":22,"tag":23,"props":24,"children":26},"element","h1",{"id":25},"using-stripe-for-recurring-monthly-payments-to-a-paid-saas-subscription-in-a-django-vuejs-application",[27],{"type":28,"value":29},"text","Using Stripe for recurring monthly payments to a paid SaaS subscription in a Django + Vue.js application",{"type":22,"tag":31,"props":32,"children":33},"p",{},[34],{"type":28,"value":35},"This diagram shows the flow of data for the lifecycle of a paid customer subscription in a Django application with a Vue.js client. There are four stages:",{"type":22,"tag":31,"props":37,"children":38},{},[39],{"type":28,"value":40},"I. Account setup, configuration, model and object creation\nII. Logic and data flow for starting a customer's premium monthly subscription\nIII. Automatic subscription renewal\nIV. Cancelling a premium subscription",{"type":22,"tag":42,"props":43,"children":45},"h2",{"id":44},"context",[46],{"type":28,"value":47},"Context",{"type":22,"tag":31,"props":49,"children":50},{},[51,53,61],{"type":28,"value":52},"This is my first attempt at using Stripe, or any other online payment service API. Most of what I have diagramed here comes from this article from the Stripe documentation: ",{"type":22,"tag":54,"props":55,"children":59},"a",{"href":56,"rel":57},"https://stripe.com/docs/billing/subscriptions/fixed-price",[58],"nofollow",[60],{"type":28,"value":56},{"type":28,"value":62},". Knowing almost nothing about what is needed to create a SaaS subscription, I found this article very helpful. It was a lot to read at once, but each call to to the Stripe API is very clear and straightforward.",{"type":22,"tag":31,"props":64,"children":65},{},[66,68,74],{"type":28,"value":67},"I made some modifications and additions to this walk-through for my use case, which is an API service called Open SEC Data, an open source project that I'm working on (",{"type":22,"tag":54,"props":69,"children":72},{"href":70,"rel":71},"https://gitlab.com/briancaffey/sec-filings-app",[58],[73],{"type":28,"value":70},{"type":28,"value":75},").",{"type":22,"tag":42,"props":77,"children":79},{"id":78},"diagram",[80],{"type":28,"value":81},"Diagram",{"type":22,"tag":31,"props":83,"children":84},{},[85,87,93,95,101],{"type":28,"value":86},"Here's a read-only link to the diagram: ",{"type":22,"tag":54,"props":88,"children":91},{"href":89,"rel":90},"https://drive.google.com/file/d/1oH2b0W-c-dI5oXzc_jvCGvXx9sJagr4a/view?usp=sharing",[58],[92],{"type":28,"value":89},{"type":28,"value":94},". This diagram is made with ",{"type":22,"tag":54,"props":96,"children":99},{"href":97,"rel":98},"https://www.diagrams.net/",[58],[100],{"type":28,"value":97},{"type":28,"value":102},".",{"type":22,"tag":31,"props":104,"children":105},{},[106],{"type":22,"tag":107,"props":108,"children":111},"img",{"alt":109,"src":110},"png","/static/django_vue_stripe_diagram.png",[],{"type":22,"tag":42,"props":113,"children":115},{"id":114},"legend",[116],{"type":28,"value":117},"Legend",{"type":22,"tag":31,"props":119,"children":120},{},[121],{"type":28,"value":122},"Here's a detailed description of each part of the diagram, starting with the first section.",{"type":22,"tag":124,"props":125,"children":127},"h3",{"id":126},"i-account-setup-configuration-model-and-object-creation",[128],{"type":28,"value":129},"I. Account setup, configuration, model and object creation",{"type":22,"tag":131,"props":132,"children":133},"ol",{},[134,149,162,188,201,219,224,253,279,305,330,341],{"type":22,"tag":135,"props":136,"children":137},"li",{},[138,140,147],{"type":28,"value":139},"Setup a Stripe account. For local development, make sure you turn on ",{"type":22,"tag":141,"props":142,"children":144},"code",{"className":143},[],[145],{"type":28,"value":146},"View test data",{"type":28,"value":148},". On your local machine, install the stripe CLI and authenticate with your Stripe account",{"type":22,"tag":135,"props":150,"children":151},{},[152,154,160],{"type":28,"value":153},"Create a Product in Stripe (mine is called ",{"type":22,"tag":141,"props":155,"children":157},{"className":156},[],[158],{"type":28,"value":159},"Open SEC Data Premium Subscription",{"type":28,"value":161},")",{"type":22,"tag":135,"props":163,"children":164},{},[165,167,171,173,179,181,187],{"type":28,"value":166},"Create a Price in Stripe that references the Product.",{"type":22,"tag":168,"props":169,"children":170},"br",{},[],{"type":28,"value":172},"Instead of creating these objects in the Stripe Dashboard, you can also create them with the Stripe CLI or the Python SDK. I created a Django management command called ",{"type":22,"tag":141,"props":174,"children":176},{"className":175},[],[177],{"type":28,"value":178},"create_stripe_data",{"type":28,"value":180}," that will create a Product and related Price in Stripe. We will need the id of the Price, it looks like this: ",{"type":22,"tag":141,"props":182,"children":184},{"className":183},[],[185],{"type":28,"value":186},"price_1Hx0goL67dRDwyuDh9yEWsBo",{"type":28,"value":102},{"type":22,"tag":135,"props":189,"children":190},{},[191,193,199],{"type":28,"value":192},"Add the Price ID as an environment variable ",{"type":22,"tag":141,"props":194,"children":196},{"className":195},[],[197],{"type":28,"value":198},"SUBSCRIPTION_PRICE_ID",{"type":28,"value":200}," to the backend. This will be used later when we make API calls to Stripe from inside of Django views.",{"type":22,"tag":135,"props":202,"children":203},{},[204,206,209,211,217],{"type":28,"value":205},"For production environments, you will need to a register a Stripe webhook. This is an endpoint in Django that Stripe will POST to in order to inform the Django application of events that have happened in Stripe.",{"type":22,"tag":168,"props":207,"children":208},{},[],{"type":28,"value":210},"For local development we need to run ",{"type":22,"tag":141,"props":212,"children":214},{"className":213},[],[215],{"type":28,"value":216},"stripe listen --forward-to localhost/api/stripe-webhooks/",{"type":28,"value":218}," in order to forward webhook events to the local Django application. This works really well for local development.",{"type":22,"tag":135,"props":220,"children":221},{},[222],{"type":28,"value":223},"In both local and production environments we need to add an environment variables to the Django application that will be used to validate the webhook event.",{"type":22,"tag":135,"props":225,"children":226},{},[227,229,235,237,243,245,251],{"type":28,"value":228},"You will need to create a ",{"type":22,"tag":141,"props":230,"children":232},{"className":231},[],[233],{"type":28,"value":234},"Subscription",{"type":28,"value":236}," model or similar in your Django models. This model should be related to your user model in some way. At a minimum it should have the ",{"type":22,"tag":141,"props":238,"children":240},{"className":239},[],[241],{"type":28,"value":242},"subscription_id",{"type":28,"value":244}," (the ID of the Stripe Subscription) and ",{"type":22,"tag":141,"props":246,"children":248},{"className":247},[],[249],{"type":28,"value":250},"current_period_end",{"type":28,"value":252}," (also from the Stripe Subscription object). We will use this model in the next sections.",{"type":22,"tag":135,"props":254,"children":255},{},[256,262,264,270,272,278],{"type":22,"tag":141,"props":257,"children":259},{"className":258},[],[260],{"type":28,"value":261},"/api/stripe-webhooks/",{"type":28,"value":263}," is the endpoint in the Django application that Stripe will send POST requests to in order to inform the Django application of events that happen in Stripe. The URL can be called anything you want, as long as you register it with that URL. In local development, you need to specify this URL in the ",{"type":22,"tag":141,"props":265,"children":267},{"className":266},[],[268],{"type":28,"value":269},"stipe listen",{"type":28,"value":271}," command (for example, ",{"type":22,"tag":141,"props":273,"children":275},{"className":274},[],[276],{"type":28,"value":277},"stripe listen forward-to localhost/api/stripe-webhooks/",{"type":28,"value":75},{"type":22,"tag":135,"props":280,"children":281},{},[282,288,290,296,298,304],{"type":22,"tag":141,"props":283,"children":285},{"className":284},[],[286],{"type":28,"value":287},"STRIPE_SECRET_KEY",{"type":28,"value":289}," is the name of the secret API key that should only be accessible by the backend. In local development, this key looks like ",{"type":22,"tag":141,"props":291,"children":293},{"className":292},[],[294],{"type":28,"value":295},"sk_test_Abc123",{"type":28,"value":297},". In production, this key will look like ",{"type":22,"tag":141,"props":299,"children":301},{"className":300},[],[302],{"type":28,"value":303},"sk_Abc123",{"type":28,"value":102},{"type":22,"tag":135,"props":306,"children":307},{},[308,313,315,321,323,329],{"type":22,"tag":141,"props":309,"children":311},{"className":310},[],[312],{"type":28,"value":17},{"type":28,"value":314}," is the name of the PyPI package that we need to add to ",{"type":22,"tag":141,"props":316,"children":318},{"className":317},[],[319],{"type":28,"value":320},"requirements.txt",{"type":28,"value":322}," (",{"type":22,"tag":141,"props":324,"children":326},{"className":325},[],[327],{"type":28,"value":328},"requirements/base.txt",{"type":28,"value":75},{"type":22,"tag":135,"props":331,"children":332},{},[333,339],{"type":22,"tag":141,"props":334,"children":336},{"className":335},[],[337],{"type":28,"value":338},"STRIPE_PUBLISHABLE_KEY",{"type":28,"value":340}," is the value of the Stripe API key that can be made public and is used in the Vue application to instantiate Stripe.",{"type":22,"tag":135,"props":342,"children":343},{},[344,346,352,354],{"type":28,"value":345},"The Stripe library is included in ",{"type":22,"tag":141,"props":347,"children":349},{"className":348},[],[350],{"type":28,"value":351},"index.html",{"type":28,"value":353}," via CDN so that it is accessible anywhere in the Vue application. Stripe object is instantiated in the Vue application with:",{"type":22,"tag":355,"props":356,"children":357},"blockquote",{},[358],{"type":22,"tag":31,"props":359,"children":360},{},[361],{"type":22,"tag":141,"props":362,"children":364},{"className":363},[],[365],{"type":28,"value":366},"let stripe = Stripe(process.env.STRIPE_PUBLISHABLE_KEY)",{"type":22,"tag":124,"props":368,"children":370},{"id":369},"ii-logic-and-data-flow-for-starting-a-customers-premium-monthly-subscription",[371],{"type":28,"value":372},"II. Logic and data flow for starting a customer's premium monthly subscription",{"type":22,"tag":31,"props":374,"children":375},{},[376],{"type":28,"value":377},"With everything setup and configured properly in Stripe, the backend Django application and the frontend Vue application, customers can now start paying for monthly subscriptions. In my application, a user can sign up for an account first without having a premium subscription. In other scenarios, having an active account may require a premium subscription.",{"type":22,"tag":131,"props":379,"children":381},{"start":380},13,[382,419,469,481,506,524,537,542,547,552,596,614,625,635,655,660,665,670,704],{"type":22,"tag":135,"props":383,"children":384},{},[385,387,393,395,401,403,410,412,418],{"type":28,"value":386},"When a logged-in user visits their ",{"type":22,"tag":141,"props":388,"children":390},{"className":389},[],[391],{"type":28,"value":392},"/account",{"type":28,"value":394}," page, they will see the status of their account: Basic (free) or Premium (paid subscription). Users on a Basic plan will see the option to upgrade to Premium. They will be redirected to a ",{"type":22,"tag":141,"props":396,"children":398},{"className":397},[],[399],{"type":28,"value":400},"/premium",{"type":28,"value":402}," page where they will be presented with a credit card form. This credit card form is generated by ",{"type":22,"tag":54,"props":404,"children":407},{"href":405,"rel":406},"https://stripe.com/payments/elements",[58],[408],{"type":28,"value":409},"Stripe Elements",{"type":28,"value":411},". The user fills out their credit card, expiration date, card security code and billing ZIP code and then clicks ",{"type":22,"tag":141,"props":413,"children":415},{"className":414},[],[416],{"type":28,"value":417},"Purchase",{"type":28,"value":102},{"type":22,"tag":135,"props":420,"children":421},{},[422,424,429,431,437,439,445,447,453,455,460,462,468],{"type":28,"value":423},"Clicking on ",{"type":22,"tag":141,"props":425,"children":427},{"className":426},[],[428],{"type":28,"value":417},{"type":28,"value":430}," calls a method ",{"type":22,"tag":141,"props":432,"children":434},{"className":433},[],[435],{"type":28,"value":436},"purchase",{"type":28,"value":438}," that calls ",{"type":22,"tag":141,"props":440,"children":442},{"className":441},[],[443],{"type":28,"value":444},"stripe.CreatePaymentMethod",{"type":28,"value":446},". The ",{"type":22,"tag":141,"props":448,"children":450},{"className":449},[],[451],{"type":28,"value":452},"paymentMethodId",{"type":28,"value":454}," token returned from ",{"type":22,"tag":141,"props":456,"children":458},{"className":457},[],[459],{"type":28,"value":444},{"type":28,"value":461}," is then passed to the method called ",{"type":22,"tag":141,"props":463,"children":465},{"className":464},[],[466],{"type":28,"value":467},"createSubscription",{"type":28,"value":102},{"type":22,"tag":135,"props":470,"children":471},{},[472,474,479],{"type":28,"value":473},"Stripe creates this object and returns a response that contains a ",{"type":22,"tag":141,"props":475,"children":477},{"className":476},[],[478],{"type":28,"value":452},{"type":28,"value":480}," token.",{"type":22,"tag":135,"props":482,"children":483},{},[484,489,491,497,499,504],{"type":22,"tag":141,"props":485,"children":487},{"className":486},[],[488],{"type":28,"value":467},{"type":28,"value":490}," sends a POST request to ",{"type":22,"tag":141,"props":492,"children":494},{"className":493},[],[495],{"type":28,"value":496},"/api/stripe/create-subscription/",{"type":28,"value":498}," in the Django application with the ",{"type":22,"tag":141,"props":500,"children":502},{"className":501},[],[503],{"type":28,"value":452},{"type":28,"value":505}," that we generated in the previous step.",{"type":22,"tag":135,"props":507,"children":508},{},[509,514,516,522],{"type":22,"tag":141,"props":510,"children":512},{"className":511},[],[513],{"type":28,"value":496},{"type":28,"value":515}," calls a view called ",{"type":22,"tag":141,"props":517,"children":519},{"className":518},[],[520],{"type":28,"value":521},"create_subscription",{"type":28,"value":523}," which makes a number of API calls to Stripe and then finally saves some data in the application's Postgres database.",{"type":22,"tag":135,"props":525,"children":526},{},[527,529,535],{"type":28,"value":528},"The first API call creates the Customer object in Stripe if it does not exist. ",{"type":22,"tag":141,"props":530,"children":532},{"className":531},[],[533],{"type":28,"value":534},"email=request.user.email",{"type":28,"value":536}," is used in the API call to associate the Stripe customer with the user's email.",{"type":22,"tag":135,"props":538,"children":539},{},[540],{"type":28,"value":541},"Next the payment method is attached to Stripe Customer model.",{"type":22,"tag":135,"props":543,"children":544},{},[545],{"type":28,"value":546},"Next the Stripe payment method is set as the default payment method for Stripe customer for future billing.",{"type":22,"tag":135,"props":548,"children":549},{},[550],{"type":28,"value":551},"The Stripe subscription model is created with the customer ID that was created in the earlier and the price ID corresponding to the premium subscription (added in the setup stage).",{"type":22,"tag":135,"props":553,"children":554},{},[555,557,563,565,571,573,579,581,586,588,594],{"type":28,"value":556},"Once these Stripe API calls have finished, a new Subscription is saved in the Postgres database. ",{"type":22,"tag":141,"props":558,"children":560},{"className":559},[],[561],{"type":28,"value":562},"stripe_subscription_id",{"type":28,"value":564},", ",{"type":22,"tag":141,"props":566,"children":568},{"className":567},[],[569],{"type":28,"value":570},"stripe_customer_id",{"type":28,"value":572}," and ",{"type":22,"tag":141,"props":574,"children":576},{"className":575},[],[577],{"type":28,"value":578},"valid_through",{"type":28,"value":580}," (DateTimeField that keeps track of the date through which the user's subscription has been paid for) are saved to the ",{"type":22,"tag":141,"props":582,"children":584},{"className":583},[],[585],{"type":28,"value":234},{"type":28,"value":587}," model and then the subscription model is saved to the user model's ",{"type":22,"tag":141,"props":589,"children":591},{"className":590},[],[592],{"type":28,"value":593},"subscription",{"type":28,"value":595}," field.",{"type":22,"tag":135,"props":597,"children":598},{},[599,601,606,608],{"type":28,"value":600},"When the ",{"type":22,"tag":141,"props":602,"children":604},{"className":603},[],[605],{"type":28,"value":467},{"type":28,"value":607}," method's POST requests returns successfully, the user's account is fetched again from ",{"type":22,"tag":141,"props":609,"children":611},{"className":610},[],[612],{"type":28,"value":613},"/api/account/",{"type":22,"tag":135,"props":615,"children":616},{},[617,619,624],{"type":28,"value":618},"The browser makes a request to ",{"type":22,"tag":141,"props":620,"children":622},{"className":621},[],[623],{"type":28,"value":613},{"type":28,"value":102},{"type":22,"tag":135,"props":626,"children":627},{},[628,633],{"type":22,"tag":141,"props":629,"children":631},{"className":630},[],[632],{"type":28,"value":613},{"type":28,"value":634}," returns information on the user and their subscription.",{"type":22,"tag":135,"props":636,"children":637},{},[638,640,645,647,653],{"type":28,"value":639},"Data from ",{"type":22,"tag":141,"props":641,"children":643},{"className":642},[],[644],{"type":28,"value":613},{"type":28,"value":646}," is updated in Vuex ",{"type":22,"tag":141,"props":648,"children":650},{"className":649},[],[651],{"type":28,"value":652},"user",{"type":28,"value":654}," store.",{"type":22,"tag":135,"props":656,"children":657},{},[658],{"type":28,"value":659},"The user is now able to make requests to resources for premium features.",{"type":22,"tag":135,"props":661,"children":662},{},[663],{"type":28,"value":664},"In this application, one such example is the ability to request an API key for making for making API calls.",{"type":22,"tag":135,"props":666,"children":667},{},[668],{"type":28,"value":669},"A user makes a request to an API endpoint for a premium feature.",{"type":22,"tag":135,"props":671,"children":672},{},[673,675,681,683,689,691,696,698,703],{"type":28,"value":674},"When determining permissions for resources that should only be accessible to customers with valid subscriptions, we need to compare ",{"type":22,"tag":141,"props":676,"children":678},{"className":677},[],[679],{"type":28,"value":680},"request.user.subscription.valid_through",{"type":28,"value":682}," to ",{"type":22,"tag":141,"props":684,"children":686},{"className":685},[],[687],{"type":28,"value":688},"timezone.now()",{"type":28,"value":690}," and make sure that ",{"type":22,"tag":141,"props":692,"children":694},{"className":693},[],[695],{"type":28,"value":578},{"type":28,"value":697}," is greater than ",{"type":22,"tag":141,"props":699,"children":701},{"className":700},[],[702],{"type":28,"value":688},{"type":28,"value":102},{"type":22,"tag":135,"props":705,"children":706},{},[707],{"type":28,"value":708},"Requests for protected resources are successfully returned to the browser.",{"type":22,"tag":124,"props":710,"children":712},{"id":711},"iii-automatic-subscription-renewal",[713],{"type":28,"value":714},"III. Automatic subscription renewal",{"type":22,"tag":31,"props":716,"children":717},{},[718],{"type":28,"value":719},"The customer's credit card is charged once each month that they are subscribed to the service. This action happens in Stripe. This section assumes that the customer's primary payment method is still valid (it has not been canceled expired or not able to be charged for some other reason).",{"type":22,"tag":131,"props":721,"children":723},{"start":722},32,[724,729,750],{"type":22,"tag":135,"props":725,"children":726},{},[727],{"type":28,"value":728},"The customer's card is charged in Stripe and an event is sent to the Django backend via a webhook that we registered in the setup stage.",{"type":22,"tag":135,"props":730,"children":731},{},[732,734,740,742,748],{"type":28,"value":733},"The webhook view checks ",{"type":22,"tag":141,"props":735,"children":737},{"className":736},[],[738],{"type":28,"value":739},"event.type",{"type":28,"value":741}," and if the event is of type ",{"type":22,"tag":141,"props":743,"children":745},{"className":744},[],[746],{"type":28,"value":747},"invoice.paid",{"type":28,"value":749}," we extend the user's subscription by one month.",{"type":22,"tag":135,"props":751,"children":752},{},[753,755,761,763,768,770,775,777,782],{"type":28,"value":754},"To extend the user's subscription, we modify the ",{"type":22,"tag":141,"props":756,"children":758},{"className":757},[],[759],{"type":28,"value":760},"DateTimeField",{"type":28,"value":762}," field on the ",{"type":22,"tag":141,"props":764,"children":766},{"className":765},[],[767],{"type":28,"value":234},{"type":28,"value":769}," that tracks the ",{"type":22,"tag":141,"props":771,"children":773},{"className":772},[],[774],{"type":28,"value":250},{"type":28,"value":776}," which is included in the webhook data object. The model field in my code is called ",{"type":22,"tag":141,"props":778,"children":780},{"className":779},[],[781],{"type":28,"value":578},{"type":28,"value":102},{"type":22,"tag":124,"props":784,"children":786},{"id":785},"iv-cancelling-a-premium-subscription",[787],{"type":28,"value":788},"IV. Cancelling a premium subscription",{"type":22,"tag":131,"props":790,"children":792},{"start":791},35,[793,806,858,871,883],{"type":22,"tag":135,"props":794,"children":795},{},[796,798,804],{"type":28,"value":797},"When a user decides to cancel their payed subscription service, they click on the ",{"type":22,"tag":141,"props":799,"children":801},{"className":800},[],[802],{"type":28,"value":803},"Cancel My Subscription",{"type":28,"value":805}," button.",{"type":22,"tag":135,"props":807,"children":808},{},[809,811,817,819,825,827,833,835,841,843,849,851,856],{"type":28,"value":810},"This makes a POST request to ",{"type":22,"tag":141,"props":812,"children":814},{"className":813},[],[815],{"type":28,"value":816},"/api/stripe/cancel-subscription",{"type":28,"value":818}," which calls the ",{"type":22,"tag":141,"props":820,"children":822},{"className":821},[],[823],{"type":28,"value":824},"cancel_subscription",{"type":28,"value":826}," view. This view calls ",{"type":22,"tag":141,"props":828,"children":830},{"className":829},[],[831],{"type":28,"value":832},"stripe.Subscription.delete(subscriptionId)",{"type":28,"value":834},", where the ",{"type":22,"tag":141,"props":836,"children":838},{"className":837},[],[839],{"type":28,"value":840},"subscriptionId",{"type":28,"value":842}," is retrieved from ",{"type":22,"tag":141,"props":844,"children":846},{"className":845},[],[847],{"type":28,"value":848},"request.user.subscription",{"type":28,"value":850}," (the ",{"type":22,"tag":141,"props":852,"children":854},{"className":853},[],[855],{"type":28,"value":234},{"type":28,"value":857}," model created in the setup section).",{"type":22,"tag":135,"props":859,"children":860},{},[861,863,869],{"type":28,"value":862},"The subscription is deleted in Stripe through the ",{"type":22,"tag":141,"props":864,"children":866},{"className":865},[],[867],{"type":28,"value":868},"stripe.Subscription.delete",{"type":28,"value":870}," API call.",{"type":22,"tag":135,"props":872,"children":873},{},[874,876,882],{"type":28,"value":875},"The user's subscription is deleted from the user model with ",{"type":22,"tag":141,"props":877,"children":879},{"className":878},[],[880],{"type":28,"value":881},"request.user.subscription.delete()",{"type":28,"value":102},{"type":22,"tag":135,"props":884,"children":885},{},[886,888,893],{"type":28,"value":887},"The frontend responds to the deleted subscription by fetching ",{"type":22,"tag":141,"props":889,"children":891},{"className":890},[],[892],{"type":28,"value":613},{"type":28,"value":894}," again, refresh, or redirecting and the user no longer has access to their premium subscription.",{"title":8,"searchDepth":896,"depth":896,"links":897},2,[898,899,900],{"id":44,"depth":896,"text":47},{"id":78,"depth":896,"text":81},{"id":114,"depth":896,"text":117,"children":901},[902,904,905,906],{"id":126,"depth":903,"text":129},3,{"id":369,"depth":903,"text":372},{"id":711,"depth":903,"text":714},{"id":785,"depth":903,"text":788},"markdown","content:2021:01:02:using-the-stripe-api-for-recurring-monthly-saas-subscription-payments-in-django-and-vue-application.md","content","2021/01/02/using-the-stripe-api-for-recurring-monthly-saas-subscription-payments-in-django-and-vue-application.md","2021/01/02/using-the-stripe-api-for-recurring-monthly-saas-subscription-payments-in-django-and-vue-application","md",{"_path":914,"_dir":915,"_draft":7,"_partial":7,"_locale":8,"title":916,"description":917,"date":918,"image":919,"tags":920,"body":923,"_type":907,"_id":2058,"_source":909,"_file":2059,"_stem":2060,"_extension":912},"/2021/01/01/session-authentication-with-django-django-rest-framework-and-nuxt","01","Session Authentication with Django, Django REST Framework and Nuxt","This article shows how to use session authentication with Django + Nuxt.js applications","2021-01-01T00:00:00.000Z","/static/django_nuxt_auth_og.png",[14,15,921,16,922],"nuxt","authentication",{"type":19,"children":924,"toc":2033},[925,930,935,944,949,954,959,964,968,973,978,984,989,995,1000,1024,1029,1035,1040,1089,1095,1100,1105,1111,1116,1121,1126,1130,1138,1143,1162,1167,1198,1203,1228,1256,1427,1439,1503,1568,1622,1634,1699,1719,1742,1753,1932,1938,1944,1949,1955,1968,1973,1979,1984,1989,1995,2000,2006,2011,2017,2022,2028],{"type":22,"tag":31,"props":926,"children":927},{},[928],{"type":28,"value":929},"This will be a continuation of the discussion about how data flows in Django + Nuxt applications, looking specifically at session authentication.",{"type":22,"tag":31,"props":931,"children":932},{},[933],{"type":28,"value":934},"Here's a GitLab repo that where you can find the source code and other diagrams related to this project:",{"type":22,"tag":31,"props":936,"children":937},{},[938],{"type":22,"tag":54,"props":939,"children":942},{"href":940,"rel":941},"https://gitlab.com/briancaffey/django-nuxt-starter",[58],[943],{"type":28,"value":940},{"type":22,"tag":31,"props":945,"children":946},{},[947],{"type":28,"value":948},"This diagram focuses on the interactions between:",{"type":22,"tag":31,"props":950,"children":951},{},[952],{"type":28,"value":953},"I. The browser",{"type":22,"tag":31,"props":955,"children":956},{},[957],{"type":28,"value":958},"II. The Nuxt server (Node process)",{"type":22,"tag":31,"props":960,"children":961},{},[962],{"type":28,"value":963},"III. The Django backend API server (gunicorn process)",{"type":22,"tag":42,"props":965,"children":966},{"id":44},[967],{"type":28,"value":47},{"type":22,"tag":31,"props":969,"children":970},{},[971],{"type":28,"value":972},"For illustration purposes, I'm using a simple CRUD application that has two models: Users and (blog) Posts. Users can log in with email and password credentials and create, read, update and delete blog posts (CRUD). Currently I'm only doing the R (read) of CRUD: listing and viewing blog posts. Creating, updating and delete will be added later. For now, users must be logged in to see posts.",{"type":22,"tag":31,"props":974,"children":975},{},[976],{"type":28,"value":977},"I'm still learning a lot about Nuxt and how it can be used with Django and Django REST Framework. This project is an effort at documenting my learning process, learning in public and learning from mistakes, so any feedback or guidance on what I have written here would be highly appreciated!",{"type":22,"tag":42,"props":979,"children":981},{"id":980},"why-nuxt",[982],{"type":28,"value":983},"Why Nuxt?",{"type":22,"tag":31,"props":985,"children":986},{},[987],{"type":28,"value":988},"Using Nuxt (with Server Side Rendering, or SSR) is one of many ways to use Vue.js with Django. Vue is a progressive framework, which means that it can be gradually adopted into a project--you don't have to go all-in on the framework or rewrite the application from scratch to fit with how Vue works.",{"type":22,"tag":124,"props":990,"children":992},{"id":991},"different-ways-to-use-vue-with-django",[993],{"type":28,"value":994},"Different ways to use Vue with Django",{"type":22,"tag":31,"props":996,"children":997},{},[998],{"type":28,"value":999},"In terms of Django, here are some ways that you can use Vue:",{"type":22,"tag":1001,"props":1002,"children":1003},"ul",{},[1004,1009,1014,1019],{"type":22,"tag":135,"props":1005,"children":1006},{},[1007],{"type":28,"value":1008},"Vue as a jQuery replacement for adding basic interactivity in views served by Django templates",{"type":22,"tag":135,"props":1010,"children":1011},{},[1012],{"type":28,"value":1013},"Build a static Vue application and serve it as a set of static assets in a Django project alongside routes that are served by other normal Django templates views.",{"type":22,"tag":135,"props":1015,"children":1016},{},[1017],{"type":28,"value":1018},"Build a Vue SPA which consumes a Django API (usually built with Django REST Framework or similar), and serve it over a content delivery network (CDN).",{"type":22,"tag":135,"props":1020,"children":1021},{},[1022],{"type":28,"value":1023},"Use Vue to build an Electron desktop app that uses Django as an API",{"type":22,"tag":31,"props":1025,"children":1026},{},[1027],{"type":28,"value":1028},"In these scenarios, Vue is served as either static assets (such as in the case of serving a SPA over a CDN), or Vue code is included in an HTML response from a server (where the view library, not your application, is served over a CDN), similar to how jQuery is used.",{"type":22,"tag":124,"props":1030,"children":1032},{"id":1031},"different-ways-to-use-nuxt",[1033],{"type":28,"value":1034},"Different ways to use Nuxt",{"type":22,"tag":31,"props":1036,"children":1037},{},[1038],{"type":28,"value":1039},"Nuxt is a Framework that can be used in a few different ways, I'll briefly discus three ways in which Nuxt can be used. Common to all three of these ways of using Nuxt is the directory structure. No matter how you use Nuxt, it provides a great way to organize Vue code.",{"type":22,"tag":131,"props":1041,"children":1042},{},[1043,1056,1061],{"type":22,"tag":135,"props":1044,"children":1045},{},[1046,1048,1055],{"type":28,"value":1047},"Static mode: this mode allows you to write Vue code which is built into a static HTML, and then that HTML is deployed to a CDN or webserver like NGINX. The developer (or CI/CD process) runs a command to generate HTML files for each page in the application, and these pages are served as-is when accessed by a user. I recently migrated my personal blog from Jekyll to Nuxt with full-static mode. Check it out at (",{"type":22,"tag":54,"props":1049,"children":1052},{"href":1050,"rel":1051},"https://briancaffey.github.io",[58],[1053],{"type":28,"value":1054},"briancaffey.github.io",{"type":28,"value":75},{"type":22,"tag":135,"props":1057,"children":1058},{},[1059],{"type":28,"value":1060},"SPA mode: This is similar to what you might use if you started a Vue project with Vue CLI. The project is also generated as in Static Mode, but what is generated is primarily Javascript code that is executed on the browser.",{"type":22,"tag":135,"props":1062,"children":1063},{},[1064,1066,1072,1074,1079,1081,1087],{"type":28,"value":1065},"SSR mode: Server Side Rendering is the mode that I'll be focusing on here. Unlike the other ways of using Vue that have already been discussed, this mode involves a Node.js server that will handle our requests. For example, a web request for ",{"type":22,"tag":141,"props":1067,"children":1069},{"className":1068},[],[1070],{"type":28,"value":1071},"/posts",{"type":28,"value":1073}," is sent to our Nuxt Server (a Node.js server process) and Node.js is responsible for returning HTML that contains all of the blog Posts that we want to show (or a paginated selection of all blog posts, which is how my example blog app is built). So the Nuxt app has to make a request to our Django API server before returning fully rendered HTML page for the ",{"type":22,"tag":141,"props":1075,"children":1077},{"className":1076},[],[1078],{"type":28,"value":1071},{"type":28,"value":1080}," page. The user then gets the page from Nuxt, reads all of the blog posts and then decides to check out the blog posts on the second page of posts. When the user clicks on page 2, we request the second page of data from our Django API directly, not from Nuxt. The user then sees a short loading animation followed by the second page of blog posts that are loaded in using AJAX (usually with ",{"type":22,"tag":141,"props":1082,"children":1084},{"className":1083},[],[1085],{"type":28,"value":1086},"fetch",{"type":28,"value":1088}," or axios).",{"type":22,"tag":124,"props":1090,"children":1092},{"id":1091},"nuxt-benefits",[1093],{"type":28,"value":1094},"Nuxt Benefits",{"type":22,"tag":31,"props":1096,"children":1097},{},[1098],{"type":28,"value":1099},"The main reason for using Nuxt is to render the first page loads on the server, returning a complete HTML response that can be beneficial for SEO, social sharing, and other scenarios where you need control over how a website's pages are delivered (specifically, the initial request made to the server).",{"type":22,"tag":31,"props":1101,"children":1102},{},[1103],{"type":28,"value":1104},"This type of control is not possible for applications that serve Vue over CDN since they can only request backend API data once the JS client has been requested from a CDN.",{"type":22,"tag":124,"props":1106,"children":1108},{"id":1107},"nuxt-downsides-and-tradeoffs",[1109],{"type":28,"value":1110},"Nuxt Downsides and Tradeoffs",{"type":22,"tag":31,"props":1112,"children":1113},{},[1114],{"type":28,"value":1115},"Using Nuxt for SSR introduces quite a bit of complexity in both the application deployment and our Vue code. The backend API won't have to change at all when moving to Nuxt from a static Vue SPA.",{"type":22,"tag":31,"props":1117,"children":1118},{},[1119],{"type":28,"value":1120},"Django alone is capable of returning fully generated, SEO-optimized HTML for each request, but applications built with Vue and Django templates may be difficult to work on as the project grows larger and larger. The Django/DRF + Nuxt approach may be more appropriate for projects with dedicated backend and frontend teams.",{"type":22,"tag":31,"props":1122,"children":1123},{},[1124],{"type":28,"value":1125},"One other potential downside is added latency because of the \"double request\". If the Nuxt server and the Django server are on the same machine, then this latency will probably be a non-issue.",{"type":22,"tag":42,"props":1127,"children":1128},{"id":78},[1129],{"type":28,"value":81},{"type":22,"tag":31,"props":1131,"children":1132},{},[1133],{"type":22,"tag":107,"props":1134,"children":1137},{"alt":1135,"src":1136},"Nuxt Django Auth","/static/django_nuxt_auth.png",[],{"type":22,"tag":31,"props":1139,"children":1140},{},[1141],{"type":28,"value":1142},"This diagram looks at session authentication with a focus on the browser, the Nuxt server and the Django server. It looks at two simple user stories, ordered from top to bottom in the diagram.",{"type":22,"tag":31,"props":1144,"children":1145},{},[1146,1148,1153,1155,1160],{"type":28,"value":1147},"I. An existing application user visits the site in a new browser, navigates to the Login page, logs in with credentials and then visits a protected page: ",{"type":22,"tag":141,"props":1149,"children":1151},{"className":1150},[],[1152],{"type":28,"value":1071},{"type":28,"value":1154},".\nII. The user closes the browser and then comes back directly to the ",{"type":22,"tag":141,"props":1156,"children":1158},{"className":1157},[],[1159],{"type":28,"value":1071},{"type":28,"value":1161}," page.",{"type":22,"tag":31,"props":1163,"children":1164},{},[1165],{"type":28,"value":1166},"These two user stories sound simple, but they touch on a lot of the features of Nuxt that make it powerful, and complicated at first (for Vue users). These include:",{"type":22,"tag":1001,"props":1168,"children":1169},{},[1170,1179,1188,1193],{"type":22,"tag":135,"props":1171,"children":1172},{},[1173],{"type":22,"tag":141,"props":1174,"children":1176},{"className":1175},[],[1177],{"type":28,"value":1178},"asyncData",{"type":22,"tag":135,"props":1180,"children":1181},{},[1182],{"type":22,"tag":141,"props":1183,"children":1185},{"className":1184},[],[1186],{"type":28,"value":1187},"nuxtServerInit",{"type":22,"tag":135,"props":1189,"children":1190},{},[1191],{"type":28,"value":1192},"Vuex on the client and server",{"type":22,"tag":135,"props":1194,"children":1195},{},[1196],{"type":28,"value":1197},"Custom plugin for axios",{"type":22,"tag":31,"props":1199,"children":1200},{},[1201],{"type":28,"value":1202},"Some important parts of Nuxt that this diagram does not (yet) touch on are:",{"type":22,"tag":1001,"props":1204,"children":1205},{},[1206,1211,1223],{"type":22,"tag":135,"props":1207,"children":1208},{},[1209],{"type":28,"value":1210},"Nuxt auth module (I don't know if this is relevant for my use case)",{"type":22,"tag":135,"props":1212,"children":1213},{},[1214,1216,1221],{"type":28,"value":1215},"Nuxt fetch property (different from the ",{"type":22,"tag":141,"props":1217,"children":1219},{"className":1218},[],[1220],{"type":28,"value":1086},{"type":28,"value":1222}," web API)",{"type":22,"tag":135,"props":1224,"children":1225},{},[1226],{"type":28,"value":1227},"Nuxt middleware (I'm also not sure if this would be helpful for anything I am doing in this example project)",{"type":22,"tag":124,"props":1229,"children":1231},{"id":1230},"user-story-i-a-user-tries-to-open-posts-is-redirected-to-login-logs-in-then-navigate-to-posts-and-sees-blog-posts",[1232,1234,1239,1241,1247,1249,1254],{"type":28,"value":1233},"User story I.: A user tries to open ",{"type":22,"tag":141,"props":1235,"children":1237},{"className":1236},[],[1238],{"type":28,"value":1071},{"type":28,"value":1240},", is redirected to ",{"type":22,"tag":141,"props":1242,"children":1244},{"className":1243},[],[1245],{"type":28,"value":1246},"/login",{"type":28,"value":1248},", logs in, then navigate to ",{"type":22,"tag":141,"props":1250,"children":1252},{"className":1251},[],[1253],{"type":28,"value":1071},{"type":28,"value":1255}," and sees blog posts",{"type":22,"tag":131,"props":1257,"children":1258},{},[1259,1272,1301,1333,1352,1357,1362,1403,1408],{"type":22,"tag":135,"props":1260,"children":1261},{},[1262,1264,1270],{"type":28,"value":1263},"User navigates to ",{"type":22,"tag":141,"props":1265,"children":1267},{"className":1266},[],[1268],{"type":28,"value":1269},"http://domain.com/",{"type":28,"value":1271},". This request is handled by the Nuxt server.",{"type":22,"tag":135,"props":1273,"children":1274},{},[1275,1277,1282,1284,1291,1293,1299],{"type":28,"value":1276},"The ",{"type":22,"tag":141,"props":1278,"children":1280},{"className":1279},[],[1281],{"type":28,"value":1187},{"type":28,"value":1283}," action is called (",{"type":22,"tag":54,"props":1285,"children":1288},{"href":1286,"rel":1287},"https://nuxtjs.org/docs/2.x/directory-structure/store#the-nuxtserverinit-action",[58],[1289],{"type":28,"value":1290},"read more on nuxtServerInit",{"type":28,"value":1292},"). This is a special Vuex action that, if defined in ",{"type":22,"tag":141,"props":1294,"children":1296},{"className":1295},[],[1297],{"type":28,"value":1298},"store/index.js",{"type":28,"value":1300},", will be called once per request to the Nuxt Server (when a page is initially visited or refreshed in the browser).",{"type":22,"tag":135,"props":1302,"children":1303},{},[1304,1309,1311,1316,1318,1324,1326,1331],{"type":22,"tag":141,"props":1305,"children":1307},{"className":1306},[],[1308],{"type":28,"value":1187},{"type":28,"value":1310}," dispatches a Vuex action in the ",{"type":22,"tag":141,"props":1312,"children":1314},{"className":1313},[],[1315],{"type":28,"value":652},{"type":28,"value":1317}," module called ",{"type":22,"tag":141,"props":1319,"children":1321},{"className":1320},[],[1322],{"type":28,"value":1323},"fetchData",{"type":28,"value":1325},". This action makes an GET request to ",{"type":22,"tag":141,"props":1327,"children":1329},{"className":1328},[],[1330],{"type":28,"value":613},{"type":28,"value":1332}," in the Django application.",{"type":22,"tag":135,"props":1334,"children":1335},{},[1336,1338,1343,1345,1351],{"type":28,"value":1337},"An API call to ",{"type":22,"tag":141,"props":1339,"children":1341},{"className":1340},[],[1342],{"type":28,"value":613},{"type":28,"value":1344}," is made to the Django backend directly from the Nuxt container over the docker network (",{"type":22,"tag":141,"props":1346,"children":1348},{"className":1347},[],[1349],{"type":28,"value":1350},"backend:8000",{"type":28,"value":161},{"type":22,"tag":135,"props":1353,"children":1354},{},[1355],{"type":28,"value":1356},"If the request is made by an anonymous user (no user is logged in), a 403 response is returned to the Nuxt server and no account data is set in the Vuex store (on the server).",{"type":22,"tag":135,"props":1358,"children":1359},{},[1360],{"type":28,"value":1361},"Since the user is currently not logged in, the request returns a 403 response.",{"type":22,"tag":135,"props":1363,"children":1364},{},[1365,1371,1373,1378,1380,1386,1388,1393,1395,1401],{"type":22,"tag":141,"props":1366,"children":1368},{"className":1367},[],[1369],{"type":28,"value":1370},"authMiddleware",{"type":28,"value":1372}," (on the Nuxt server) redirects the user to ",{"type":22,"tag":141,"props":1374,"children":1376},{"className":1375},[],[1377],{"type":28,"value":1246},{"type":28,"value":1379}," based on the value of ",{"type":22,"tag":141,"props":1381,"children":1383},{"className":1382},[],[1384],{"type":28,"value":1385},"authenticated",{"type":28,"value":1387}," in the Vuex store. The Original request for ",{"type":22,"tag":141,"props":1389,"children":1391},{"className":1390},[],[1392],{"type":28,"value":1071},{"type":28,"value":1394}," returns a fully-rendered ",{"type":22,"tag":141,"props":1396,"children":1398},{"className":1397},[],[1399],{"type":28,"value":1400},"/login/",{"type":28,"value":1402}," page instead.",{"type":22,"tag":135,"props":1404,"children":1405},{},[1406],{"type":28,"value":1407},"User is now on the Login page",{"type":22,"tag":135,"props":1409,"children":1410},{},[1411,1412,1418,1420,1426],{"type":28,"value":1276},{"type":22,"tag":141,"props":1413,"children":1415},{"className":1414},[],[1416],{"type":28,"value":1417},"created",{"type":28,"value":1419}," hook for the Login page makes a GET request to ",{"type":22,"tag":141,"props":1421,"children":1423},{"className":1422},[],[1424],{"type":28,"value":1425},"/api/login-set-cookie/",{"type":28,"value":102},{"type":22,"tag":31,"props":1428,"children":1429},{},[1430,1432,1438],{"type":28,"value":1431},"10, 11. This endpoint calls a simple view that is decorated with ",{"type":22,"tag":141,"props":1433,"children":1435},{"className":1434},[],[1436],{"type":28,"value":1437},"@ensure_csrf_token",{"type":28,"value":102},{"type":22,"tag":131,"props":1440,"children":1442},{"start":1441},12,[1443,1456,1492],{"type":22,"tag":135,"props":1444,"children":1445},{},[1446,1448,1454],{"type":28,"value":1447},"When the response returns to the browser, the ",{"type":22,"tag":141,"props":1449,"children":1451},{"className":1450},[],[1452],{"type":28,"value":1453},"csrftoken",{"type":28,"value":1455}," is set in the browser.",{"type":22,"tag":135,"props":1457,"children":1458},{},[1459,1461,1467,1469,1474,1476,1482,1484,1490],{"type":28,"value":1460},"The $apiCall function is defined in ",{"type":22,"tag":141,"props":1462,"children":1464},{"className":1463},[],[1465],{"type":28,"value":1466},"plugins/axios.js",{"type":28,"value":1468},", and it adds the ",{"type":22,"tag":141,"props":1470,"children":1472},{"className":1471},[],[1473],{"type":28,"value":1453},{"type":28,"value":1475}," cookie to the ",{"type":22,"tag":141,"props":1477,"children":1479},{"className":1478},[],[1480],{"type":28,"value":1481},"X-CSRFToken",{"type":28,"value":1483}," header of API requests. This is important for POST request where the CSRF token is required. When the user fills out their email and password in the login form, the $apiCall function is called with ",{"type":22,"tag":141,"props":1485,"children":1487},{"className":1486},[],[1488],{"type":28,"value":1489},"/api/login/",{"type":28,"value":1491}," and the email/password as credentials.",{"type":22,"tag":135,"props":1493,"children":1494},{},[1495,1497,1502],{"type":28,"value":1496},"The email and password are sent as data in the POST request to ",{"type":22,"tag":141,"props":1498,"children":1500},{"className":1499},[],[1501],{"type":28,"value":1489},{"type":28,"value":102},{"type":22,"tag":31,"props":1504,"children":1505},{},[1506,1508,1513,1515,1521,1523,1529,1531,1537,1538,1544,1546,1551,1553,1558,1560,1566],{"type":28,"value":1507},"15, 16. The ",{"type":22,"tag":141,"props":1509,"children":1511},{"className":1510},[],[1512],{"type":28,"value":1489},{"type":28,"value":1514}," URL calls the ",{"type":22,"tag":141,"props":1516,"children":1518},{"className":1517},[],[1519],{"type":28,"value":1520},"login_view",{"type":28,"value":1522}," which makes use of two functions from ",{"type":22,"tag":141,"props":1524,"children":1526},{"className":1525},[],[1527],{"type":28,"value":1528},"django.contrib.auth",{"type":28,"value":1530},": ",{"type":22,"tag":141,"props":1532,"children":1534},{"className":1533},[],[1535],{"type":28,"value":1536},"authenticate",{"type":28,"value":572},{"type":22,"tag":141,"props":1539,"children":1541},{"className":1540},[],[1542],{"type":28,"value":1543},"login",{"type":28,"value":1545},". ",{"type":22,"tag":141,"props":1547,"children":1549},{"className":1548},[],[1550],{"type":28,"value":1536},{"type":28,"value":1552}," gets a user from the provided email/password, and the ",{"type":22,"tag":141,"props":1554,"children":1556},{"className":1555},[],[1557],{"type":28,"value":1543},{"type":28,"value":1559}," function sets an HttpOnly ",{"type":22,"tag":141,"props":1561,"children":1563},{"className":1562},[],[1564],{"type":28,"value":1565},"sessionid",{"type":28,"value":1567}," session cookie on the response.",{"type":22,"tag":131,"props":1569,"children":1571},{"start":1570},17,[1572,1591,1611],{"type":22,"tag":135,"props":1573,"children":1574},{},[1575,1577,1582,1584,1589],{"type":28,"value":1576},"The HttpOnly ",{"type":22,"tag":141,"props":1578,"children":1580},{"className":1579},[],[1581],{"type":28,"value":1565},{"type":28,"value":1583}," cookie is automatically set on the browser when the ",{"type":22,"tag":141,"props":1585,"children":1587},{"className":1586},[],[1588],{"type":28,"value":1489},{"type":28,"value":1590}," request returns successfully.",{"type":22,"tag":135,"props":1592,"children":1593},{},[1594,1596,1601,1603,1609],{"type":28,"value":1595},"When this ",{"type":22,"tag":141,"props":1597,"children":1599},{"className":1598},[],[1600],{"type":28,"value":1489},{"type":28,"value":1602}," request returns successfully, a value in the ",{"type":22,"tag":141,"props":1604,"children":1606},{"className":1605},[],[1607],{"type":28,"value":1608},"auth",{"type":28,"value":1610}," Vuex module is set to keep track of the current user's logged in state.",{"type":22,"tag":135,"props":1612,"children":1613},{},[1614,1616,1621],{"type":28,"value":1615},"Next, a GET request is made to ",{"type":22,"tag":141,"props":1617,"children":1619},{"className":1618},[],[1620],{"type":28,"value":613},{"type":28,"value":102},{"type":22,"tag":31,"props":1623,"children":1624},{},[1625,1627,1632],{"type":28,"value":1626},"20, 21. Since the ",{"type":22,"tag":141,"props":1628,"children":1630},{"className":1629},[],[1631],{"type":28,"value":1565},{"type":28,"value":1633}," cookie is set and sent along with the request automatically, this request will succeed.",{"type":22,"tag":131,"props":1635,"children":1637},{"start":1636},22,[1638,1656,1668,1687],{"type":22,"tag":135,"props":1639,"children":1640},{},[1641,1642,1647,1649,1654],{"type":28,"value":600},{"type":22,"tag":141,"props":1643,"children":1645},{"className":1644},[],[1646],{"type":28,"value":613},{"type":28,"value":1648}," request returns, the user's account information is saved to the ",{"type":22,"tag":141,"props":1650,"children":1652},{"className":1651},[],[1653],{"type":28,"value":652},{"type":28,"value":1655}," Vuex module. At this point, the client may redirect automatically to the home page, or user account page, dashboard, etc.",{"type":22,"tag":135,"props":1657,"children":1658},{},[1659,1661,1666],{"type":28,"value":1660},"Now logged in, the user navigates (again via Vue router) to ",{"type":22,"tag":141,"props":1662,"children":1664},{"className":1663},[],[1665],{"type":28,"value":1071},{"type":28,"value":1667},", a page that shows a paginated view of all blog posts.",{"type":22,"tag":135,"props":1669,"children":1670},{},[1671,1673,1678,1680,1686],{"type":28,"value":1672},"This page has an ",{"type":22,"tag":141,"props":1674,"children":1676},{"className":1675},[],[1677],{"type":28,"value":1178},{"type":28,"value":1679}," method which is called when the page component is created and it dispatches a Vuex action ",{"type":22,"tag":141,"props":1681,"children":1683},{"className":1682},[],[1684],{"type":28,"value":1685},"posts/fetchData",{"type":28,"value":102},{"type":22,"tag":135,"props":1688,"children":1689},{},[1690,1692,1698],{"type":28,"value":1691},"This Vuex action makes a GET request to ",{"type":22,"tag":141,"props":1693,"children":1695},{"className":1694},[],[1696],{"type":28,"value":1697},"/api/posts/",{"type":28,"value":102},{"type":22,"tag":31,"props":1700,"children":1701},{},[1702,1704,1709,1711,1717],{"type":28,"value":1703},"26, 27. ",{"type":22,"tag":141,"props":1705,"children":1707},{"className":1706},[],[1708],{"type":28,"value":1697},{"type":28,"value":1710}," uses a ",{"type":22,"tag":141,"props":1712,"children":1714},{"className":1713},[],[1715],{"type":28,"value":1716},"ModelViewSet",{"type":28,"value":1718}," and returns a paginated list of blog posts",{"type":22,"tag":131,"props":1720,"children":1722},{"start":1721},28,[1723],{"type":22,"tag":135,"props":1724,"children":1725},{},[1726,1727,1732,1734,1740],{"type":28,"value":600},{"type":22,"tag":141,"props":1728,"children":1730},{"className":1729},[],[1731],{"type":28,"value":1697},{"type":28,"value":1733}," request returns successfully, the blog post data is saved to the ",{"type":22,"tag":141,"props":1735,"children":1737},{"className":1736},[],[1738],{"type":28,"value":1739},"blog",{"type":28,"value":1741}," Vuex module.",{"type":22,"tag":124,"props":1743,"children":1745},{"id":1744},"user-story-ii-logged-in-user-opens-new-browser-window-and-revisits-posts",[1746,1748],{"type":28,"value":1747},"User story II.: Logged in user opens new browser window and revisits ",{"type":22,"tag":141,"props":1749,"children":1751},{"className":1750},[],[1752],{"type":28,"value":1071},{"type":22,"tag":131,"props":1754,"children":1756},{"start":1755},29,[1757,1768,1778,1796,1828,1846,1861,1877,1903,1927],{"type":22,"tag":135,"props":1758,"children":1759},{},[1760,1762,1767],{"type":28,"value":1761},"The user closes their browser and then opens a new browser window and navigates to ",{"type":22,"tag":141,"props":1763,"children":1765},{"className":1764},[],[1766],{"type":28,"value":1071},{"type":28,"value":102},{"type":22,"tag":135,"props":1769,"children":1770},{},[1771,1776],{"type":22,"tag":141,"props":1772,"children":1774},{"className":1773},[],[1775],{"type":28,"value":1187},{"type":28,"value":1777}," is called as usual,",{"type":22,"tag":135,"props":1779,"children":1780},{},[1781,1782,1788,1790,1795],{"type":28,"value":1276},{"type":22,"tag":141,"props":1783,"children":1785},{"className":1784},[],[1786],{"type":28,"value":1787},"user/fetchData",{"type":28,"value":1789}," action is called. This action makes a GET request to ",{"type":22,"tag":141,"props":1791,"children":1793},{"className":1792},[],[1794],{"type":28,"value":613},{"type":28,"value":102},{"type":22,"tag":135,"props":1797,"children":1798},{},[1799,1800,1805,1807,1812,1814,1819,1821,1826],{"type":28,"value":1276},{"type":22,"tag":141,"props":1801,"children":1803},{"className":1802},[],[1804],{"type":28,"value":613},{"type":28,"value":1806}," request returns successfully. The ",{"type":22,"tag":141,"props":1808,"children":1810},{"className":1809},[],[1811],{"type":28,"value":1565},{"type":28,"value":1813}," cookie is passed along from the browser to the API request that is made from the Nuxt server to the backend API (",{"type":22,"tag":141,"props":1815,"children":1817},{"className":1816},[],[1818],{"type":28,"value":613},{"type":28,"value":1820},").  User account data is then set on the Vuex ",{"type":22,"tag":141,"props":1822,"children":1824},{"className":1823},[],[1825],{"type":28,"value":652},{"type":28,"value":1827}," module.",{"type":22,"tag":135,"props":1829,"children":1830},{},[1831,1832,1837,1839,1844],{"type":28,"value":1276},{"type":22,"tag":141,"props":1833,"children":1835},{"className":1834},[],[1836],{"type":28,"value":1178},{"type":28,"value":1838}," method for the ",{"type":22,"tag":141,"props":1840,"children":1842},{"className":1841},[],[1843],{"type":28,"value":1071},{"type":28,"value":1845}," pages is called.",{"type":22,"tag":135,"props":1847,"children":1848},{},[1849,1854,1856],{"type":22,"tag":141,"props":1850,"children":1852},{"className":1851},[],[1853],{"type":28,"value":1178},{"type":28,"value":1855}," dispatches a Vuex action ",{"type":22,"tag":141,"props":1857,"children":1859},{"className":1858},[],[1860],{"type":28,"value":1685},{"type":22,"tag":135,"props":1862,"children":1863},{},[1864,1869,1871,1876],{"type":22,"tag":141,"props":1865,"children":1867},{"className":1866},[],[1868],{"type":28,"value":1685},{"type":28,"value":1870}," makes an API request to ",{"type":22,"tag":141,"props":1872,"children":1874},{"className":1873},[],[1875],{"type":28,"value":1697},{"type":28,"value":102},{"type":22,"tag":135,"props":1878,"children":1879},{},[1880,1881,1886,1888,1893,1895,1901],{"type":28,"value":1276},{"type":22,"tag":141,"props":1882,"children":1884},{"className":1883},[],[1885],{"type":28,"value":1697},{"type":28,"value":1887}," request is handled by a ",{"type":22,"tag":141,"props":1889,"children":1891},{"className":1890},[],[1892],{"type":28,"value":1716},{"type":28,"value":1894}," for the ",{"type":22,"tag":141,"props":1896,"children":1898},{"className":1897},[],[1899],{"type":28,"value":1900},"Post",{"type":28,"value":1902}," model that gets blog posts and then sets them to the Vuex store (on the server) when the request returns a response (to the Nuxt server).",{"type":22,"tag":135,"props":1904,"children":1905},{},[1906,1908,1913,1914,1919,1920,1925],{"type":28,"value":1907},"Once the async data fetching is compete (",{"type":22,"tag":141,"props":1909,"children":1911},{"className":1910},[],[1912],{"type":28,"value":1187},{"type":28,"value":572},{"type":22,"tag":141,"props":1915,"children":1917},{"className":1916},[],[1918],{"type":28,"value":1178},{"type":28,"value":1894},{"type":22,"tag":141,"props":1921,"children":1923},{"className":1922},[],[1924],{"type":28,"value":1071},{"type":28,"value":1926}," page), the page HTML is rendered using the Vuex store data stored on the server. The Vuex data is sent back with the rendered HTML (I think this is how it works).",{"type":22,"tag":135,"props":1928,"children":1929},{},[1930],{"type":28,"value":1931},"Finally, the user sees the list of blog posts. The page is loaded \"at once\"; there is no waiting for data to load after loading the page initially.",{"type":22,"tag":42,"props":1933,"children":1935},{"id":1934},"discussion",[1936],{"type":28,"value":1937},"Discussion",{"type":22,"tag":124,"props":1939,"children":1941},{"id":1940},"complexity",[1942],{"type":28,"value":1943},"Complexity",{"type":22,"tag":31,"props":1945,"children":1946},{},[1947],{"type":28,"value":1948},"Is this authentication process overly complicated? When I make these diagrams, I try to make simple concept as detailed as possible, but there are a lot of distinct actions being taken in many different parts of the application and getting them all into one diagram was tricky.",{"type":22,"tag":124,"props":1950,"children":1952},{"id":1951},"httponly-session-cookies",[1953],{"type":28,"value":1954},"HttpOnly Session Cookies",{"type":22,"tag":31,"props":1956,"children":1957},{},[1958,1960,1966],{"type":28,"value":1959},"Session authentication is the officially recommended way to do authentication with Django REST Framework for clients that run in the browser. However, there seem to be lots of people using JWT with DRF and Javascript clients that run in the browser. The main argument against doing this is that the JWT must be stored in a Javascript-accessible store (localStorage or Cookies) so it can be passed with each request. Many people are also interested in trying to store JWT for authentication in HttpOnly cookies to harden client-side security. I'm very curious to know if anyone is actually doing this, and what the implementation looks like. While ",{"type":22,"tag":141,"props":1961,"children":1963},{"className":1962},[],[1964],{"type":28,"value":1965},"djangorestframework_simplejwt",{"type":28,"value":1967}," doesn't support HttpOnly, there seems to be lots of interest in doing this. I think it might be possible with a special middleware, so let me know if anyone is interested in proof-of-concept/diagram for that.",{"type":22,"tag":31,"props":1969,"children":1970},{},[1971],{"type":28,"value":1972},"Some use cases for JWT and other token authentication methods with DRF might include native mobile apps or Desktop apps. For most cases, I think session authentication with Django's built in session cookies for DRF authentication is the best option. JWTs also have no clear solution for logging out, which may be important for some security considerations. The concept of stateless authentication is interesting, but for most use cases I would argue that it is not worth doing. Let me know if anyone has thoughts on this, I'm curious to see what everyone thinks.",{"type":22,"tag":124,"props":1974,"children":1976},{"id":1975},"next-steps",[1977],{"type":28,"value":1978},"Next Steps",{"type":22,"tag":31,"props":1980,"children":1981},{},[1982],{"type":28,"value":1983},"My next steps for this project/repo are to deploy this to a production environment as soon as I have time to do so. My local setup has been working well, and I think it should work well for a simple DigitalOcean docker swarm deployment like I have done with other Django + Vue projects.",{"type":22,"tag":31,"props":1985,"children":1986},{},[1987],{"type":28,"value":1988},"I also want to add the create, update and delete functionality for posts, improve error handling with API calls, add form validation, and maybe write some tests with Jest.",{"type":22,"tag":42,"props":1990,"children":1992},{"id":1991},"questions",[1993],{"type":28,"value":1994},"Questions",{"type":22,"tag":31,"props":1996,"children":1997},{},[1998],{"type":28,"value":1999},"Here are some questions and areas that I still need to investigate.",{"type":22,"tag":124,"props":2001,"children":2003},{"id":2002},"nuxt-composition-api",[2004],{"type":28,"value":2005},"Nuxt Composition API",{"type":22,"tag":31,"props":2007,"children":2008},{},[2009],{"type":28,"value":2010},"I have seen that there is a Composition API module for Nuxt. I have only just now started looking at Composition API examples and documentation for \"vanilla\" Vue, but I have heard that the Nuxt Composition API module has some additional features specifically for use with Nuxt, so I'm curious to learn what these are.",{"type":22,"tag":124,"props":2012,"children":2014},{"id":2013},"nuxt-v3-and-vue-3",[2015],{"type":28,"value":2016},"Nuxt v3 and Vue 3",{"type":22,"tag":31,"props":2018,"children":2019},{},[2020],{"type":28,"value":2021},"Nuxt looks like it has plans to support Vue 3, so I am interested to learn more about Vue 3 as it is adopted by Vue frameworks such as Nuxt and Quasar.",{"type":22,"tag":124,"props":2023,"children":2025},{"id":2024},"nuxts-fetch-method-server-middleware-nuxt-auth-module",[2026],{"type":28,"value":2027},"Nuxt's fetch method, server middleware, Nuxt auth module",{"type":22,"tag":31,"props":2029,"children":2030},{},[2031],{"type":28,"value":2032},"I think I am using server middleware correctly, it can be improved by redirecting to the initial requested route after successful login. I'm not sure if I should use the Nuxt auth module in this application, I have read that it doesn't support HttpOnly cookie use cases, but I could be wrong.",{"title":8,"searchDepth":896,"depth":896,"links":2034},[2035,2036,2042,2048,2053],{"id":44,"depth":896,"text":47},{"id":980,"depth":896,"text":983,"children":2037},[2038,2039,2040,2041],{"id":991,"depth":903,"text":994},{"id":1031,"depth":903,"text":1034},{"id":1091,"depth":903,"text":1094},{"id":1107,"depth":903,"text":1110},{"id":78,"depth":896,"text":81,"children":2043},[2044,2046],{"id":1230,"depth":903,"text":2045},"User story I.: A user tries to open /posts, is redirected to /login, logs in, then navigate to /posts and sees blog posts",{"id":1744,"depth":903,"text":2047},"User story II.: Logged in user opens new browser window and revisits /posts",{"id":1934,"depth":896,"text":1937,"children":2049},[2050,2051,2052],{"id":1940,"depth":903,"text":1943},{"id":1951,"depth":903,"text":1954},{"id":1975,"depth":903,"text":1978},{"id":1991,"depth":896,"text":1994,"children":2054},[2055,2056,2057],{"id":2002,"depth":903,"text":2005},{"id":2013,"depth":903,"text":2016},{"id":2024,"depth":903,"text":2027},"content:2021:01:01:session-authentication-with-django-django-rest-framework-and-nuxt.md","2021/01/01/session-authentication-with-django-django-rest-framework-and-nuxt.md","2021/01/01/session-authentication-with-django-django-rest-framework-and-nuxt",{"_path":2062,"_dir":2063,"_draft":7,"_partial":7,"_locale":8,"title":2064,"description":2065,"date":2066,"image":2067,"tags":2068,"body":2070,"_type":907,"_id":2662,"_source":909,"_file":2663,"_stem":2664,"_extension":912},"/2020/12/27/building-web-applications-with-django-drf-and-nuxt","27","Building web applications with Django, Django REST Framework, Nuxt.js and docker","This article documents my progress combining the Django web framework with Nuxt JS to build applications that have both great SEO and a smooth SPA user experience.","2020-12-27T00:00:00.000Z","/static/django_nuxt_app_diagram.png",[14,15,921,16,2069],"docker",{"type":19,"children":2071,"toc":2655},[2072,2077,2107,2117,2122,2128,2134,2139,2166,2171,2176,2181,2193,2198,2203,2209,2244,2264,2571,2575,2580,2585,2591,2622,2627,2632,2645,2650],{"type":22,"tag":31,"props":2073,"children":2074},{},[2075],{"type":28,"value":2076},"Over the holidays between lots of big meals and many naps, I tried to tackle one more goal of mine before this year come to an end: building an application with Django and Nuxt.js.",{"type":22,"tag":31,"props":2078,"children":2079},{},[2080,2082,2088,2090,2096,2098,2105],{"type":28,"value":2081},"This year I rebuilt my personal blog (",{"type":22,"tag":54,"props":2083,"children":2086},{"href":2084,"rel":2085},"https://briancaffey.github.io/",[58],[2087],{"type":28,"value":1054},{"type":28,"value":2089},") with Nuxt.js, the ",{"type":22,"tag":141,"props":2091,"children":2093},{"className":2092},[],[2094],{"type":28,"value":2095},"@nuxt/content",{"type":28,"value":2097}," headless git-based CMS and TailwindCSS. It is statically generated with Nuxt's full-static mode and has been really enjoyable to work with. I have also learned a lot more about SEO and how Nuxt helps improve Vue applications' SEO. I have also been working a lot with Django and Vue.js applications where Django serves as an API to a Vue.js SPA. This combination of technologies works well for a lot of use cases, but it falls short in SEO. Nuxt also provides a great way to organize large Vue.js projects which I have been finding very helpful. For these reasons, combining Django and Nuxt has been something that I have wanted to try for a while, so this article will share some of my experiences in recent efforts to build with these two frameworks. I took ",{"type":22,"tag":54,"props":2099,"children":2102},{"href":2100,"rel":2101},"https://gitlab.com/briancaffey/django-nuxt-starter/-/blob/develop/STEP_BY_STEP.md",[58],[2103],{"type":28,"value":2104},"detailed notes of each step of the project setup",{"type":28,"value":2106}," starting from an empty repository, and I put together a diagram of my understanding of how data flows in the application.",{"type":22,"tag":31,"props":2108,"children":2109},{},[2110,2112],{"type":28,"value":2111},"Here's the link to the project repository that I'll be referencing: ",{"type":22,"tag":54,"props":2113,"children":2115},{"href":940,"rel":2114},[58],[2116],{"type":28,"value":940},{"type":22,"tag":31,"props":2118,"children":2119},{},[2120],{"type":28,"value":2121},"This article will focus on explaining the project through the diagram shown below. I added two types of labels: letters and numbers. The letters will introduce each component of the application and its role in the application as a whole. The numbers summarize how data flows through the different components in my sample blog application.",{"type":22,"tag":31,"props":2123,"children":2124},{},[2125],{"type":22,"tag":107,"props":2126,"children":2127},{"alt":81,"src":2067},[],{"type":22,"tag":42,"props":2129,"children":2131},{"id":2130},"diagram-components",[2132],{"type":28,"value":2133},"Diagram components",{"type":22,"tag":31,"props":2135,"children":2136},{},[2137],{"type":28,"value":2138},"A. Your computer - Possibly also your development machine which is running the application in docker containers with docker-compose.",{"type":22,"tag":31,"props":2140,"children":2141},{},[2142,2144,2150,2151,2157,2158,2164],{"type":28,"value":2143},"B. NGINX - This is the \"front desk\" of the application that does a few different things. It is the first component that web requests come to. It serves as a reverse proxy which does path-based routing. It looks at the URL request and determines where to send it. For example: ",{"type":22,"tag":141,"props":2145,"children":2147},{"className":2146},[],[2148],{"type":28,"value":2149},"/api/posts/1",{"type":28,"value":564},{"type":22,"tag":141,"props":2152,"children":2154},{"className":2153},[],[2155],{"type":28,"value":2156},"/dashboard/",{"type":28,"value":564},{"type":22,"tag":141,"props":2159,"children":2161},{"className":2160},[],[2162],{"type":28,"value":2163},"/admin/",{"type":28,"value":2165}," could all be routed differently depending on the NGINX configuration file. We will look at this again in the next section. This  component, like most of the other things in the diagram, runs in a container. NGINX can also serve static files for our Django app and do TLS termination to make our application available over a secure HTTPS connection.",{"type":22,"tag":31,"props":2167,"children":2168},{},[2169],{"type":28,"value":2170},"C. Nuxt.JS server - The first \"S\" in SSR (server side rendering). It is a Node.js process that renders HTML from Vue components that we define in our Nuxt app, as well as data fetched from other servers/APIs before returning HTML back to the client.",{"type":22,"tag":31,"props":2172,"children":2173},{},[2174],{"type":28,"value":2175},"D. Django server - This runs the WSGI application with a gunicorn process in a container.",{"type":22,"tag":31,"props":2177,"children":2178},{},[2179],{"type":28,"value":2180},"E. Django REST Framework is a Django package the facilitates the creation of REST API endpoints. This is part of the Django application, it primarily takes care of data serialization (which can be thought of as translating between JSON and Python objects that represent rows of data in our Postgres database)",{"type":22,"tag":31,"props":2182,"children":2183},{},[2184,2186,2192],{"type":28,"value":2185},"F. This is the Postgres database, also a containerized service. It is on the same docker network as the Django/gunicorn application, so the Django application can connect to the Postgres database using the hostname ",{"type":22,"tag":141,"props":2187,"children":2189},{"className":2188},[],[2190],{"type":28,"value":2191},"postgres",{"type":28,"value":102},{"type":22,"tag":31,"props":2194,"children":2195},{},[2196],{"type":28,"value":2197},"G. docker-compose is used to orchestrate the docker network, containers and volumes that make up the application.",{"type":22,"tag":31,"props":2199,"children":2200},{},[2201],{"type":28,"value":2202},"H. This box represents the docker network that allows for easy networking between services. We will come back to this the significance of this in the next section.",{"type":22,"tag":42,"props":2204,"children":2206},{"id":2205},"data-flow-in-the-application",[2207],{"type":28,"value":2208},"Data flow in the application",{"type":22,"tag":31,"props":2210,"children":2211},{},[2212,2214,2220,2222,2227,2229,2235,2237,2243],{"type":28,"value":2213},"The simple application I have built for this demonstration is a blog. There is only a list view and a detail view for simple blog post model with three fields: title, body and created date. For the list view, the frontend (Nuxt) route is ",{"type":22,"tag":141,"props":2215,"children":2217},{"className":2216},[],[2218],{"type":28,"value":2219},"/posts/",{"type":28,"value":2221}," and the backend route is ",{"type":22,"tag":141,"props":2223,"children":2225},{"className":2224},[],[2226],{"type":28,"value":1697},{"type":28,"value":2228}," for the detail view the frontend route is ",{"type":22,"tag":141,"props":2230,"children":2232},{"className":2231},[],[2233],{"type":28,"value":2234},"/posts/_id",{"type":28,"value":2236}," and the API route is ",{"type":22,"tag":141,"props":2238,"children":2240},{"className":2239},[],[2241],{"type":28,"value":2242},"/api/posts/_id/",{"type":28,"value":102},{"type":22,"tag":31,"props":2245,"children":2246},{},[2247,2249,2255,2257,2263],{"type":28,"value":2248},"The data flow shown here will walk through what happens when a user visits ",{"type":22,"tag":141,"props":2250,"children":2252},{"className":2251},[],[2253],{"type":28,"value":2254},"http://localhost/posts/",{"type":28,"value":2256},", and then show what happens when the user clicks on one of the listed posts to see the detail view of the post (",{"type":22,"tag":141,"props":2258,"children":2260},{"className":2259},[],[2261],{"type":28,"value":2262},"http://localhost/posts/2",{"type":28,"value":75},{"type":22,"tag":131,"props":2265,"children":2267},{"start":2266},0,[2268,2279,2291,2312,2324,2375,2403,2422,2427,2432,2443,2535],{"type":22,"tag":135,"props":2269,"children":2270},{},[2271,2277],{"type":22,"tag":141,"props":2272,"children":2274},{"className":2273},[],[2275],{"type":28,"value":2276},"docker-compose up",{"type":28,"value":2278}," is one command that is used to start the entire application in local development. This exposes the NGINX process on port 80 of the host machine (your laptop).",{"type":22,"tag":135,"props":2280,"children":2281},{},[2282,2284,2289],{"type":28,"value":2283},"When the application is running on your machine and you navigate to ",{"type":22,"tag":141,"props":2285,"children":2287},{"className":2286},[],[2288],{"type":28,"value":2254},{"type":28,"value":2290},", the request is first handled by NGINX.",{"type":22,"tag":135,"props":2292,"children":2293},{},[2294,2296,2302,2304,2310],{"type":28,"value":2295},"As we mentioned earlier, NGINX's path-based routing sends all requests that do not start with ",{"type":22,"tag":141,"props":2297,"children":2299},{"className":2298},[],[2300],{"type":28,"value":2301},"/api/*",{"type":28,"value":2303}," or ",{"type":22,"tag":141,"props":2305,"children":2307},{"className":2306},[],[2308],{"type":28,"value":2309},"/admin/*",{"type":28,"value":2311}," to the Nuxt.js server.",{"type":22,"tag":135,"props":2313,"children":2314},{},[2315,2317,2322],{"type":28,"value":2316},"When the request gets to the Nuxt server, the Nuxt lifecycle methods start. The important one that I'm using so far is ",{"type":22,"tag":141,"props":2318,"children":2320},{"className":2319},[],[2321],{"type":28,"value":1178},{"type":28,"value":2323},". This property is used to request data that will be used in the rendering of our HTML response.",{"type":22,"tag":135,"props":2325,"children":2326},{},[2327,2329,2334,2336,2341,2343,2349,2351,2357,2359,2365,2367,2373],{"type":28,"value":2328},"Inside of ",{"type":22,"tag":141,"props":2330,"children":2332},{"className":2331},[],[2333],{"type":28,"value":1178},{"type":28,"value":2335},", the application uses axios to make a request to ",{"type":22,"tag":141,"props":2337,"children":2339},{"className":2338},[],[2340],{"type":28,"value":1697},{"type":28,"value":2342}," (for example). In ",{"type":22,"tag":141,"props":2344,"children":2346},{"className":2345},[],[2347],{"type":28,"value":2348},"nuxt.config.js",{"type":28,"value":2350},", the ",{"type":22,"tag":141,"props":2352,"children":2354},{"className":2353},[],[2355],{"type":28,"value":2356},"privateRuntimeConfig",{"type":28,"value":2358}," sets a baseUrl value for axios to ",{"type":22,"tag":141,"props":2360,"children":2362},{"className":2361},[],[2363],{"type":28,"value":2364},"http://backend:8000",{"type":28,"value":2366},". Since the Nuxt server is on the same docker network as the backend Django/gunicorn server, the Nuxt server is able to resolve ",{"type":22,"tag":141,"props":2368,"children":2370},{"className":2369},[],[2371],{"type":28,"value":2372},"http://backend",{"type":28,"value":2374}," to the address of the backend server.",{"type":22,"tag":135,"props":2376,"children":2377},{},[2378,2380,2386,2388,2394,2396,2402],{"type":28,"value":2379},"Django processes this endpoint, using the ",{"type":22,"tag":141,"props":2381,"children":2383},{"className":2382},[],[2384],{"type":28,"value":2385},"PostViewSet",{"type":28,"value":2387},", the views of which have been added to ",{"type":22,"tag":141,"props":2389,"children":2391},{"className":2390},[],[2392],{"type":28,"value":2393},"urlpatterns",{"type":28,"value":2395}," in ",{"type":22,"tag":141,"props":2397,"children":2399},{"className":2398},[],[2400],{"type":28,"value":2401},"blog/urls.py",{"type":28,"value":102},{"type":22,"tag":135,"props":2404,"children":2405},{},[2406,2407,2412,2414,2420],{"type":28,"value":1276},{"type":22,"tag":141,"props":2408,"children":2410},{"className":2409},[],[2411],{"type":28,"value":2385},{"type":28,"value":2413}," makes a database query on the ",{"type":22,"tag":141,"props":2415,"children":2417},{"className":2416},[],[2418],{"type":28,"value":2419},"posts",{"type":28,"value":2421}," which is used to serialize the data.",{"type":22,"tag":135,"props":2423,"children":2424},{},[2425],{"type":28,"value":2426},"The Django server returns the response to the original axios call.",{"type":22,"tag":135,"props":2428,"children":2429},{},[2430],{"type":28,"value":2431},"The data returned from Django is used to render the HTML response.",{"type":22,"tag":135,"props":2433,"children":2434},{},[2435,2437,2442],{"type":28,"value":2436},"The HTML response from the Nuxt server is sent back to the browser that originally navigated to ",{"type":22,"tag":141,"props":2438,"children":2440},{"className":2439},[],[2441],{"type":28,"value":2254},{"type":28,"value":102},{"type":22,"tag":135,"props":2444,"children":2445},{},[2446,2448,2454,2456,2462,2464,2470,2472,2478,2480,2486,2488,2493,2495,2501,2503,2509,2511,2517,2519,2525,2527,2533],{"type":28,"value":2447},"The user is presented with page that lists blog posts. Each blog posts lists to a detail view. When a blog post (let's say the post with ",{"type":22,"tag":141,"props":2449,"children":2451},{"className":2450},[],[2452],{"type":28,"value":2453},"id",{"type":28,"value":2455}," of 2) is clicked on, a request for ",{"type":22,"tag":141,"props":2457,"children":2459},{"className":2458},[],[2460],{"type":28,"value":2461},"/posts/2/",{"type":28,"value":2463}," is made directly to the Django backend. The ",{"type":22,"tag":141,"props":2465,"children":2467},{"className":2466},[],[2468],{"type":28,"value":2469},"browserBaseURL",{"type":28,"value":2471}," value in the ",{"type":22,"tag":141,"props":2473,"children":2475},{"className":2474},[],[2476],{"type":28,"value":2477},"axios",{"type":28,"value":2479}," settings under ",{"type":22,"tag":141,"props":2481,"children":2483},{"className":2482},[],[2484],{"type":28,"value":2485},"publicRuntimeConfig",{"type":28,"value":2487}," defined in ",{"type":22,"tag":141,"props":2489,"children":2491},{"className":2490},[],[2492],{"type":28,"value":2348},{"type":28,"value":2494}," is set to ",{"type":22,"tag":141,"props":2496,"children":2498},{"className":2497},[],[2499],{"type":28,"value":2500},"http://localhost",{"type":28,"value":2502},", so the request is made to ",{"type":22,"tag":141,"props":2504,"children":2506},{"className":2505},[],[2507],{"type":28,"value":2508},"http://localhost/api/posts/2/",{"type":28,"value":2510},". To clarify, since we are making this request using axios in the browser, we can't make a request to ",{"type":22,"tag":141,"props":2512,"children":2514},{"className":2513},[],[2515],{"type":28,"value":2516},"http://backend:8000/api/posts/2/",{"type":28,"value":2518}," like we did in step 4 (",{"type":22,"tag":141,"props":2520,"children":2522},{"className":2521},[],[2523],{"type":28,"value":2524},"http://backend:8000/api/posts/",{"type":28,"value":2526},") because the browser doesn't know how to resolve the ",{"type":22,"tag":141,"props":2528,"children":2530},{"className":2529},[],[2531],{"type":28,"value":2532},"backend",{"type":28,"value":2534}," hostname.",{"type":22,"tag":135,"props":2536,"children":2537},{},[2538,2540,2545,2547,2553,2555,2561,2563,2569],{"type":28,"value":2539},"This request to ",{"type":22,"tag":141,"props":2541,"children":2543},{"className":2542},[],[2544],{"type":28,"value":2508},{"type":28,"value":2546},", like all others, first goes to NGINX which sends it to the backend since the path starts with ",{"type":22,"tag":141,"props":2548,"children":2550},{"className":2549},[],[2551],{"type":28,"value":2552},"/api/",{"type":28,"value":2554},". At this point the application functions like a regular Vue SPA making axios calls to a backend service. This is because we used ",{"type":22,"tag":141,"props":2556,"children":2558},{"className":2557},[],[2559],{"type":28,"value":2560},"\u003Cnuxt-link>",{"type":28,"value":2562}," for the posts listed in the posts list view. If we used ",{"type":22,"tag":141,"props":2564,"children":2566},{"className":2565},[],[2567],{"type":28,"value":2568},"\u003Ca>",{"type":28,"value":2570}," tags, we would go through the same process as in step 4 where the HTML is rendered on the Nuxt server and sent back to the browser all at once.",{"type":22,"tag":42,"props":2572,"children":2573},{"id":1934},[2574],{"type":28,"value":1937},{"type":22,"tag":31,"props":2576,"children":2577},{},[2578],{"type":28,"value":2579},"My main takeaway is that using Nuxt and Django together can give you good SEO and a great SPA experience at the same time. Using Django alone, or Django with traditional non SSR Vue makes this harder to do. Being a progressive framework, there are a lot of ways to use Vue with any other backend. From what I have heard, most people use Vue via CDN similar to how jQuery was and still is delivered for use in the browser.",{"type":22,"tag":31,"props":2581,"children":2582},{},[2583],{"type":28,"value":2584},"There is additional work in setting up 3 servers for a single application (Nuxt, Django and NGINX), but the tradeoff is that I am (at least I feel) very productive writing frontend logic in Vue and backend logic with DRF. I have never liked working with Django templates and I used to know a lot more about them than I do now.",{"type":22,"tag":42,"props":2586,"children":2588},{"id":2587},"spotlight-for-baserowios-awesome-open-source-django-nuxt-application",[2589],{"type":28,"value":2590},"Spotlight for baserow.io's awesome open-source Django Nuxt application",{"type":22,"tag":31,"props":2592,"children":2593},{},[2594,2596,2603,2605,2612,2614,2620],{"type":28,"value":2595},"Lastly I want to mention that there are some great resources in the ",{"type":22,"tag":54,"props":2597,"children":2600},{"href":2598,"rel":2599},"https://github.com/nuxt-community/awesome-nuxt",[58],[2601],{"type":28,"value":2602},"nuxt-community/awesome-nuxt",{"type":28,"value":2604}," GitHub repo. There's one project that really stood out to me when I searched for \"django\" projects in the README, and that project is called ",{"type":22,"tag":54,"props":2606,"children":2609},{"href":2607,"rel":2608},"https://baserow.io/",[58],[2610],{"type":28,"value":2611},"baserow.io",{"type":28,"value":2613}," (repo: ",{"type":22,"tag":54,"props":2615,"children":2618},{"href":2616,"rel":2617},"https://gitlab.com/bramw/baserow",[58],[2619],{"type":28,"value":2616},{"type":28,"value":2621},"). Please check this repo our if you are interested in Django and Nuxt. This company is building an open source no-code database, similar to Airtable which I have worked with before.",{"type":22,"tag":31,"props":2623,"children":2624},{},[2625],{"type":28,"value":2626},"Their entire product is open source and I have been very impressed with what I have seen. Please go give that project a star or consider becoming a Github sponsor if you are interested. I'm not affiliated with that project in any way, but I'll be referencing how they use Django and Nuxt to build their application.",{"type":22,"tag":42,"props":2628,"children":2629},{"id":1975},[2630],{"type":28,"value":2631},"Next steps",{"type":22,"tag":31,"props":2633,"children":2634},{},[2635,2637,2643],{"type":28,"value":2636},"There is a still a lot I have to learn about Nuxt. I'm still very new to the Framework and this is my first time using Nuxt's SSR mode. Nuxt seems to have its own way of doing lots of things that I'm used to doing in Vue. There is a very supportive community and well-maintained official packages to help with lots of things, like the ",{"type":22,"tag":141,"props":2638,"children":2640},{"className":2639},[],[2641],{"type":28,"value":2642},"@nuxt/axios",{"type":28,"value":2644}," package that I'm using.",{"type":22,"tag":31,"props":2646,"children":2647},{},[2648],{"type":28,"value":2649},"My next step is to keep expanding my blog application. One thing I didn't mention is authentication. I plan on using Django session authentication for authenticating request to Django. It seems that it already works correctly in my application (logging in through Django admin and then navigating to Nuxt routes that make Django requests are working only when I'm logged in.) I think I have an idea about how Vuex, authentication and route guards will work together, but I haven't gotten there yet. If anyone has some good reference projects or recommendations on how to expand on what I already have, please let me know!",{"type":22,"tag":31,"props":2651,"children":2652},{},[2653],{"type":28,"value":2654},"I know that Nuxt has an auth module, so I need to see if that is relevant for what I want need in my application. I also need to continue reading the Nuxt documentation. I still don't know what I don't know about Nuxt and the plugins and modules that it makes available. I also noticed that Nuxt has it's own version of the Vue 3 Composition API, something I am just now starting to learn more about, so that it another area I'll need to dig into eventually.",{"title":8,"searchDepth":896,"depth":896,"links":2656},[2657,2658,2659,2660,2661],{"id":2130,"depth":896,"text":2133},{"id":2205,"depth":896,"text":2208},{"id":1934,"depth":896,"text":1937},{"id":2587,"depth":896,"text":2590},{"id":1975,"depth":896,"text":2631},"content:2020:12:27:building-web-applications-with-django-drf-and-nuxt.md","2020/12/27/building-web-applications-with-django-drf-and-nuxt.md","2020/12/27/building-web-applications-with-django-drf-and-nuxt",1748368257879]