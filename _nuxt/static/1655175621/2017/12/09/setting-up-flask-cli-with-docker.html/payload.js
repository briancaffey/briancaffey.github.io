__NUXT_JSONP__("/2017/12/09/setting-up-flask-cli-with-docker.html", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP){return {data:[{article:{slug:"setting-up-flask-cli-with-docker.html",layout:"post",title:"Setting up a Flask project with Flask CLI and Docker",date:"2017-12-09T00:00:00.000Z",comments:true,image:X,tags:[Y,P],toc:[{id:Z,depth:G,text:_},{id:$,depth:G,text:aa},{id:ab,depth:G,text:ac},{id:ad,depth:G,text:ae},{id:P,depth:2,text:af}],body:{type:"root",children:[{type:b,tag:h,props:{},children:[{type:b,tag:"img",props:{alt:"png",src:X},children:[]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"⚠️ This article is under contruction ⚠️"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"I've recently been working on an awesome tutorial from "},{type:b,tag:x,props:{href:"https:\u002F\u002Ftestdriven.io",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:a,value:"testdriven.io"}]},{type:a,value:" that covers flask, react and docker. The beginning of the project covers how to setup a basic flask app using "},{type:b,tag:f,props:{},children:[{type:a,value:ag}]},{type:a,value:ah},{type:b,tag:f,props:{},children:[{type:a,value:ag}]},{type:a,value:" is a deprecated tool and the tutorial recommends using "},{type:b,tag:f,props:{},children:[{type:a,value:ai}]},{type:a,value:". I have fumbled with this the first time I tried to set it up and while I was able to get it working, I couldn't get it working inside of docker. In this article I'll detail the setup of my flask project with "},{type:b,tag:f,props:{},children:[{type:a,value:ai}]},{type:a,value:v}]},{type:a,value:e},{type:b,tag:aj,props:{},children:[{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"One of the nice new features in Flask 0.11 is the built-in integration of the click command line interface. This enables a wide range of new features for the Flask ecosystem and your own applications."}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"OK. Let's set up a basic flask app:"}]},{type:a,value:e},{type:b,tag:H,props:{id:Z},children:[{type:b,tag:x,props:{href:"#directories",ariaHidden:A,tabIndex:B},children:[{type:b,tag:c,props:{className:[C,D]},children:[]}]},{type:a,value:_}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ mkdir test-flask && cd test-flask\n $ mkdir users-service && cd users-service\n $ mkdir project\n\n"}]}]}]},{type:a,value:e},{type:b,tag:H,props:{id:$},children:[{type:b,tag:x,props:{href:"#virtual-environment",ariaHidden:A,tabIndex:B},children:[{type:b,tag:c,props:{className:[C,D]},children:[]}]},{type:a,value:aa}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ virtualenv -p python3 env\nRunning virtualenv with interpreter \u002Fhome\u002Fbrian\u002Fanaconda3\u002Fbin\u002Fpython3\nUsing base prefix '\u002Fhome\u002Fbrian\u002Fanaconda3'\nNew python executable in \u002Fhome\u002Fbrian\u002FDocuments\u002Fflask\u002Ftest-flask\u002Fusers-service\u002Fenv\u002Fbin\u002Fpython3\nAlso creating executable in \u002Fhome\u002Fbrian\u002FDocuments\u002Fflask\u002Ftest-flask\u002Fusers-service\u002Fenv\u002Fbin\u002Fpython\nInstalling setuptools, pip, wheel...done.\n"}]}]}]},{type:a,value:e},{type:b,tag:H,props:{id:ab},children:[{type:b,tag:x,props:{href:"#activate-virtual-environment",ariaHidden:A,tabIndex:B},children:[{type:b,tag:c,props:{className:[C,D]},children:[]}]},{type:a,value:ac}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ source env\u002Fbin\u002Factivate\n(env) $\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"We will come back to the "},{type:b,tag:f,props:{},children:[{type:a,value:"activate"}]},{type:a,value:" script and add some environment variables to the bottom if it so we have them accessible when we activate the virtual environment."}]},{type:a,value:e},{type:b,tag:H,props:{id:ad},children:[{type:b,tag:x,props:{href:"#install-flask-in-the-virtual-environment",ariaHidden:A,tabIndex:B},children:[{type:b,tag:c,props:{className:[C,D]},children:[]}]},{type:a,value:ae}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ pip install flask==0.12.2\nCollecting flask==0.12.2\n  Using cached Flask-0.12.2-py2.py3-none-any.whl\nCollecting itsdangerous\u003E=0.21 (from flask==0.12.2)\nCollecting Werkzeug\u003E=0.7 (from flask==0.12.2)\n  Using cached Werkzeug-0.13-py2.py3-none-any.whl\nCollecting click\u003E=2.0 (from flask==0.12.2)\n  Using cached click-6.7-py2.py3-none-any.whl\nCollecting Jinja2\u003E=2.4 (from flask==0.12.2)\n  Using cached Jinja2-2.10-py2.py3-none-any.whl\nCollecting MarkupSafe\u003E=0.23 (from Jinja2\u003E=2.4-\u003Eflask==0.12.2)\nInstalling collected packages: itsdangerous, Werkzeug, click, MarkupSafe, Jinja2, flask\nSuccessfully installed Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.13 click-6.7 flask-0.12.2 itsdangerous-0.24\n(env) $\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"At this point we are ready to create our flask app."}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Here's a note about the CLI:"}]},{type:a,value:e},{type:b,tag:aj,props:{},children:[{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"For the "},{type:b,tag:"strong",props:{},children:[{type:a,value:Y}]},{type:a,value:" script to work, an application needs to be discovered. This is achieved by exporting the "},{type:b,tag:f,props:{},children:[{type:a,value:ak}]},{type:a,value:" environment variable. It can be either set to an import path or to a filename of a Python module that contains a Flask application."}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Let's add an "},{type:b,tag:f,props:{},children:[{type:a,value:al}]},{type:a,value:" file inside the "},{type:b,tag:f,props:{},children:[{type:a,value:Q}]},{type:a,value:am}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:E,props:{},children:[{type:a,value:al}]}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,I]},children:[{type:b,tag:f,props:{},children:[{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"from"}]},{type:a,value:" flask "},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"import"}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:F}]},{type:a,value:" jsonify\n\napp "},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:a,value:an},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:q}]},{type:a,value:"__name__"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:o}]},{type:a,value:"\n\n"},{type:b,tag:c,props:{className:[d,ao,ap,g]},children:[{type:a,value:aq},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:v}]},{type:a,value:ar}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:as}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:F}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:au}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:av}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:o}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ax}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,ay]},children:[{type:a,value:az}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:p}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aA}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aC}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:aD}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:aE}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:F}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:aF}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:aG}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aH}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:o}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"And now let's add an environment variable to tell the Flask CLI where our app is located:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ export FLASK_APP=\u002Fhome\u002Fbrian\u002FDocuments\u002Fflask\u002Ftest-flask\u002Fusers-service\u002Fproject\u002Fapp.py\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"OK, now let's try to run "},{type:b,tag:f,props:{},children:[{type:a,value:R}]},{type:a,value:" and navigate to "},{type:b,tag:f,props:{},children:[{type:a,value:S}]},{type:a,value:" and see what happens:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ flask run\n * Serving Flask app \"app\"\n * Running on http:\u002F\u002F127.0.0.1:5000\u002F (Press CTRL+C to quit)\n127.0.0.1 - - [09\u002FDec\u002F2017 19:20:14] \"GET \u002Fusers\u002Fping HTTP\u002F1.1\" 200 -\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Great! We see our "},{type:b,tag:f,props:{},children:[{type:a,value:"pong!"}]},{type:a,value:" message returned in the browser. Next, let's configure our settings:"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:E,props:{},children:[{type:a,value:"project\u002Fconfig.py"}]}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,I]},children:[{type:b,tag:f,props:{},children:[{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:J}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:p}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,M,n]},children:[{type:a,value:"\"\"\"Base configuration\"\"\""}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:T}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:T}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:J}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:"DevelopmentConfig"}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:q}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:p}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,M,n]},children:[{type:a,value:"\"\"\"Development configuration\"\"\""}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:O}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:J}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:"TestingConfig"}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:q}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:p}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,M,n]},children:[{type:a,value:"\"\"\"Testing configuration\"\"\""}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:O}]},{type:a,value:aI},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:O}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:J}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:q}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:p}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,M,n]},children:[{type:a,value:"\"\"\"Production configuration\"\"\""}]},{type:a,value:N},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:T}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"And now we can add the following line right below where we define "},{type:b,tag:f,props:{},children:[{type:a,value:"app = Flask(__name__)"}]},{type:a,value:p}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,I]},children:[{type:b,tag:f,props:{},children:[{type:a,value:aJ},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:v}]},{type:a,value:aK},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:v}]},{type:a,value:"from_object"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:"'project.config.DevelopmentConfig'"}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:o}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"When we run "},{type:b,tag:f,props:{},children:[{type:a,value:R}]},{type:a,value:", we get a long error message including:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"Debugged import:\n\n- 'project' not found.\n\nOriginal exception:\n\nImportStringError: import_string() failed for 'project.config'. Possible reasons are:\n\n- missing __init__.py in a package;\n- package or module path not included in sys.path;\n- duplicated package or module name taking precedence in sys.path;\n- missing module, class, function or variable;\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Let's try to add "},{type:b,tag:f,props:{},children:[{type:a,value:aL}]},{type:a,value:" to our "},{type:b,tag:f,props:{},children:[{type:a,value:Q}]},{type:a,value:" folder."}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Once we do this, we are able to run the app successfully, but we don't see any special message about Debug mode being on:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ flask run\n * Serving Flask app \"project.app\"\n * Running on http:\u002F\u002F127.0.0.1:5000\u002F (Press CTRL+C to quit)\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"The documentation mentions that we can turn on Debug mode with:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:aM}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"We can check the debug mode by printing "},{type:b,tag:f,props:{},children:[{type:a,value:"app.config"}]},{type:a,value:" in the "},{type:b,tag:f,props:{},children:[{type:a,value:"ping_pong()"}]},{type:a,value:" function that is returned when we hit "},{type:b,tag:f,props:{},children:[{type:a,value:S}]},{type:a,value:p}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,I]},children:[{type:b,tag:f,props:{},children:[{type:b,tag:c,props:{className:[d,ao,ap,g]},children:[{type:a,value:aq},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:v}]},{type:a,value:ar}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:as}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:F}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:au}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:av}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:o}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ax}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,ay]},children:[{type:a,value:az}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:p}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"print"}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:q}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:v}]},{type:a,value:aK},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:o}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aA}]},{type:a,value:aB},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aC}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:aD}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:aE}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:F}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:aF}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:aG}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aH}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:o}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Here's what we see in the terminal:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"\u003CConfig {'DEBUG': True, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': None, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'USE_X_SENDFILE': False, 'LOGGER_NAME': 'project.app', 'LOGGER_HANDLER_POLICY': 'always', 'SERVER_NAME': None, 'APPLICATION_ROOT': None, 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'TRAP_BAD_REQUEST_ERRORS': False, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': True, 'JSONIFY_MIMETYPE': 'application\u002Fjson', 'TEMPLATES_AUTO_RELOAD': None}\u003E\n127.0.0.1 - - [09\u002FDec\u002F2017 19:42:46] \"GET \u002Fusers\u002Fping HTTP\u002F1.1\" 200 -\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Just to be sure this is working correctly, let's try another config setting, "},{type:b,tag:f,props:{},children:[{type:a,value:U}]},{type:a,value:p}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"\u003CConfig {'DEBUG': False, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': None, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'USE_X_SENDFILE': False, 'LOGGER_NAME': 'project.app', 'LOGGER_HANDLER_POLICY': 'always', 'SERVER_NAME': None, 'APPLICATION_ROOT': None, 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'TRAP_BAD_REQUEST_ERRORS': False, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': True, 'JSONIFY_MIMETYPE': 'application\u002Fjson', 'TEMPLATES_AUTO_RELOAD': None}\u003E\n127.0.0.1 - - [09\u002FDec\u002F2017 19:45:29] \"GET \u002Fusers\u002Fping HTTP\u002F1.1\" 200 -\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"OK, so far so good! I think that "},{type:b,tag:f,props:{},children:[{type:a,value:"FLASK_DEBUG"}]},{type:a,value:" may give us some additional information in the terminal."}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Let's run:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:aM}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"and run our app in "},{type:b,tag:f,props:{},children:[{type:a,value:U}]},{type:a,value:" mode:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ flask run\n * Serving Flask app \"project.app\"\n * Forcing debug mode on\n * Running on http:\u002F\u002F127.0.0.1:5000\u002F (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 775-946-486\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"and when we hit "},{type:b,tag:f,props:{},children:[{type:a,value:S}]},{type:a,value:" we get:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"\u003CConfig {'DEBUG': True, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': None, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'USE_X_SENDFILE': False, 'LOGGER_NAME': 'project.app', 'LOGGER_HANDLER_POLICY': 'always', 'SERVER_NAME': None, 'APPLICATION_ROOT': None, 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'TRAP_BAD_REQUEST_ERRORS': False, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': True, 'JSONIFY_MIMETYPE': 'application\u002Fjson', 'TEMPLATES_AUTO_RELOAD': None}\u003E\n127.0.0.1 - - [09\u002FDec\u002F2017 19:51:17] \"GET \u002Fusers\u002Fping HTTP\u002F1.1\" 200 -\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Here we can see that "},{type:b,tag:f,props:{},children:[{type:a,value:"DEBUG"}]},{type:a,value:" is "},{type:b,tag:f,props:{},children:[{type:a,value:O}]},{type:a,value:", which was forced when we set "},{type:b,tag:f,props:{},children:[{type:a,value:"FLASK_DEBUG=1"}]},{type:a,value:v}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"For clarity, let's review the directory structure of our project:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ tree project\u002F\nproject\u002F\n├── app.py\n├── config.py\n└── __init__.py\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:f,props:{},children:[{type:a,value:aL}]},{type:a,value:" is just an empty file at this point, but in the testdriven.io tutorial it is the file that contains our app."}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"OK, we have a very simple flask app that we can control with the flask cli. Let's get ready to dockerize this simple project."}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"We need a "},{type:b,tag:f,props:{},children:[{type:a,value:V}]},{type:a,value:" file. So far we just have flask. We want to place this file on the same level as our "},{type:b,tag:f,props:{},children:[{type:a,value:Q}]},{type:a,value:am}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:E,props:{},children:[{type:a,value:V}]}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"Flask==0.12.1\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"And we can add a "},{type:b,tag:f,props:{},children:[{type:a,value:aN}]},{type:a,value:" file as well at the same level:"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:E,props:{},children:[{type:a,value:aN}]}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"__pycache__\nenv\n"}]}]}]},{type:a,value:e},{type:b,tag:"h2",props:{id:P},children:[{type:b,tag:x,props:{href:"#docker",ariaHidden:A,tabIndex:B},children:[{type:b,tag:c,props:{className:[C,D]},children:[]}]},{type:a,value:af}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Here are the versions of docker applications I have installed:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ docker -v && docker-compose -v && docker-machine -v\nDocker version 17.10.0-ce, build f4ffd2511c\ndocker-compose version 1.17.1, build unknown\ndocker-machine version 0.13.0, build HEAD\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Currently I don't have any docker machines, images or containers. Here is the status of the docker service:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ systemctl status docker\n● docker.service - Docker Application Container Engine\n   Loaded: loaded (\u002Fusr\u002Flib\u002Fsystemd\u002Fsystem\u002Fdocker.service; enabled; vendor preset: disabled)\n   Active: active (running) since Fri 2017-12-08 19:13:09 EST; 24h ago\n     Docs: https:\u002F\u002Fdocs.docker.com\n Main PID: 5486 (dockerd)\n    Tasks: 26 (limit: 4915)\n   CGroup: \u002Fsystem.slice\u002Fdocker.service\n           ├─5486 \u002Fusr\u002Fbin\u002Fdockerd -g \u002Fhome\u002Fbrian\u002Fdocker -H fd:\u002F\u002F\n           └─5492 docker-containerd -l unix:\u002F\u002F\u002Fvar\u002Frun\u002Fdocker\u002Flibcontainerd\u002Fdocker-containerd.sock --metrics-interval=0 --start-timeout 2m --state-dir \u002Fvar\u002Frun\u002Fdocker\u002Flibcontainerd\u002Fcontainerd --shim docker-containerd-shim --runtime docker-runc\n\nDec 08 19:13:08 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:08.126834430-05:00\" level=warning msg=\"Your kernel does not support cgroup rt period\"\nDec 08 19:13:08 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:08.126850093-05:00\" level=warning msg=\"Your kernel does not support cgroup rt runtime\"\nDec 08 19:13:08 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:08.127216425-05:00\" level=info msg=\"Loading containers: start.\"\nDec 08 19:13:08 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:08.776371797-05:00\" level=info msg=\"Default bridge (docker0) is assigned with an IP address 172.17.0.0\u002F16. Daemon option --bip can be used to set a preferred IP address\"\nDec 08 19:13:09 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:09.013651222-05:00\" level=info msg=\"Loading containers: done.\"\nDec 08 19:13:09 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:09.041318847-05:00\" level=warning msg=\"Not using native diff for overlay2, this may cause degraded performance for building images: kernel has CONFIG_OVERLAY_FS_REDIRECT_DIR enabled\"\nDec 08 19:13:09 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:09.075633462-05:00\" level=info msg=\"Docker daemon\" commit=f4ffd2511c graphdriver(s)=overlay2 version=17.10.0-ce\nDec 08 19:13:09 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:09.076162900-05:00\" level=info msg=\"Daemon has completed initialization\"\nDec 08 19:13:09 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:09.082056339-05:00\" level=info msg=\"API listen on \u002Fvar\u002Frun\u002Fdocker.sock\"\nDec 08 19:13:09 archthinkpad systemd[1]: Started Docker Application Container Engine.\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"OK, docker seems to be working fine. Now we need to create a Docker host and point the docker client at it. What does this mean? From what I understand, we will be running docker containers not on our local machine but in an instance of "},{type:b,tag:f,props:{},children:[{type:a,value:"virtualbox"}]},{type:a,value:" on our local machine. To do this, we will use the "},{type:b,tag:f,props:{},children:[{type:a,value:"docker-machine"}]},{type:a,value:" command:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ docker-machine create -d virtualbox testdriven-dev\nRunning pre-create checks...\nCreating machine...\n(testdriven-dev) Copying \u002Fhome\u002Fbrian\u002F.docker\u002Fmachine\u002Fcache\u002Fboot2docker.iso to \u002Fhome\u002Fbrian\u002F.docker\u002Fmachine\u002Fmachines\u002Ftestdriven-dev\u002Fboot2docker.iso...\n(testdriven-dev) Creating VirtualBox VM...\n(testdriven-dev) Creating SSH key...\n(testdriven-dev) Starting the VM...\n(testdriven-dev) Check network to re-create if needed...\n(testdriven-dev) Waiting for an IP...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with boot2docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\n\nThis machine has been allocated an IP address, but Docker Machine could not reach it successfully.\n\nSSH for the machine should still work, but connecting to exposed ports, such as the Docker daemon port (usually \u003Cip\u003E:2376), may not work properly.\n\nYou may need to add the route manually, or use another related workaround.\n\nThis could be due to a VPN, proxy, or host file configuration issue.\n\nYou also might want to clear any VirtualBox host only interfaces you are not using.\nChecking connection to Docker...\nDocker is up and running!\nTo see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env testdriven-dev\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"We see that "},{type:b,tag:f,props:{},children:[{type:a,value:"Docker is up and running!"}]},{type:a,value:", but notice this line:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"This machine has been allocated an IP address, but Docker Machine could not reach it successfully.\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"This might be a problem. I think that the "},{type:b,tag:f,props:{},children:[{type:a,value:"docker-machine env \u003Cmachine-name\u003E"}]},{type:a,value:" command fixes this:"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"When you run this command you get the following:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ docker-machine env testdriven-dev\nexport DOCKER_TLS_VERIFY=\"1\"\nexport DOCKER_HOST=\"tcp:\u002F\u002F192.168.99.100:2376\"\nexport DOCKER_CERT_PATH=\"\u002Fhome\u002Fbrian\u002F.docker\u002Fmachine\u002Fmachines\u002Ftestdriven-dev\"\nexport DOCKER_MACHINE_NAME=\"testdriven-dev\"\n# Run this command to configure your shell:\n# eval $(docker-machine env testdriven-dev)\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"The result of this command tells us to run `eval $(docker-machine env testdriven-dev):"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"eval \"$(docker-machine env testdriven-dev)\"\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"To clarify, running the above commands puts adds some environment variables:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ env | grep DOCKER\nDOCKER_MACHINE_NAME=testdriven-dev\nDOCKER_CERT_PATH=\u002Fhome\u002Fbrian\u002F.docker\u002Fmachine\u002Fmachines\u002Ftestdriven-dev\nDOCKER_TLS_VERIFY=1\nDOCKER_HOST=tcp:\u002F\u002F192.168.99.100:2376\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Next we need to add a Dockerfile. We will call it "},{type:b,tag:f,props:{},children:[{type:a,value:W}]},{type:a,value:". Let's look at "},{type:b,tag:f,props:{},children:[{type:a,value:W}]},{type:a,value:" from the tutorial and see how we may need to modify it for the way we set up our project:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"FROM python:3.6.3\n\n# set working directory\nRUN mkdir -p \u002Fusr\u002Fsrc\u002Fapp\nWORKDIR \u002Fusr\u002Fsrc\u002Fapp\n\n# add requirements\nADD .\u002Frequirements.txt \u002Fusr\u002Fsrc\u002Fapp\u002Frequirements.txt\n\n# install requirements\nRUN pip install -r requirements.txt\n\n# add app\nADD . \u002Fusr\u002Fsrc\u002Fapp\n\n# run server\nCMD python manage.py runserver -h 0.0.0.0\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"We start by defining a base image with the "},{type:b,tag:f,props:{},children:[{type:a,value:"FROM"}]},{type:a,value:" line which will give us the correct version of python. We then set folders and the current working directory in docker. Next we install flask add the "},{type:b,tag:f,props:{},children:[{type:a,value:V}]},{type:a,value:" file and install flask with the "},{type:b,tag:f,props:{},children:[{type:a,value:"RUN"}]},{type:a,value:" line. We then add the directory (on our local machine) with "},{type:b,tag:f,props:{},children:[{type:a,value:"ADD . \u002Fusr\u002Fsrc\u002Fapp"}]},{type:a,value:v}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"This should all be fine up until the last line where we see a "},{type:b,tag:f,props:{},children:[{type:a,value:"manage.py"}]},{type:a,value:" file. We never created this file since we wish to use the Flask CLI. We could try replicating the process did locally inside our Dockerfile. We need to add the the "},{type:b,tag:f,props:{},children:[{type:a,value:ak}]},{type:a,value:" environment variable, and its value should be the script that has just been added to the docker image. Let's try:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"[...]\n\nENV FLASK_APP \u002Fusr\u002Fsrc\u002Fapp\u002Fproject\u002Fapp.py\n\nCMD flask run\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Next we need a script for "},{type:b,tag:f,props:{},children:[{type:a,value:aO}]},{type:a,value:ah},{type:b,tag:f,props:{},children:[{type:a,value:aO}]},{type:a,value:" is a tool for defining and running multi-container Docker applications. Again, let's look at what was included in the tutorial and then see if we need to make any adjustments:"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:E,props:{},children:[{type:a,value:"docker-compose-dev.yml"}]},{type:a,value:" (this file goes in the root directory, one level up from where "},{type:b,tag:f,props:{},children:[{type:a,value:W}]},{type:a,value:o}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"version: '3.3'\n\nservices:\n\n  users-service:\n    container_name: users-service\n      build:\n        context: .\u002Fusers-service\n        dockerfile: Dockerfile-dev\n      volumes:\n        - '.\u002Fusers-service:\u002Fusr\u002Fsrc\u002Fapp'\n      ports:\n        - 5001:5000\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"OK, this looks good! Let's give it a try. We can run the following command:"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ docker-compose -f docker-compose-dev.yml build\nBuilding users-service\n85b1f47fba49: Pull complete\nba6bd283713a: Pull complete\n817c8cd48a09: Pull complete\n47cc0ed96dc3: Pull complete\n4a36819a59dc: Pull complete\ndb9a0221399f: Pull complete\n7a511a7689b6: Pull complete\n1223757f6914: Pull complete\nDigest: sha256:db9d8546f3ff74e96702abe0a78a0e0454df6ea898de8f124feba81deea416d7\nStatus: Downloaded newer image for python:3.6.3\n ---\u003E 79e1dc9af1c1\nStep 2\u002F8 : RUN mkdir -p \u002Fusr\u002Fsrc\u002Fapp\n ---\u003E Running in 808f6c0497d3\n ---\u003E 8873e8e0d526\nRemoving intermediate container 808f6c0497d3\nStep 3\u002F8 : WORKDIR \u002Fusr\u002Fsrc\u002Fapp\n ---\u003E 76ef8912b4d5\nRemoving intermediate container a3ca419fe9c1\nStep 4\u002F8 : ADD .\u002Frequirements.txt \u002Fusr\u002Fsrc\u002Fapp\u002Frequirements.txt\n ---\u003E eb513314527a\nStep 5\u002F8 : RUN pip install -r requirements.txt\n ---\u003E Running in 1a708ec3b565\nCollecting Flask==0.12.1 (from -r requirements.txt (line 1))\n  Downloading Flask-0.12.1-py2.py3-none-any.whl (82kB)\nCollecting Jinja2\u003E=2.4 (from Flask==0.12.1-\u003E-r requirements.txt (line 1))\n  Downloading Jinja2-2.10-py2.py3-none-any.whl (126kB)\nCollecting click\u003E=2.0 (from Flask==0.12.1-\u003E-r requirements.txt (line 1))\n  Downloading click-6.7-py2.py3-none-any.whl (71kB)\nCollecting Werkzeug\u003E=0.7 (from Flask==0.12.1-\u003E-r requirements.txt (line 1))\n  Downloading Werkzeug-0.13-py2.py3-none-any.whl (311kB)\nCollecting itsdangerous\u003E=0.21 (from Flask==0.12.1-\u003E-r requirements.txt (line 1))\n  Downloading itsdangerous-0.24.tar.gz (46kB)\nCollecting MarkupSafe\u003E=0.23 (from Jinja2\u003E=2.4-\u003EFlask==0.12.1-\u003E-r requirements.txt (line 1))\n  Downloading MarkupSafe-1.0.tar.gz\nBuilding wheels for collected packages: itsdangerous, MarkupSafe\n  Running setup.py bdist_wheel for itsdangerous: started\n  Running setup.py bdist_wheel for itsdangerous: finished with status 'done'\n  Stored in directory: \u002Froot\u002F.cache\u002Fpip\u002Fwheels\u002Ffc\u002Fa8\u002F66\u002F24d655233c757e178d45dea2de22a04c6d92766abfb741129a\n  Running setup.py bdist_wheel for MarkupSafe: started\n  Running setup.py bdist_wheel for MarkupSafe: finished with status 'done'\n  Stored in directory: \u002Froot\u002F.cache\u002Fpip\u002Fwheels\u002F88\u002Fa7\u002F30\u002Fe39a54a87bcbe25308fa3ca64e8ddc75d9b3e5afa21ee32d57\nSuccessfully built itsdangerous MarkupSafe\nInstalling collected packages: MarkupSafe, Jinja2, click, Werkzeug, itsdangerous, Flask\nSuccessfully installed Flask-0.12.1 Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.13 click-6.7 itsdangerous-0.24\n ---\u003E d828a0518114\nRemoving intermediate container 1a708ec3b565\nStep 6\u002F8 : ADD . \u002Fusr\u002Fsrc\u002Fapp\n ---\u003E 8e0efae73a47\nStep 7\u002F8 : ENV FLASK_APP \u002Fusr\u002Fsrc\u002Fapp\u002Fproject\u002Fapp.py\n ---\u003E Running in 959581952d05\n ---\u003E 20aaec61b615\nRemoving intermediate container 959581952d05\nStep 8\u002F8 : CMD flask run\n ---\u003E Running in 4f2fc701ba14\n ---\u003E 1d5b59f3cef2\nRemoving intermediate container 4f2fc701ba14\n\nSuccessfully built 1d5b59f3cef2\nSuccessfully tagged testflask_users-service:latest\n\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"That seemed to work. Next the tutorial says to run "},{type:b,tag:f,props:{},children:[{type:a,value:"docker-compose -f docker-compose-dev.yml up -d"}]},{type:a,value:". I'll run this without the "},{type:b,tag:f,props:{},children:[{type:a,value:"-d"}]},{type:a,value:" flag so we can see if there are any errors. Moment of truth!"}]},{type:a,value:e},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:f,props:{},children:[{type:a,value:" $ docker-compose -f docker-compose-dev.yml up\nCreating network \"testflask_default\" with the default driver\nCreating users-service ...\nCreating users-service ... done\nAttaching to users-service\nusers-service    | Usage: flask run [OPTIONS]\nusers-service    |\nusers-service    | Error: The file\u002Fpath provided (\u002Fusr\u002Fsrc\u002Fapp\u002Fproject\u002Fapp.py) does not appear to exist.  Please verify the path is correct.  If app is not on PYTHONPATH, ensure the extension is .py\nusers-service exited with code 2\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"OK, we have an error that seems to have come from our "},{type:b,tag:f,props:{},children:[{type:a,value:R}]},{type:a,value:" command."}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"To bo continued..."}]}]},dir:"\u002F2017\u002F12\u002F09",path:"\u002F2017\u002F12\u002F09\u002Fsetting-up-flask-cli-with-docker.html",extension:".md",createdAt:aP,updatedAt:aP,raw:"\n![png](\u002Fstatic\u002Fflask-docker.png)\n\n⚠️ This article is under contruction ⚠️\n\nI've recently been working on an awesome tutorial from [testdriven.io](https:\u002F\u002Ftestdriven.io) that covers flask, react and docker. The beginning of the project covers how to setup a basic flask app using `flask-scripts`. `flask-scripts` is a deprecated tool and the tutorial recommends using `Flask CLI`. I have fumbled with this the first time I tried to set it up and while I was able to get it working, I couldn't get it working inside of docker. In this article I'll detail the setup of my flask project with `Flask CLI`.\n\n\u003E One of the nice new features in Flask 0.11 is the built-in integration of the click command line interface. This enables a wide range of new features for the Flask ecosystem and your own applications.\n\nOK. Let's set up a basic flask app:\n\n### Directories\n\n```terminal\n $ mkdir test-flask && cd test-flask\n $ mkdir users-service && cd users-service\n $ mkdir project\n\n```\n\n### Virtual Environment\n\n```\n $ virtualenv -p python3 env\nRunning virtualenv with interpreter \u002Fhome\u002Fbrian\u002Fanaconda3\u002Fbin\u002Fpython3\nUsing base prefix '\u002Fhome\u002Fbrian\u002Fanaconda3'\nNew python executable in \u002Fhome\u002Fbrian\u002FDocuments\u002Fflask\u002Ftest-flask\u002Fusers-service\u002Fenv\u002Fbin\u002Fpython3\nAlso creating executable in \u002Fhome\u002Fbrian\u002FDocuments\u002Fflask\u002Ftest-flask\u002Fusers-service\u002Fenv\u002Fbin\u002Fpython\nInstalling setuptools, pip, wheel...done.\n```\n\n### Activate Virtual Environment\n\n```terminal\n $ source env\u002Fbin\u002Factivate\n(env) $\n```\n\nWe will come back to the `activate` script and add some environment variables to the bottom if it so we have them accessible when we activate the virtual environment.\n\n### Install flask in the virtual environment\n\n```terminal\n $ pip install flask==0.12.2\nCollecting flask==0.12.2\n  Using cached Flask-0.12.2-py2.py3-none-any.whl\nCollecting itsdangerous\u003E=0.21 (from flask==0.12.2)\nCollecting Werkzeug\u003E=0.7 (from flask==0.12.2)\n  Using cached Werkzeug-0.13-py2.py3-none-any.whl\nCollecting click\u003E=2.0 (from flask==0.12.2)\n  Using cached click-6.7-py2.py3-none-any.whl\nCollecting Jinja2\u003E=2.4 (from flask==0.12.2)\n  Using cached Jinja2-2.10-py2.py3-none-any.whl\nCollecting MarkupSafe\u003E=0.23 (from Jinja2\u003E=2.4-\u003Eflask==0.12.2)\nInstalling collected packages: itsdangerous, Werkzeug, click, MarkupSafe, Jinja2, flask\nSuccessfully installed Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.13 click-6.7 flask-0.12.2 itsdangerous-0.24\n(env) $\n```\n\nAt this point we are ready to create our flask app.\n\nHere's a note about the CLI:\n\n\u003E For the **flask** script to work, an application needs to be discovered. This is achieved by exporting the `FLASK_APP` environment variable. It can be either set to an import path or to a filename of a Python module that contains a Flask application.\n\nLet's add an `app.py` file inside the `project` folder:\n\n_app.py_\n\n```python\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('\u002Fusers\u002Fping', methods=['GET'])\ndef ping_pong():\n    return jsonify({\n        'message':'pong!',\n        'status':'success'\n        })\n```\n\nAnd now let's add an environment variable to tell the Flask CLI where our app is located:\n\n```terminal\n $ export FLASK_APP=\u002Fhome\u002Fbrian\u002FDocuments\u002Fflask\u002Ftest-flask\u002Fusers-service\u002Fproject\u002Fapp.py\n```\n\nOK, now let's try to run `flask run` and navigate to `\u002Fusers\u002Fping` and see what happens:\n\n```terminal\n $ flask run\n * Serving Flask app \"app\"\n * Running on http:\u002F\u002F127.0.0.1:5000\u002F (Press CTRL+C to quit)\n127.0.0.1 - - [09\u002FDec\u002F2017 19:20:14] \"GET \u002Fusers\u002Fping HTTP\u002F1.1\" 200 -\n```\n\nGreat! We see our `pong!` message returned in the browser. Next, let's configure our settings:\n\n_project\u002Fconfig.py_\n\n```python\nclass BaseConfig:\n    \"\"\"Base configuration\"\"\"\n    DEBUG = False\n    TESTING = False\nclass DevelopmentConfig(BaseConfig):\n    \"\"\"Development configuration\"\"\"\n    DEBUG = True\nclass TestingConfig(BaseConfig):\n    \"\"\"Testing configuration\"\"\"\n    DEBUG = True\n    TESTING = True\nclass ProductionConfig(BaseConfig):\n    \"\"\"Production configuration\"\"\"\n    DEBUG = False\n```\n\nAnd now we can add the following line right below where we define `app = Flask(__name__)`:\n\n```python\napp.config.from_object('project.config.DevelopmentConfig')\n```\n\nWhen we run `flask run`, we get a long error message including:\n\n```terminal\nDebugged import:\n\n- 'project' not found.\n\nOriginal exception:\n\nImportStringError: import_string() failed for 'project.config'. Possible reasons are:\n\n- missing __init__.py in a package;\n- package or module path not included in sys.path;\n- duplicated package or module name taking precedence in sys.path;\n- missing module, class, function or variable;\n```\n\nLet's try to add `__init__.py` to our `project` folder.\n\nOnce we do this, we are able to run the app successfully, but we don't see any special message about Debug mode being on:\n\n```terminal\n $ flask run\n * Serving Flask app \"project.app\"\n * Running on http:\u002F\u002F127.0.0.1:5000\u002F (Press CTRL+C to quit)\n```\n\nThe documentation mentions that we can turn on Debug mode with:\n\n```terminal\nexport FLASK_DEBUG=1\n```\n\nWe can check the debug mode by printing `app.config` in the `ping_pong()` function that is returned when we hit `\u002Fusers\u002Fping`:\n\n```python\n@app.route('\u002Fusers\u002Fping', methods=['GET'])\ndef ping_pong():\n    print(app.config)\n    return jsonify({\n        'message':'pong!',\n        'status':'success'\n        })\n```\n\nHere's what we see in the terminal:\n\n```terminal\n\u003CConfig {'DEBUG': True, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': None, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'USE_X_SENDFILE': False, 'LOGGER_NAME': 'project.app', 'LOGGER_HANDLER_POLICY': 'always', 'SERVER_NAME': None, 'APPLICATION_ROOT': None, 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'TRAP_BAD_REQUEST_ERRORS': False, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': True, 'JSONIFY_MIMETYPE': 'application\u002Fjson', 'TEMPLATES_AUTO_RELOAD': None}\u003E\n127.0.0.1 - - [09\u002FDec\u002F2017 19:42:46] \"GET \u002Fusers\u002Fping HTTP\u002F1.1\" 200 -\n```\n\nJust to be sure this is working correctly, let's try another config setting, `ProductionConfig`:\n\n```terminal\n\u003CConfig {'DEBUG': False, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': None, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'USE_X_SENDFILE': False, 'LOGGER_NAME': 'project.app', 'LOGGER_HANDLER_POLICY': 'always', 'SERVER_NAME': None, 'APPLICATION_ROOT': None, 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'TRAP_BAD_REQUEST_ERRORS': False, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': True, 'JSONIFY_MIMETYPE': 'application\u002Fjson', 'TEMPLATES_AUTO_RELOAD': None}\u003E\n127.0.0.1 - - [09\u002FDec\u002F2017 19:45:29] \"GET \u002Fusers\u002Fping HTTP\u002F1.1\" 200 -\n```\n\nOK, so far so good! I think that `FLASK_DEBUG` may give us some additional information in the terminal.\n\nLet's run:\n\n```terminal\nexport FLASK_DEBUG=1\n```\n\nand run our app in `ProductionConfig` mode:\n\n```terminal\n $ flask run\n * Serving Flask app \"project.app\"\n * Forcing debug mode on\n * Running on http:\u002F\u002F127.0.0.1:5000\u002F (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 775-946-486\n```\n\nand when we hit `\u002Fusers\u002Fping` we get:\n\n```terminal\n\u003CConfig {'DEBUG': True, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': None, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'USE_X_SENDFILE': False, 'LOGGER_NAME': 'project.app', 'LOGGER_HANDLER_POLICY': 'always', 'SERVER_NAME': None, 'APPLICATION_ROOT': None, 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'TRAP_BAD_REQUEST_ERRORS': False, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': True, 'JSONIFY_MIMETYPE': 'application\u002Fjson', 'TEMPLATES_AUTO_RELOAD': None}\u003E\n127.0.0.1 - - [09\u002FDec\u002F2017 19:51:17] \"GET \u002Fusers\u002Fping HTTP\u002F1.1\" 200 -\n```\n\nHere we can see that `DEBUG` is `True`, which was forced when we set `FLASK_DEBUG=1`.\n\nFor clarity, let's review the directory structure of our project:\n\n```terminal\n $ tree project\u002F\nproject\u002F\n├── app.py\n├── config.py\n└── __init__.py\n```\n\n`__init__.py` is just an empty file at this point, but in the testdriven.io tutorial it is the file that contains our app.\n\nOK, we have a very simple flask app that we can control with the flask cli. Let's get ready to dockerize this simple project.\n\nWe need a `requirements.txt` file. So far we just have flask. We want to place this file on the same level as our `project` folder:\n\n_requirements.txt_\n\n```\nFlask==0.12.1\n```\n\nAnd we can add a `.gitignore` file as well at the same level:\n\n_.gitignore_\n\n```\n__pycache__\nenv\n```\n\n## Docker\n\nHere are the versions of docker applications I have installed:\n\n```terminal\n $ docker -v && docker-compose -v && docker-machine -v\nDocker version 17.10.0-ce, build f4ffd2511c\ndocker-compose version 1.17.1, build unknown\ndocker-machine version 0.13.0, build HEAD\n```\n\nCurrently I don't have any docker machines, images or containers. Here is the status of the docker service:\n\n```terminal\n $ systemctl status docker\n● docker.service - Docker Application Container Engine\n   Loaded: loaded (\u002Fusr\u002Flib\u002Fsystemd\u002Fsystem\u002Fdocker.service; enabled; vendor preset: disabled)\n   Active: active (running) since Fri 2017-12-08 19:13:09 EST; 24h ago\n     Docs: https:\u002F\u002Fdocs.docker.com\n Main PID: 5486 (dockerd)\n    Tasks: 26 (limit: 4915)\n   CGroup: \u002Fsystem.slice\u002Fdocker.service\n           ├─5486 \u002Fusr\u002Fbin\u002Fdockerd -g \u002Fhome\u002Fbrian\u002Fdocker -H fd:\u002F\u002F\n           └─5492 docker-containerd -l unix:\u002F\u002F\u002Fvar\u002Frun\u002Fdocker\u002Flibcontainerd\u002Fdocker-containerd.sock --metrics-interval=0 --start-timeout 2m --state-dir \u002Fvar\u002Frun\u002Fdocker\u002Flibcontainerd\u002Fcontainerd --shim docker-containerd-shim --runtime docker-runc\n\nDec 08 19:13:08 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:08.126834430-05:00\" level=warning msg=\"Your kernel does not support cgroup rt period\"\nDec 08 19:13:08 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:08.126850093-05:00\" level=warning msg=\"Your kernel does not support cgroup rt runtime\"\nDec 08 19:13:08 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:08.127216425-05:00\" level=info msg=\"Loading containers: start.\"\nDec 08 19:13:08 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:08.776371797-05:00\" level=info msg=\"Default bridge (docker0) is assigned with an IP address 172.17.0.0\u002F16. Daemon option --bip can be used to set a preferred IP address\"\nDec 08 19:13:09 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:09.013651222-05:00\" level=info msg=\"Loading containers: done.\"\nDec 08 19:13:09 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:09.041318847-05:00\" level=warning msg=\"Not using native diff for overlay2, this may cause degraded performance for building images: kernel has CONFIG_OVERLAY_FS_REDIRECT_DIR enabled\"\nDec 08 19:13:09 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:09.075633462-05:00\" level=info msg=\"Docker daemon\" commit=f4ffd2511c graphdriver(s)=overlay2 version=17.10.0-ce\nDec 08 19:13:09 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:09.076162900-05:00\" level=info msg=\"Daemon has completed initialization\"\nDec 08 19:13:09 archthinkpad dockerd[5486]: time=\"2017-12-08T19:13:09.082056339-05:00\" level=info msg=\"API listen on \u002Fvar\u002Frun\u002Fdocker.sock\"\nDec 08 19:13:09 archthinkpad systemd[1]: Started Docker Application Container Engine.\n```\n\nOK, docker seems to be working fine. Now we need to create a Docker host and point the docker client at it. What does this mean? From what I understand, we will be running docker containers not on our local machine but in an instance of `virtualbox` on our local machine. To do this, we will use the `docker-machine` command:\n\n```terminal\n $ docker-machine create -d virtualbox testdriven-dev\nRunning pre-create checks...\nCreating machine...\n(testdriven-dev) Copying \u002Fhome\u002Fbrian\u002F.docker\u002Fmachine\u002Fcache\u002Fboot2docker.iso to \u002Fhome\u002Fbrian\u002F.docker\u002Fmachine\u002Fmachines\u002Ftestdriven-dev\u002Fboot2docker.iso...\n(testdriven-dev) Creating VirtualBox VM...\n(testdriven-dev) Creating SSH key...\n(testdriven-dev) Starting the VM...\n(testdriven-dev) Check network to re-create if needed...\n(testdriven-dev) Waiting for an IP...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with boot2docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\n\nThis machine has been allocated an IP address, but Docker Machine could not reach it successfully.\n\nSSH for the machine should still work, but connecting to exposed ports, such as the Docker daemon port (usually \u003Cip\u003E:2376), may not work properly.\n\nYou may need to add the route manually, or use another related workaround.\n\nThis could be due to a VPN, proxy, or host file configuration issue.\n\nYou also might want to clear any VirtualBox host only interfaces you are not using.\nChecking connection to Docker...\nDocker is up and running!\nTo see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env testdriven-dev\n```\n\nWe see that `Docker is up and running!`, but notice this line:\n\n```\nThis machine has been allocated an IP address, but Docker Machine could not reach it successfully.\n```\n\nThis might be a problem. I think that the `docker-machine env \u003Cmachine-name\u003E` command fixes this:\n\nWhen you run this command you get the following:\n\n```terminal\n $ docker-machine env testdriven-dev\nexport DOCKER_TLS_VERIFY=\"1\"\nexport DOCKER_HOST=\"tcp:\u002F\u002F192.168.99.100:2376\"\nexport DOCKER_CERT_PATH=\"\u002Fhome\u002Fbrian\u002F.docker\u002Fmachine\u002Fmachines\u002Ftestdriven-dev\"\nexport DOCKER_MACHINE_NAME=\"testdriven-dev\"\n# Run this command to configure your shell:\n# eval $(docker-machine env testdriven-dev)\n```\n\nThe result of this command tells us to run `eval \\$(docker-machine env testdriven-dev):\n\n```terminal\neval \"$(docker-machine env testdriven-dev)\"\n```\n\nTo clarify, running the above commands puts adds some environment variables:\n\n```terminal\n $ env | grep DOCKER\nDOCKER_MACHINE_NAME=testdriven-dev\nDOCKER_CERT_PATH=\u002Fhome\u002Fbrian\u002F.docker\u002Fmachine\u002Fmachines\u002Ftestdriven-dev\nDOCKER_TLS_VERIFY=1\nDOCKER_HOST=tcp:\u002F\u002F192.168.99.100:2376\n```\n\nNext we need to add a Dockerfile. We will call it `Dockerfile-dev`. Let's look at `Dockerfile-dev` from the tutorial and see how we may need to modify it for the way we set up our project:\n\n```\nFROM python:3.6.3\n\n# set working directory\nRUN mkdir -p \u002Fusr\u002Fsrc\u002Fapp\nWORKDIR \u002Fusr\u002Fsrc\u002Fapp\n\n# add requirements\nADD .\u002Frequirements.txt \u002Fusr\u002Fsrc\u002Fapp\u002Frequirements.txt\n\n# install requirements\nRUN pip install -r requirements.txt\n\n# add app\nADD . \u002Fusr\u002Fsrc\u002Fapp\n\n# run server\nCMD python manage.py runserver -h 0.0.0.0\n```\n\nWe start by defining a base image with the `FROM` line which will give us the correct version of python. We then set folders and the current working directory in docker. Next we install flask add the `requirements.txt` file and install flask with the `RUN` line. We then add the directory (on our local machine) with `ADD . \u002Fusr\u002Fsrc\u002Fapp`.\n\nThis should all be fine up until the last line where we see a `manage.py` file. We never created this file since we wish to use the Flask CLI. We could try replicating the process did locally inside our Dockerfile. We need to add the the `FLASK_APP` environment variable, and its value should be the script that has just been added to the docker image. Let's try:\n\n```\n[...]\n\nENV FLASK_APP \u002Fusr\u002Fsrc\u002Fapp\u002Fproject\u002Fapp.py\n\nCMD flask run\n```\n\nNext we need a script for `docker-compose`. `docker-compose` is a tool for defining and running multi-container Docker applications. Again, let's look at what was included in the tutorial and then see if we need to make any adjustments:\n\n_docker-compose-dev.yml_ (this file goes in the root directory, one level up from where `Dockerfile-dev`)\n\n```\nversion: '3.3'\n\nservices:\n\n  users-service:\n    container_name: users-service\n      build:\n        context: .\u002Fusers-service\n        dockerfile: Dockerfile-dev\n      volumes:\n        - '.\u002Fusers-service:\u002Fusr\u002Fsrc\u002Fapp'\n      ports:\n        - 5001:5000\n```\n\nOK, this looks good! Let's give it a try. We can run the following command:\n\n```terminal\n $ docker-compose -f docker-compose-dev.yml build\nBuilding users-service\n85b1f47fba49: Pull complete\nba6bd283713a: Pull complete\n817c8cd48a09: Pull complete\n47cc0ed96dc3: Pull complete\n4a36819a59dc: Pull complete\ndb9a0221399f: Pull complete\n7a511a7689b6: Pull complete\n1223757f6914: Pull complete\nDigest: sha256:db9d8546f3ff74e96702abe0a78a0e0454df6ea898de8f124feba81deea416d7\nStatus: Downloaded newer image for python:3.6.3\n ---\u003E 79e1dc9af1c1\nStep 2\u002F8 : RUN mkdir -p \u002Fusr\u002Fsrc\u002Fapp\n ---\u003E Running in 808f6c0497d3\n ---\u003E 8873e8e0d526\nRemoving intermediate container 808f6c0497d3\nStep 3\u002F8 : WORKDIR \u002Fusr\u002Fsrc\u002Fapp\n ---\u003E 76ef8912b4d5\nRemoving intermediate container a3ca419fe9c1\nStep 4\u002F8 : ADD .\u002Frequirements.txt \u002Fusr\u002Fsrc\u002Fapp\u002Frequirements.txt\n ---\u003E eb513314527a\nStep 5\u002F8 : RUN pip install -r requirements.txt\n ---\u003E Running in 1a708ec3b565\nCollecting Flask==0.12.1 (from -r requirements.txt (line 1))\n  Downloading Flask-0.12.1-py2.py3-none-any.whl (82kB)\nCollecting Jinja2\u003E=2.4 (from Flask==0.12.1-\u003E-r requirements.txt (line 1))\n  Downloading Jinja2-2.10-py2.py3-none-any.whl (126kB)\nCollecting click\u003E=2.0 (from Flask==0.12.1-\u003E-r requirements.txt (line 1))\n  Downloading click-6.7-py2.py3-none-any.whl (71kB)\nCollecting Werkzeug\u003E=0.7 (from Flask==0.12.1-\u003E-r requirements.txt (line 1))\n  Downloading Werkzeug-0.13-py2.py3-none-any.whl (311kB)\nCollecting itsdangerous\u003E=0.21 (from Flask==0.12.1-\u003E-r requirements.txt (line 1))\n  Downloading itsdangerous-0.24.tar.gz (46kB)\nCollecting MarkupSafe\u003E=0.23 (from Jinja2\u003E=2.4-\u003EFlask==0.12.1-\u003E-r requirements.txt (line 1))\n  Downloading MarkupSafe-1.0.tar.gz\nBuilding wheels for collected packages: itsdangerous, MarkupSafe\n  Running setup.py bdist_wheel for itsdangerous: started\n  Running setup.py bdist_wheel for itsdangerous: finished with status 'done'\n  Stored in directory: \u002Froot\u002F.cache\u002Fpip\u002Fwheels\u002Ffc\u002Fa8\u002F66\u002F24d655233c757e178d45dea2de22a04c6d92766abfb741129a\n  Running setup.py bdist_wheel for MarkupSafe: started\n  Running setup.py bdist_wheel for MarkupSafe: finished with status 'done'\n  Stored in directory: \u002Froot\u002F.cache\u002Fpip\u002Fwheels\u002F88\u002Fa7\u002F30\u002Fe39a54a87bcbe25308fa3ca64e8ddc75d9b3e5afa21ee32d57\nSuccessfully built itsdangerous MarkupSafe\nInstalling collected packages: MarkupSafe, Jinja2, click, Werkzeug, itsdangerous, Flask\nSuccessfully installed Flask-0.12.1 Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.13 click-6.7 itsdangerous-0.24\n ---\u003E d828a0518114\nRemoving intermediate container 1a708ec3b565\nStep 6\u002F8 : ADD . \u002Fusr\u002Fsrc\u002Fapp\n ---\u003E 8e0efae73a47\nStep 7\u002F8 : ENV FLASK_APP \u002Fusr\u002Fsrc\u002Fapp\u002Fproject\u002Fapp.py\n ---\u003E Running in 959581952d05\n ---\u003E 20aaec61b615\nRemoving intermediate container 959581952d05\nStep 8\u002F8 : CMD flask run\n ---\u003E Running in 4f2fc701ba14\n ---\u003E 1d5b59f3cef2\nRemoving intermediate container 4f2fc701ba14\n\nSuccessfully built 1d5b59f3cef2\nSuccessfully tagged testflask_users-service:latest\n\n```\n\nThat seemed to work. Next the tutorial says to run `docker-compose -f docker-compose-dev.yml up -d`. I'll run this without the `-d` flag so we can see if there are any errors. Moment of truth!\n\n```terminal\n $ docker-compose -f docker-compose-dev.yml up\nCreating network \"testflask_default\" with the default driver\nCreating users-service ...\nCreating users-service ... done\nAttaching to users-service\nusers-service    | Usage: flask run [OPTIONS]\nusers-service    |\nusers-service    | Error: The file\u002Fpath provided (\u002Fusr\u002Fsrc\u002Fapp\u002Fproject\u002Fapp.py) does not appear to exist.  Please verify the path is correct.  If app is not on PYTHONPATH, ensure the extension is .py\nusers-service exited with code 2\n```\n\nOK, we have an error that seems to have come from our `flask run` command.\n\nTo bo continued...\n"}}],fetch:{},mutations:[]}}("text","element","span","token","\n","code","punctuation","p","div","nuxt-content-highlight","pre","line-numbers","language-text","string",")",":","("," ","keyword","operator","=",".","\n    ","a","\n        ","boolean","true",-1,"icon","icon-link","em",",",3,"h3","language-python","class","class-name","BaseConfig","triple-quoted-string","\n    DEBUG ","True","docker","project","flask run","\u002Fusers\u002Fping","False","ProductionConfig","requirements.txt","Dockerfile-dev","\u002Fstatic\u002Fflask-docker.png","flask","directories","Directories","virtual-environment","Virtual Environment","activate-virtual-environment","Activate Virtual Environment","install-flask-in-the-virtual-environment","Install flask in the virtual environment","Docker","flask-scripts",". ","Flask CLI","blockquote","FLASK_APP","app.py"," folder:"," Flask","decorator","annotation","@app","route","'\u002Fusers\u002Fping'"," methods","[","'GET'","]","def","function","ping_pong","return"," jsonify","{","'message'","'pong!'","'status'","'success'","}","\n    TESTING ","app","config","__init__.py","export FLASK_DEBUG=1\n",".gitignore","docker-compose","2022-06-14T02:59:13.126Z")));