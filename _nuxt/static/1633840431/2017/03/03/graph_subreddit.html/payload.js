__NUXT_JSONP__("/2017/03/03/graph_subreddit.html", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,bA,bB,bC,bD,bE,bF,bG,bH,bI,bJ,bK,bL,bM,bN,bO,bP,bQ,bR,bS,bT,bU,bV,bW,bX,bY,bZ,b_,b$,ca,cb,cc,cd,ce,cf,cg,ch,ci,cj,ck,cl,cm,cn,co,cp,cq,cr,cs,ct){return {data:[{article:{slug:"graph_subreddit.html",layout:"post",title:"Related subreddit graph exploration with NetworkX",date:"2017-03-03T00:00:00.000Z",comments:true,image:"\u002Fstatic\u002Fsubreddits.png",tags:["reddit","python","scraping","data","graphs"],toc:[],body:{type:"root",children:[{type:b,tag:an,props:{id:"graphing-subreddits"},children:[{type:b,tag:t,props:{href:"#graphing-subreddits",ariaHidden:ao,tabIndex:ap},children:[{type:b,tag:c,props:{className:[aq,ar]},children:[]}]},{type:a,value:"Graphing Subreddits"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"This notebook explores some basic concepts of graph theory. A few weeks ago I set up a script to scrape data from "},{type:b,tag:t,props:{href:bb},children:[{type:a,value:bb}]},{type:a,value:" with the goal of visualizing the network of related subreddits (forums on specific topics) and related data."}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Reddit is home over 600,000 communities, known as subreddits, where people come to share information, opinions, links, etc. and discuss things in a open forum. Most subreddits display links to related subreddits. For example, \u002Fr\u002Fapple (the Apple subreddit) links to \u002Fr\u002FiPhone, a subreddit all about the iPhone, and over a dozen other Apple-related subreddits."}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"If you visit reddit.com as a guest, you will see a list of popular subreddits. This list is located inside an "},{type:b,tag:n,props:{},children:[{type:a,value:as}]},{type:a,value:" tag called "},{type:b,tag:n,props:{},children:[{type:a,value:"drop-choices"}]},{type:a,value:". Here it is:"}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:bc}]},{type:a,value:" selenium "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:a,value:" webdriver\n"},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:a,value:" re\n"},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:a,value:" time\n"},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:" np\n"},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:bc}]},{type:a,value:" bs4 "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:a,value:" BeautifulSoup\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"driver "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:be},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bf},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\ndriver"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'https:\u002F\u002Fwww.reddit.com\u002F'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\ntime"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bg},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:bh}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\nhtml "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:bi},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bl}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n\ns "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:bm},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\ndefaults "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:" s"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ad}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'drop-choices'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\nsubs "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:bn},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:bo}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bp}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\ndefault_subreddits "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:bq}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:aM}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:br},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bs},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"defaults"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:W}]},{type:a,value:aj},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:S}]},{type:a,value:" default_subreddits"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Q}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'['"}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:aj},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'](https:\u002F\u002Freddit.com'"}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:aj},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'), '"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Here are the elements of "},{type:b,tag:n,props:{},children:[{type:a,value:bt}]},{type:a,value:B}]},{type:a,value:f},{type:b,tag:az,props:{},children:[{type:a,value:f},{type:b,tag:C,props:{},children:[{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FLifeProTips\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FLifeProTips\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FFuturology\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FFuturology\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FOldSchoolCool\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FOldSchoolCool\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fmildlyinteresting\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fmildlyinteresting\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Faskscience\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Faskscience\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FUpliftingNews\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FUpliftingNews\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Faww\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Faww\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FGetMotivated\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FGetMotivated\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fpersonalfinance\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fpersonalfinance\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fgadgets\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fgadgets\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fscience\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fscience\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fdataisbeautiful\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fdataisbeautiful\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FDIY\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FDIY\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FAskReddit\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FAskReddit\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fspace\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fspace\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fnosleep\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fnosleep\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FDocumentaries\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FDocumentaries\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Ftodayilearned\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Ftodayilearned\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Ftelevision\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Ftelevision\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FIAmA\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FIAmA\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FArt\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FArt\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FEarthPorn\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FEarthPorn\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fbooks\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fbooks\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fgifs\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fgifs\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FShowerthoughts\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FShowerthoughts\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fblog\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fblog\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fnews\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fnews\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FJokes\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FJokes\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FTwoXChromosomes\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FTwoXChromosomes\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fvideos\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fvideos\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fphilosophy\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fphilosophy\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fnottheonion\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fnottheonion\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fexplainlikeimfive\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fexplainlikeimfive\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fmovies\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fmovies\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FMusic\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FMusic\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FWritingPrompts\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FWritingPrompts\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fworldnews\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fworldnews\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fpics\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fpics\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fhistory\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fhistory\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Flistentothis\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Flistentothis\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fsports\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fsports\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Ffood\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Ffood\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fcreepy\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fcreepy\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fannouncements\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fannouncements\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fgaming\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fgaming\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Ftifu\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Ftifu\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Ffunny\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Ffunny\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002Fphotoshopbattles\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002Fphotoshopbattles\u002F"}]},{type:a,value:z},{type:b,tag:t,props:{href:"https:\u002F\u002Freddit.com\u002Fr\u002FInternetIsBeautiful\u002F",rel:[u,v,w],target:x},children:[{type:a,value:"\u002Fr\u002FInternetIsBeautiful\u002F"}]},{type:a,value:y}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"My goal here is to see how many subreddits we can reach as we branch off of these \"default\" subreddits into their related subreddits."}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"First, we need to set up data structures to hold data for subreddits and their related subreddits. And we need to define an algorithm for collecting data."}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Here's an intrdoduction to graphs from "},{type:b,tag:t,props:{href:bu,rel:[u,v,w],target:x},children:[{type:a,value:"python.org"}]},{type:a,value:B}]},{type:a,value:f},{type:b,tag:az,props:{},children:[{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Few programming languages provide direct support for graphs as a data type, and Python is no exception. However, graphs are easily built out of lists and dictionaries. For instance, here's a simple graph (I can't use drawings in these columns, so I write down the graph's arcs):"}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"A -\u003E B\nA -\u003E C\nB -\u003E C\nB -\u003E D\nC -\u003E D\nD -\u003E C\nE -\u003E F\nF -\u003E C\n"}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"This graph has six nodes (A-F) and eight arcs. It can be represented by the following Python data structure:"}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"graph =     {'A': ['B', 'C'],\n             'B': ['C', 'D'],\n             'C': ['D'],\n             'D': ['C'],\n             'E': ['F'],\n             'F': ['C']}\n"}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"First let's define how we would go only one branch deep into this graph (i.e. find the related subreddits for "},{type:b,tag:"em",props:{},children:[{type:a,value:"only"}]},{type:a,value:" the default subreddits). To collect the data, I first looped through the default subreddits and save the html of each subreddit to its own text file. Here's a script with comments:"}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#first we navigate to the correct folder where we will store the first level of related subreddits"}]},{type:a,value:bv},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aN},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aO},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'~\u002FDocuments\u002FProjects\u002FData\u002FSubreddits\u002Fone\u002F'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#next we instantiate the webdriver we will be using: PhantomJS"}]},{type:a,value:"\ndriver "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:be},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bf},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#loop through the list of default subreddits"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:W}]},{type:a,value:" num"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:" subreddit "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:S}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:"enumerate"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:bt},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#for each subreddit, we append the \u002Fr\u002Fsubreddit path to the base URL (reddit.com)"}]},{type:a,value:"\n    driver"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'https:\u002F\u002Fwww.reddit.com'"}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:ak},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#wait for two seconds"}]},{type:a,value:"\n    time"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bg},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:aB}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#save the html of the loaded page to a variable: html"}]},{type:a,value:bx},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:bi},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bj},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bk},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bl}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#remove '\u002Fr\u002F' from the subreddit name string"}]},{type:a,value:"\n    name "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:by},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"split"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'\u002F'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:aB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#open a new file and give it the name of the subreddit we just scraped"}]},{type:a,value:"\n    subreddit_html_file "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:bz}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"name"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'.txt'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'w+'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#write the html contents to the file"}]},{type:a,value:bA},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"write"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:bB}]},{type:a,value:bA},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bC},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#print out the number and name of the subreddit we just scrapped to make sure things are working"}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Q}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"num"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bD}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:by},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:af}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Next, we want to go through each file and extract the information we want. Here's what we will be getting:"}]},{type:a,value:f},{type:b,tag:"ul",props:{},children:[{type:a,value:f},{type:b,tag:aC,props:{},children:[{type:a,value:"Number of subscribers"}]},{type:a,value:f},{type:b,tag:aC,props:{},children:[{type:a,value:"Subreddit description"}]},{type:a,value:f},{type:b,tag:aC,props:{},children:[{type:a,value:"Date created"}]},{type:a,value:f},{type:b,tag:aC,props:{},children:[{type:a,value:"Related subreddits"}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"For this type of project, I prefer to loop through each page and creating several small dictionaries for each data point, then combine the small dictionaries into a large dictionary, and then append the dictionary to a list of dictionaries. Once I have looped through all of the pages, I can create a pandas DataFrame from the list of dictionaries. This allows me to easily manipulate the data. Here's the script that I used to do this:"}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#navigate to where the html files are stored (I moved them around a bit so it is not consistent with the script above)"}]},{type:a,value:bv},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bw},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bE}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#generate a list of files that we will loop through"}]},{type:a,value:"\nfiles "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:" os"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"listdir"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bE}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#set up an empty list that we will append dictionaries to"}]},{type:a,value:"\ndict_list "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#loop through the files"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:W}]},{type:a,value:" file_ "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:S}]},{type:a,value:" files"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#print out the name of the current file in the loop"}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Q}]},{type:a,value:bF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#open the file"}]},{type:a,value:"\n    f "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:bz}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"file_"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'r'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#read the file contents to a local variable"}]},{type:a,value:bx},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:" f"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"read"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#create a BeautifulSoup object that we will use to parse the HTML"}]},{type:a,value:"\n    b "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:bm},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'lxml'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#get the subreddit name that we are working with (from the `file` variable)"}]},{type:a,value:"\n    subreddit_name "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'\u002Fr\u002F'"}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:bF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bG}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:bh}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"lower"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#put the name into a dictionary"}]},{type:a,value:"\n    subreddit_name_dict "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bH}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:"subreddit_name"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#get number of subscribers"}]},{type:a,value:"\n    subs "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aD}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ad}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aE}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#if the number of subscribers is displayed on the page, then we find it and add it to a dictionary"}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Y}]},{type:a,value:" subs"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:"\n        subs "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aD}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ad}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aE}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aD}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ad}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'number'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:a},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"','"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"''"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:bJ},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aE}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:"int"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:br},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#if the number of subscribers is not displayed on the page, then we set the number of subscribers in the dictionary to None"}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:bK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:bJ},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aE}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#similar process for the description: if the description is displayed, get it and save it to desc"}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#if it is not available, then desc will be set to `None`"}]},{type:a,value:"\n    desc "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ad}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Y}]},{type:a,value:bM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:"\n        desc "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ad}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"text\n        desc "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:bM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bI},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'\\n'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bD}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n    desc_dict "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'description'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:"desc"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#here we use regular expressions to find links anywhere on the page that have the structure: \"\u002Fr\u002Fsomething\u002F\""}]},{type:a,value:"\n    rel_subr "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:bn},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:bo}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bp}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#make a list of these links based on the \"\u002Fr\u002Fsomething\u002F\" pattern"}]},{type:a,value:"\n    related_subreddits "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:" rel_subr"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bs},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:as},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#save the list to a dictionary"}]},{type:a,value:"\n    subreddits_dict "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'related'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:"related_subreddits"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#same processes for recording the date that the subreddit was created: get the date from an HTML element,"}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#then save it to a dictionary. There were two different formats available in the HTML so I grabbed both"}]},{type:a,value:"\n    age "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aD}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ad}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'age'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Y}]},{type:a,value:aP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:"\n        time1 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:aP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bN}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'title'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:"\n        time2 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:aP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bN}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'datetime'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#save the date to a dictionary"}]},{type:a,value:"\n    time_dict "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"\"date1\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:"time1"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"\"date2\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:"time2"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#take all the dictionaries we just created and put them together into one big dictionary"}]},{type:a,value:"\n    dictionary "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:"dict"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"subs_dict"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:"desc_dict"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:"subreddits_dict"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:"subreddit_name_dict"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:"time_dict"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:av},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#append the big dictionary to the list that we defined right before the beginning of the loop"}]},{type:a,value:"\n    dict_list"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bO},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"dictionary"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#deconstruct the Beautiful Soup object (this can eat up memory very quickly, so it is very important when processing lots of data)"}]},{type:a,value:"\n    b"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"decompose"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:bB}]},{type:a,value:"\n    f"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bC},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Next, let's save the results into a csv file. This let's us load the results quickly without having to scrape everyting again. To do this we can use the pandas library."}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:a,value:aQ},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:" pd\ndf0 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"DataFrame"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"dict_list"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:" index"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"At this point, we can go through the "},{type:b,tag:n,props:{},children:[{type:a,value:aR}]},{type:a,value:" column in the DataFrame and put together a list of all the related subreddits. With this list, we can simply repeat the process over and over again. However, each time we start with a new list of subreddits, we want to make sure that they have not already been collected."}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Next I will read in one DataFrame that represents related subreddits \"three levels deep\" relative to the default subreddits."}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:b,tag:"strong",props:{},children:[{type:a,value:"Default --\u003E Related --\u003E Related --\u003E Related"}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"This DataFrame represents the collection of subreddits from all of these \"layers\" of the graph."}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:a,value:aQ},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:" pd\nmaster_df "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bQ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Now we can do a quick visualization of the growth in number of subreddits since the website's start in 2005."}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:a,value:" warnings\nwarnings"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"filterwarnings"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'ignore'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"%"}]},{type:a,value:"matplotlib inline\n"},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:a,value:" matplotlib"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"pyplot "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:" plt\n"},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:a,value:" seaborn "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:" sns\n"},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:" np\n\nmaster_df_ "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:" master_df"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:a,value:"master_df"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"notnull"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:"\nmaster_df_"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"date1 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"to_datetime"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"master_df_"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'date1'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n\nlist_of_dates "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:bR},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"date1"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"sort_values"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n\ncounts "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"arange"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:bS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:bS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:" counts"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bU},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'Number of subreddits over time'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bV},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'Date'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bW},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'Cummulative Count'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:bX},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bY},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aN},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aO},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'~\u002FDocuments\u002FGitHub\u002Fbriancaffey.github.io\u002Fimg\u002Fsubreddit_graph\u002Fsubreddits_count.png'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:b,tag:bZ,props:{alt:b_,src:"\u002Fimg\u002Fsubreddit_graph\u002Fsubreddits_count.png"},children:[]}]},{type:a,value:f},{type:b,tag:an,props:{id:"setting-up-a-graph-with-networkx"},children:[{type:b,tag:t,props:{href:"#setting-up-a-graph-with-networkx",ariaHidden:ao,tabIndex:ap},children:[{type:b,tag:c,props:{className:[aq,ar]},children:[]}]},{type:a,value:"Setting up a graph with NetworkX"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Next we can start to look at the collection of reddits and related subreddits as a graph. I will be using a Python package for network and graph analysis called "},{type:b,tag:t,props:{href:"https:\u002F\u002Fnetworkx.github.io",rel:[u,v,w],target:x},children:[{type:a,value:"NetworkX"}]},{type:a,value:j}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#Let's make sure that we have only unique entries in the dataframe."}]},{type:a,value:"\nmaster_df_u "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:bR},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"drop_duplicates"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bH}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"master_df_u "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"drop"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"index"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ak},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'\u002Fr\u002Ftrack__subreddits_'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#here we define a dictionary where the keys are subreddits and the values are lists of related subreddits"}]},{type:a,value:"\ngraph "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:N}]},{type:a,value:"x"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:"y "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:W}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:" y "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:S}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:"zip"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ak},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aR},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:O}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#NetworkX comes with the python Anaconda distribution"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:a,value:" networkx "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:" nx\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"G"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"Graph"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\nG"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"from_dict_of_lists"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#making the graph undirected takes all of the vertices between nodes and makes them bi-directional"}]},{type:a,value:"\nG1 "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:" G"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"to_undirected"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"choice "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:b$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ak},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:aB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Q}]},{type:a,value:" choice\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"['\u002Fr\u002Fstreetboarding' '\u002Fr\u002Fstephenking']\n"}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Let's test out some of the functions from NetworkX for graph analysis. First, let's take the two randomly selected nodes defined above and test to see if there exists a path between them:"}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ca},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:cb}]}]}]},{type:a,value:f},{type:b,tag:an,props:{id:"shortest-path"},children:[{type:b,tag:t,props:{href:"#shortest-path",ariaHidden:ao,tabIndex:ap},children:[{type:b,tag:c,props:{className:[aq,ar]},children:[]}]},{type:a,value:"Shortest path"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Now let's see (at least one of) the shortest path that exists between these nodes:"}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:cc},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"['\u002Fr\u002Fstreetboarding',\n '\u002Fr\u002Ffreebord',\n '\u002Fr\u002Fadrenaline',\n '\u002Fr\u002Fimaginaryadrenaline',\n '\u002Fr\u002Fimaginarystephenking',\n '\u002Fr\u002Fstephenking']\n"}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Let's write a function that selects two random subreddits and then prints a shortest path if it exists:"}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cd}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,ce]},children:[{type:a,value:M}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:"\n    choices "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:b$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ak},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:aB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Y}]},{type:a,value:aU},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ca},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:"\n        path "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:aU},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:cc},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Q}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:cf}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"' are joined by: \\n'"}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:bK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Q}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"\"No path exists between \""}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:cf}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Here's a collection of results from the "},{type:b,tag:n,props:{},children:[{type:a,value:M}]},{type:a,value:" function defined above that start to paint a picuture of the broad set of topics covered by reddit.com:"}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fpersonalizationadvice and \u002Fr\u002Fbeautifulfemales are joined by:\n['\u002Fr\u002Fpersonalizationadvice', '\u002Fr\u002Fcoloranalysis', '\u002Fr\u002Ffashion', '\u002Fr\u002Fredcarpet', '\u002Fr\u002Fgentlemanboners', '\u002Fr\u002Fbeautifulfemales']\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fcaffeine and \u002Fr\u002Fshittyramen are joined by:\n['\u002Fr\u002Fcaffeine', '\u002Fr\u002Ftoast', '\u002Fr\u002Fcooking', '\u002Fr\u002Framen', '\u002Fr\u002Fshittyramen']\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fwatchingcongress and \u002Fr\u002Fiwantthatonashirt are joined by:\n['\u002Fr\u002Fwatchingcongress', '\u002Fr\u002Fstand', '\u002Fr\u002Fsnowden', '\u002Fr\u002Fundelete', '\u002Fr\u002Ftrees', '\u002Fr\u002Fiwantthatonashirt']\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fasksciencediscussion and \u002Fr\u002Fdogsonhardwoodfloors are joined by:\n['\u002Fr\u002Fasksciencediscussion', '\u002Fr\u002Fbadscience', '\u002Fr\u002Fbadlinguistics', '\u002Fr\u002Fanimalsbeingjerks', '\u002Fr\u002Fstartledcats', '\u002Fr\u002Fdogsonhardwoodfloors']\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Frandommail and \u002Fr\u002Fmini are joined by:\n['\u002Fr\u002Frandommail', '\u002Fr\u002Fspiceexchange', '\u002Fr\u002Fcameraswapping', '\u002Fr\u002Fitookapicture', '\u002Fr\u002Fcarporn', '\u002Fr\u002Fmini']\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fcatsinsinks and \u002Fr\u002Fnzmovies are joined by:\n['\u002Fr\u002Fcatsinsinks', '\u002Fr\u002Fwetcats', '\u002Fr\u002Ftinysubredditoftheday', '\u002Fr\u002Fsheep', '\u002Fr\u002Fnzmetahub', '\u002Fr\u002Fnzmovies']\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fthoriumreactor and \u002Fr\u002Fsailing are joined by:\n['\u002Fr\u002Fthoriumreactor', '\u002Fr\u002Fenergy', '\u002Fr\u002Fspev', '\u002Fr\u002Fsailing']\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fdeathnote and \u002Fr\u002Fvegetarianism are joined by:\n['\u002Fr\u002Fdeathnote', '\u002Fr\u002Ftelevision', '\u002Fr\u002Fnetflixbestof', '\u002Fr\u002Fnaturefilms', '\u002Fr\u002Fenvironment', '\u002Fr\u002Fvegetarianism']\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fmississippir4r and \u002Fr\u002Fmathematics are joined by:\n['\u002Fr\u002Fmississippir4r', '\u002Fr\u002Fmississippi', '\u002Fr\u002Fprisonreform', '\u002Fr\u002Fsocialscience', '\u002Fr\u002Falltech', '\u002Fr\u002Fmathematics']\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fbritainsgottalent and \u002Fr\u002Firelandbaldwin are joined by:\n['\u002Fr\u002Fbritainsgottalent', '\u002Fr\u002Fbritishtv', '\u002Fr\u002Fthat70sshow', '\u002Fr\u002Fmila_kunis', '\u002Fr\u002Fchristinaricci', '\u002Fr\u002Firelandbaldwin']\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fthe_donald and \u002Fr\u002Fladybusiness are joined by:\n['\u002Fr\u002Fthe_donald', '\u002Fr\u002Fshitliberalssay', '\u002Fr\u002Ftrollxchromosomes', '\u002Fr\u002Fladybusiness']\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fselfharm and \u002Fr\u002Fmedlabprofessionals are joined by:\n['\u002Fr\u002Fselfharm', '\u002Fr\u002Fadhd', '\u002Fr\u002Fneuroimaging', '\u002Fr\u002Fpharmacy', '\u002Fr\u002Fmedlabprofessionals']\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fcoverart and \u002Fr\u002Fphillycraftbeer are joined by:\n['\u002Fr\u002Fcoverart', '\u002Fr\u002Fnostalgia', '\u002Fr\u002Fupvotedbecausegirl', '\u002Fr\u002Fwtf', '\u002Fr\u002Fremindsmeofdf', '\u002Fr\u002Fbeer', '\u002Fr\u002Fphillycraftbeer']\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fhotguyswithlonghair and \u002Fr\u002Fcastles are joined by:\n['\u002Fr\u002Fhotguyswithlonghair', '\u002Fr\u002Fmajesticmanes', '\u002Fr\u002Fladyboners', '\u002Fr\u002Fimaginaryladyboners', '\u002Fr\u002Fimaginarycastles', '\u002Fr\u002Fcastles']\n"}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Taking a look "},{type:b,tag:t,props:{href:cg,rel:[u,v,w],target:x},children:[{type:a,value:"under the hood"}]},{type:a,value:" of NetworkX and examining the algorith that finds the "},{type:b,tag:t,props:{href:"http:\u002F\u002Fnetworkx.readthedocs.io\u002Fen\u002Fnetworkx-1.11\u002F_modules\u002Fnetworkx\u002Falgorithms\u002Fshortest_paths\u002Fgeneric.html#shortest_path",rel:[u,v,w],target:x},children:[{type:a,value:"shortest path"}]},{type:a,value:" between any two nodes in a graph, we find that it simply boils down to:"}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"def shortest_path(G, source=None, target=None, weight=None):\n    paths=nx.bidirectional_shortest_path(G,source,target)\n    return paths\n"}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"You can read more about the "},{type:b,tag:n,props:{},children:[{type:a,value:"bidirectional_shortest_path"}]},{type:a,value:" function "},{type:b,tag:t,props:{href:cg,rel:[u,v,w],target:x},children:[{type:a,value:ch}]},{type:a,value:" in the NetworkX documentation."}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"When I was first experimenting with graph algorithms, I had an interesting result using an algorithm intruduced "},{type:b,tag:t,props:{href:bu,rel:[u,v,w],target:x},children:[{type:a,value:ch}]},{type:a,value:" in the Python documentation. Here's the algorithm:"}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cd}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,ce]},children:[{type:a,value:"find_path"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:" start"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aV},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:"\n    path "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:" path "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:a,value:aX},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Y}]},{type:a,value:" start "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:a,value:aV},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aJ}]},{type:a,value:" path\n    "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Y}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ci}]},{type:a,value:cj},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"has_key"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aX},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aJ}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:al}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:W}]},{type:a,value:aY},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:S}]},{type:a,value:cj},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:a,value:aX},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Y}]},{type:a,value:aY},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:ci}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:S}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:"\n            newpath "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:" find_path"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:" node"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aV},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aW},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n            "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Y}]},{type:a,value:" newpath"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aJ}]},{type:a,value:" newpath\n    "},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:aJ}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:al}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"The above algorthim uses a process called backtracking to exaustively try all possibilities until it returns a solution. It creates an interesting \"random walk\" through groups of related subreddits. Here's the result of calling the above function on our graph (only 2 layers deep) with two random nodes: \u002Fr\u002Fpersianrap and \u002Fr\u002Fnosleep:"}]},{type:a,value:f},{type:b,tag:az,props:{},children:[{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"\u002Fr\u002Fpersianrap \u002Fr\u002Fmiddleeasternmusic \u002Fr\u002Farabic \u002Fr\u002Farabs \u002Fr\u002Flibyancrisis \u002Fr\u002Fsyriancivilwar \u002Fr\u002Fyemenicrisis \u002Fr\u002Fsinaiinsurgency \u002Fr\u002Fjihadinfocus \u002Fr\u002Fcredibledefense \u002Fr\u002Fgeopolitics \u002Fr\u002Fforgottennews \u002Fr\u002Flibyanconflict \u002Fr\u002Fmenaconflicts \u002Fr\u002Firan \u002Fr\u002Firanianlgbt \u002Fr\u002Fzoroastrianism \u002Fr\u002Fkurdistan \u002Fr\u002Frojava \u002Fr\u002Fanarchism \u002Fr\u002Fimaginarypolitics \u002Fr\u002Fimaginaryimmortals \u002Fr\u002Fimaginaryclerics \u002Fr\u002Fimaginarylakes \u002Fr\u002Fimaginaryaliens \u002Fr\u002Fimaginarygnomes \u002Fr\u002Fimaginaryladyboners \u002Fr\u002Fimaginaryturtleworlds \u002Fr\u002Fimaginarysunnydale \u002Fr\u002Fimaginarydwarves \u002Fr\u002Fimaginarywizards \u002Fr\u002Fimaginaryvikings \u002Fr\u002Fimaginarycolorscapes \u002Fr\u002Fimaginarysteampunk \u002Fr\u002Fimaginarytemples \u002Fr\u002Fimaginaryblueprints \u002Fr\u002Fcomicbookart \u002Fr\u002Fimaginarytechnology \u002Fr\u002Fmtgporn \u002Fr\u002Fimaginaryoldkingdom \u002Fr\u002Fimaginaryfactories \u002Fr\u002Fimaginaryfederation \u002Fr\u002Fimaginarylovers \u002Fr\u002Fimaginarynarnia \u002Fr\u002Fimaginarydwellings \u002Fr\u002Fimaginaryscience \u002Fr\u002Fimaginarytaverns \u002Fr\u002Fimaginarybattlefields \u002Fr\u002Fcityporn \u002Fr\u002Fjapanpics \u002Fr\u002Fnationalphotosubs \u002Fr\u002Faustriapics \u002Fr\u002Fsouthkoreapics \u002Fr\u002Ftaiwanpics \u002Fr\u002Fghanapics \u002Fr\u002Fkenyapics \u002Fr\u002Fnorwaypics \u002Fr\u002Fvzlapics \u002Fr\u002Fperupics \u002Fr\u002Fantarcticapics \u002Fr\u002Fgreatlakespics \u002Fr\u002Flakeporn \u002Fr\u002Fpornoverlords \u002Fr\u002Fthingscutinhalfporn \u002Fr\u002Fmanufacturing \u002Fr\u002Fcnc \u002Fr\u002Faskengineers \u002Fr\u002Fsciencesubreddits \u002Fr\u002Fmath \u002Fr\u002Fsimulate \u002Fr\u002Fcosmology \u002Fr\u002Freddittothefuture \u002Fr\u002Fscifi \u002Fr\u002Flost \u002Fr\u002Fthe100books \u002Fr\u002Fthe100 \u002Fr\u002Ftheblacklist \u002Fr\u002Fnbc \u002Fr\u002Fdundermifflin \u002Fr\u002Fsonsofanarchy \u002Fr\u002Ftwentyfour \u002Fr\u002Fbanshee \u002Fr\u002Fhbo \u002Fr\u002Fsiliconvalleyhbo \u002Fr\u002Fsiliconvalley \u002Fr\u002Fcalifornia \u002Fr\u002Ftahoe \u002Fr\u002Fskiing \u002Fr\u002Fsnowshoeing \u002Fr\u002Fxcountryskiing \u002Fr\u002Fwintergear \u002Fr\u002Fskijumping \u002Fr\u002Fwinter \u002Fr\u002Fbigmountain \u002Fr\u002Fmountaineering \u002Fr\u002Fcampingandhiking \u002Fr\u002Fearthporn \u002Fr\u002Fnature \u002Fr\u002Fbirding \u002Fr\u002Finvasivespecies \u002Fr\u002Fzoology \u002Fr\u002Fentomology \u002Fr\u002Frainforest \u002Fr\u002Fbotany \u002Fr\u002Fwildlife \u002Fr\u002Fallscience \u002Fr\u002Fearthscience \u002Fr\u002Fenergy \u002Fr\u002Fbiomass \u002Fr\u002Frenewablenews \u002Fr\u002Fsyngas \u002Fr\u002Fclimatenews \u002Fr\u002Fcomposting \u002Fr\u002Fvermiculture \u002Fr\u002Forganicfarming \u002Fr\u002Flivestock \u002Fr\u002Fanimalwelfare \u002Fr\u002Frandomactsofpetfood \u002Fr\u002Fanimalreddits \u002Fr\u002Fcockatiel \u002Fr\u002Fcatpics \u002Fr\u002Ftortoises \u002Fr\u002Fwhales \u002Fr\u002Fcetacea \u002Fr\u002Flifeaquatic \u002Fr\u002Fhrw \u002Fr\u002Fgreen_peace \u002Fr\u002Fenvironmental_policy \u002Fr\u002Fconservation \u002Fr\u002Fdepthhub \u002Fr\u002Findepthsports \u002Fr\u002Fdeeperhubbeta \u002Fr\u002Flectures \u002Fr\u002Fspacepolicy \u002Fr\u002Fskylon \u002Fr\u002Fula \u002Fr\u002Fisro \u002Fr\u002Fengineteststands \u002Fr\u002Fjupiters \u002Fr\u002Fimaginarystarscapes \u002Fr\u002Fspacequestions \u002Fr\u002Fspaceflight \u002Fr\u002Fmoon \u002Fr\u002Fdione \u002Fr\u002Feuropa \u002Fr\u002Foortcloud \u002Fr\u002Fdwarfplanetceres \u002Fr\u002Fsaturn \u002Fr\u002Fasteroidbelt \u002Fr\u002Fmars \u002Fr\u002Frhea \u002Fr\u002Fvenus \u002Fr\u002Fastrophys \u002Fr\u002Fspacevideos \u002Fr\u002Ftranshuman \u002Fr\u002Ftimereddits \u002Fr\u002Fvirtualreality \u002Fr\u002Fvive \u002Fr\u002Foculus \u002Fr\u002Flearnvrdev \u002Fr\u002Funity3d \u002Fr\u002Fgamedev \u002Fr\u002Fcrowdfunding \u002Fr\u002Fcrowdsourcing \u002Fr\u002Fmturk \u002Fr\u002Fswagbucks \u002Fr\u002Fbeermoney \u002Fr\u002Fflipping \u002Fr\u002Fshoplifting \u002Fr\u002Fthriftstorehauls \u002Fr\u002Fdvdcollection \u002Fr\u002Ftelevisionposterporn \u002Fr\u002Fconcertposterporn \u002Fr\u002Fmovieposterporn \u002Fr\u002Flv426 \u002Fr\u002Fpredator \u002Fr\u002Farnoldschwarzenegger \u002Fr\u002Falanpartridge \u002Fr\u002Famericandad \u002Fr\u002Ftimanderic \u002Fr\u002Fhomemovies \u002Fr\u002Fgravityfalls \u002Fr\u002Fhomestarrunner \u002Fr\u002Ftelltale \u002Fr\u002Fthewalkingdeadgame \u002Fr\u002Fthewalkingdeadgifs \u002Fr\u002Ftwdnomansland \u002Fr\u002Fheycarl \u002Fr\u002Ftwdroadtosurvival \u002Fr\u002Fthewalkingdead \u002Fr\u002Fzombies \u002Fr\u002Fguns \u002Fr\u002Fswissguns \u002Fr\u002Fopencarry \u002Fr\u002Flibertarian \u002Fr\u002Fgeolibertarianism \u002Fr\u002Fbasicincome \u002Fr\u002Fbasicincomeactivism \u002Fr\u002Fmhoc \u002Fr\u002Fmodelaustralia \u002Fr\u002Frmtk \u002Fr\u002Fthenetherlands \u002Fr\u002Ftokkiefeesboek \u002Fr\u002Fnujijinactie \u002Fr\u002Fik_ihe \u002Fr\u002Fyouirl \u002Fr\u002Ffite_me_irl \u002Fr\u002F2meirl4meirl \u002Fr\u002Fdepression \u002Fr\u002Frandomactsofcards \u002Fr\u002Fphilately \u002Fr\u002Fcoins \u002Fr\u002Fcoins4sale \u002Fr\u002Fancientcoins \u002Fr\u002Fancientrome \u002Fr\u002Fflatblue \u002Fr\u002Fbestofwritingprompts \u002Fr\u002Fwritingprompts \u002Fr\u002Fpromptoftheday \u002Fr\u002Fflashfiction \u002Fr\u002Fkeepwriting \u002Fr\u002Fgetmotivated \u002Fr\u002Fmentors \u002Fr\u002Ffavors \u002Fr\u002Frecordthis \u002Fr\u002Fvideography \u002Fr\u002Fanimation \u002Fr\u002F3dsmax \u002Fr\u002Fcomputergraphics \u002Fr\u002Fcinema4d \u002Fr\u002Fdesign \u002Fr\u002Fui_design \u002Fr\u002Fdesignjobs \u002Fr\u002Fheavymind \u002Fr\u002Fwtfart \u002Fr\u002Falternativeart \u002Fr\u002Fimaginaryninjas \u002Fr\u002Fimaginaryruins \u002Fr\u002Fisometric \u002Fr\u002Fimaginaryislands \u002Fr\u002Fimaginaryverse \u002Fr\u002Ficandrawthat \u002Fr\u002Fcaricatures \u002Fr\u002Fimaginaryneweden \u002Fr\u002Fimaginaryequestria \u002Fr\u002Fimaginaryaww \u002Fr\u002Fimaginarycyberpunk \u002Fr\u002Fchinafuturism \u002Fr\u002Fscifirealism \u002Fr\u002Finegentlemanboners \u002Fr\u002Fimaginarywtf \u002Fr\u002Fimaginaryelementals \u002Fr\u002Fimaginarydinosaurs \u002Fr\u002Fdinosaurs \u002Fr\u002Fspeculativeevolution \u002Fr\u002Fhybridanimals \u002Fr\u002Fphotoshopbattles \u002Fr\u002Fcutouts \u002Fr\u002Fbattleshops \u002Fr\u002Fgraphic_design \u002Fr\u002Fvisualization \u002Fr\u002Fstatistics \u002Fr\u002Foncourtanalytics \u002Fr\u002Fnbaanalytics \u002Fr\u002Fnba \u002Fr\u002Fpacers \u002Fr\u002Fatlantahawks \u002Fr\u002Fbasketball \u002Fr\u002Fmavericks \u002Fr\u002Ffcdallas \u002Fr\u002Ftheticket \u002Fr\u002Fdallasstars \u002Fr\u002Fbostonbruins \u002Fr\u002Fpatriots \u002Fr\u002Ftennesseetitans \u002Fr\u002Fnashvillesounds \u002Fr\u002Fpredators \u002Fr\u002Fflyers \u002Fr\u002Fhockeyfandom \u002Fr\u002Fcaps \u002Fr\u002Fnhl \u002Fr\u002Fdetroitredwings \u002Fr\u002Fsabres \u002Fr\u002Ffloridapanthers \u002Fr\u002Fhabs \u002Fr\u002Fmontrealimpact \u002Fr\u002Falouettes \u002Fr\u002Fcfl \u002Fr\u002Fstadiumporn \u002Fr\u002Fnfl \u002Fr\u002Fmadden \u002Fr\u002Feurobowl \u002Fr\u002Ffantasyfb \u002Fr\u002Ffantasyfootball \u002Fr\u002F49ers \u002Fr\u002Ffootballgamefilm \u002Fr\u002Ffootballstrategy \u002Fr\u002Fcfb \u002Fr\u002Fcollegebaseball \u002Fr\u002Fmlbdraft \u002Fr\u002Fbaseball \u002Fr\u002Fcubs \u002Fr\u002Fcardinals \u002Fr\u002Fsaintlouisfc \u002Fr\u002Fstlouisblues \u002Fr\u002Fstlouis \u002Fr\u002Fstlouisbiking \u002Fr\u002Fmobicycling \u002Fr\u002Fbicycling \u002Fr\u002Fvintage_bicycles \u002Fr\u002Fmiamibiking \u002Fr\u002Ffatbike \u002Fr\u002Fcycling \u002Fr\u002Fstrava \u002Fr\u002Fphillycycling \u002Fr\u002Fwheelbuild \u002Fr\u002Fbikewrench \u002Fr\u002Fvelo \u002Fr\u002Fbikepolo \u002Fr\u002Fbicycletouring \u002Fr\u002Fbicyclingcirclejerk \u002Fr\u002Fbikecommuting \u002Fr\u002Fukbike \u002Fr\u002Fleedscycling \u002Fr\u002Flondoncycling \u002Fr\u002Ffixedgearbicycle \u002Fr\u002Fcyclingfashion \u002Fr\u002Fpeloton \u002Fr\u002Fmtb \u002Fr\u002Fclimbingporn \u002Fr\u002Fadrenaline \u002Fr\u002Fmotocross \u002Fr\u002Fbmxracing \u002Fr\u002Fwake \u002Fr\u002Fsnowboardingnoobs \u002Fr\u002Ffreebord \u002Fr\u002Fsnowboarding \u002Fr\u002Fsledding \u002Fr\u002Foutdoors \u002Fr\u002Fsoposts \u002Fr\u002Fcordcutters \u002Fr\u002Fnetflixviavpn \u002Fr\u002Fhulu \u002Fr\u002Ffiretv \u002Fr\u002Fnetflixbestof \u002Fr\u002Fraisinghope \u002Fr\u002Fmadmen \u002Fr\u002Fearthsgottalent \u002Fr\u002Fbobsburgers \u002Fr\u002Ffringe \u002Fr\u002Flouie \u002Fr\u002Ftheoriginals \u002Fr\u002Fiansomerhalder \u002Fr\u002Fkat_graham \u002Fr\u002Findianaevans \u002Fr\u002Fjanelevy \u002Fr\u002Fgagegolightly \u002Fr\u002Fsarahhyland \u002Fr\u002Fstarlets \u002Fr\u002Fninadobrev \u002Fr\u002Fkathrynnewton \u002Fr\u002Farielwinter \u002Fr\u002Fashleygreene \u002Fr\u002Fgentlemanboners \u002Fr\u002Fbandporn \u002Fr\u002Fmusicpics \u002Fr\u002Flistentomusic \u002Fr\u002Flistentonew \u002Fr\u002Fsubraddits \u002Fr\u002Fdtipics \u002Fr\u002Fdamnthatsinteresting \u002Fr\u002Finterestingasfuck \u002Fr\u002Funexpected \u002Fr\u002Fwtf \u002Fr\u002Fweird \u002Fr\u002Fanimalsbeingderps \u002Fr\u002Fanimalsbeingconfused \u002Fr\u002Fhumansbeingbros \u002Fr\u002Fhulpdiensten \u002Fr\u002Faskle \u002Fr\u002Fprotectandserve \u002Fr\u002Fgood_cop_free_donut \u002Fr\u002Fbad_cop_follow_up \u002Fr\u002Famifreetogo \u002Fr\u002Fcopwatch \u002Fr\u002Fpuppycide \u002Fr\u002Funderreportednews \u002Fr\u002Fmediaquotes \u002Fr\u002Fsavedyouaclick \u002Fr\u002Fnews \u002Fr\u002Fneutralnews \u002Fr\u002Fask_politics \u002Fr\u002Fpoliticalopinions \u002Fr\u002Fgunsarecool \u002Fr\u002Frenewableenergy \u002Fr\u002Fweb_design \u002Fr\u002Fsomebodymakethis \u002Fr\u002Fsomethingimade \u002Fr\u002Fcrafts \u002Fr\u002Fkidscrafts \u002Fr\u002Fdaddit \u002Fr\u002Fformulafeeders \u002Fr\u002Fboobsandbottles \u002Fr\u002Fcsectioncentral \u002Fr\u002Fpredaddit \u002Fr\u002Fdadbloggers \u002Fr\u002Fmombloggers \u002Fr\u002Fcutekids \u002Fr\u002Fbigfeats \u002Fr\u002Fscienceparents \u002Fr\u002Flv9hrvv \u002Fr\u002Fsahp \u002Fr\u002Ftryingforababy \u002Fr\u002Fwaiting_to_try \u002Fr\u002Fpcos \u002Fr\u002Finfertility \u002Fr\u002Fbirthparents \u002Fr\u002Ftfabchartstalkers \u002Fr\u002Ffirsttimettc \u002Fr\u002Fcautiousbtb \u002Fr\u002Fttchealthy \u002Fr\u002Fxxketo \u002Fr\u002Fketoscience \u002Fr\u002Fketogains \u002Fr\u002Fleangains \u002Fr\u002Fgettingshredded \u002Fr\u002Fbulkorcut \u002Fr\u002Fgainit \u002Fr\u002Fdecidingtobebetter \u002Fr\u002Fzen \u002Fr\u002Fbuddhism \u002Fr\u002Fastralprojection \u002Fr\u002Fspirituality \u002Fr\u002Fhinduism \u002Fr\u002Fyoga \u002Fr\u002Fveganfitness \u002Fr\u002Fposture \u002Fr\u002Fhealth \u002Fr\u002Fukhealthcare \u002Fr\u002Fpharmacy \u002Fr\u002Fnursing \u002Fr\u002Fdoctorswithoutborders \u002Fr\u002Fhumanitarian \u002Fr\u002Fassistance \u002Fr\u002Fparanormalhelp \u002Fr\u002Fparanormal \u002Fr\u002F333 \u002Fr\u002Faskparanormal \u002Fr\u002Fintelligence \u002Fr\u002Fblackhat \u002Fr\u002Fnetsec \u002Fr\u002Ftechnology \u002Fr\u002Fnewyorkfuturistparty \u002Fr\u002Frad_decentralization \u002Fr\u002Fmassachusettsfp \u002Fr\u002Fopensource \u002Fr\u002Falabamafp \u002Fr\u002Fdarknetplan \u002Fr\u002Ftorrents \u002Fr\u002Fi2p \u002Fr\u002Fprivacy \u002Fr\u002Fbadgovnofreedom \u002Fr\u002Fcensorship \u002Fr\u002Fgovernmentoppression \u002Fr\u002Fdescentintotyranny \u002Fr\u002Fwikileaks \u002Fr\u002Fdncleaks \u002Fr\u002Fhillaryforprison \u002Fr\u002Fthe_donald \u002Fr\u002Fshitredditsays \u002Fr\u002Fsrsmythos \u002Fr\u002Fsrstrees \u002Fr\u002Fentwives \u002Fr\u002Flesbients \u002Fr\u002Factuallesbians \u002Fr\u002Flesbianromance \u002Fr\u002Flesbianerotica \u002Fr\u002Fl4l \u002Fr\u002Fdyke \u002Fr\u002Fladyladyboners \u002Fr\u002Fbisexual \u002Fr\u002Fbisexy \u002Fr\u002Fbiwomen \u002Fr\u002Fpansexual \u002Fr\u002Fgenderqueer \u002Fr\u002Ftransspace \u002Fr\u002Flgbtlibrary \u002Fr\u002Flgbtnews \u002Fr\u002Fdixiequeer \u002Fr\u002Flgbt \u002Fr\u002Fsex \u002Fr\u002Fhelpmecope \u002Fr\u002Fbpd \u002Fr\u002Frapecounseling \u002Fr\u002Ftrueoffmychest \u002Fr\u002Fsuicidewatch \u002Fr\u002Fbipolarsos \u002Fr\u002Fbipolar \u002Fr\u002Fmentalpod \u002Fr\u002Fadhd \u002Fr\u002Fhoarding \u002Fr\u002Fdeclutter \u002Fr\u002Fthrifty \u002Fr\u002Ftinyhouses \u002Fr\u002Fleanfire \u002Fr\u002Flowcar \u002Fr\u002Fzerowaste \u002Fr\u002Fsimpleliving \u002Fr\u002Flivingofftheland \u002Fr\u002Fhunting \u002Fr\u002Fanimaltracking \u002Fr\u002Fsurvival \u002Fr\u002Fvedc \u002Fr\u002F4x4 \u002Fr\u002Fclassiccars \u002Fr\u002Fautomotivetraining \u002Fr\u002Fautodetailing \u002Fr\u002Fcartalk \u002Fr\u002Fmercedes_benz \u002Fr\u002Fmotorsports \u002Fr\u002Frallycross \u002Fr\u002Fworldrallycross \u002Fr\u002Fblancpain \u002Fr\u002Fnascarhometracks \u002Fr\u002Farcaracing \u002Fr\u002Fstadiumsupertrucks \u002Fr\u002Fhydroplanes \u002Fr\u002Fsailing \u002Fr\u002Fboatbuilding \u002Fr\u002Fwoodworking \u002Fr\u002Fcottage_industry \u002Fr\u002Ffarriers \u002Fr\u002Fblacksmith \u002Fr\u002Fbladesmith \u002Fr\u002Fknives \u002Fr\u002Fswissarmyknives \u002Fr\u002Fswitzerland \u002Fr\u002Fbern \u002Fr\u002Fsanktgallen \u002Fr\u002Fliechtenstein \u002Fr\u002Ferasmus \u002Fr\u002Fde \u002Fr\u002Fgermanpuns \u002Fr\u002Fschland \u002Fr\u002Frvacka \u002Fr\u002Fsloensko \u002Fr\u002Fslovakia \u002Fr\u002Fbelarus \u002Fr\u002Fandorra \u002Fr\u002Feurope \u002Fr\u002Fhungary \u002Fr\u002Ffrancophonie \u002Fr\u002Fthailand \u002Fr\u002Fvietnam \u002Fr\u002Fvietnampics \u002Fr\u002Ftravel \u002Fr\u002Fgeography \u002Fr\u002Fclimate \u002Fr\u002Fdrought \u002Fr\u002Fwaterutilities \u002Fr\u002Fdrylands \u002Fr\u002Firrigation \u002Fr\u002Fwater \u002Fr\u002Fonthewaterfront \u002Fr\u002Fwetlands \u002Fr\u002Fmarinelife \u002Fr\u002Focean \u002Fr\u002Fseasteading \u002Fr\u002Ffrontier_colonization \u002Fr\u002Farcology \u002Fr\u002Fretrofuturism \u002Fr\u002Fgoldenpath \u002Fr\u002Fpolitics \u002Fr\u002Fmoderationtheory \u002Fr\u002Fwdp \u002Fr\u002Foutoftheloop \u002Fr\u002Fwherearetheynow \u002Fr\u002Fentertainment \u002Fr\u002Fportlandia \u002Fr\u002Fthemichaeljfoxshow \u002Fr\u002Fbacktothefuture \u002Fr\u002Fbladerunner \u002Fr\u002Ffilmnoir \u002Fr\u002Fvintageladyboners \u002Fr\u002Fclassicfilms \u002Fr\u002Fforeignmovies \u002Fr\u002Fbritishfilms \u002Fr\u002Fcanadianfilm \u002Fr\u002Fnewjerseyfilm \u002Fr\u002Fnewzealandfilm \u002Fr\u002Fnewzealand \u002Fr\u002Fwellington \u002Fr\u002Fnzmetahub \u002Fr\u002Fnewzealandhistory \u002Fr\u002Fscottishhistory \u002Fr\u002Fscots \u002Fr\u002Fscottishproblems \u002Fr\u002Fbritishproblems \u002Fr\u002Fswedishproblems \u002Fr\u002Fpinsamt \u002Fr\u002Fsweden \u002Fr\u002Fsvenskpolitik \u002Fr\u002Farbetarrorelsen \u002Fr\u002Fsocialism \u002Fr\u002Fshittydebatecommunism \u002Fr\u002Fshittysocialscience \u002Fr\u002Fshittyideasforadmins \u002Fr\u002Fshittytheoryofreddit \u002Fr\u002Fshittybuildingporn \u002Fr\u002Fshittylifeprotips \u002Fr\u002Fshittyshitredditsays \u002Fr\u002Fshittyquotesporn \u002Fr\u002Fshittyama \u002Fr\u002Faskashittyparent \u002Fr\u002Fshittyprogramming \u002Fr\u002Fshittyaskalawyer \u002Fr\u002Fbadlegaladvice \u002Fr\u002Fbadscience \u002Fr\u002Fbadeconomics \u002Fr\u002Fbadhistory \u002Fr\u002Fhistoricalrage \u002Fr\u002Fmetarage \u002Fr\u002Fragenovels \u002Fr\u002Ffffffffuuuuuuuuuuuu \u002Fr\u002Fgaaaaaaayyyyyyyyyyyy \u002Fr\u002Flgbteens \u002Fr\u002Fneedafriend \u002Fr\u002Frant \u002Fr\u002Fshowerthoughts \u002Fr\u002Fmarkmywords \u002Fr\u002Fcalledit \u002Fr\u002Ffuturewhatif \u002Fr\u002Fsportswhatif \u002Fr\u002Falternatehistory \u002Fr\u002Fmaps \u002Fr\u002Fxkcd \u002Fr\u002Fkerbalspaceprogram \u002Fr\u002Fspacesimgames \u002Fr\u002Feve \u002Fr\u002Fscifigaming \u002Fr\u002Fmasseffect \u002Fr\u002Fimaginarymasseffect \u002Fr\u002Fimaginaryvampires \u002Fr\u002Fimaginarytowers \u002Fr\u002Fimaginarybestof \u002Fr\u002Fpics \u002Fr\u002Fspaceporn \u002Fr\u002Fauroraporn \u002Fr\u002Fweatherporn \u002Fr\u002Fsfwpornnetwork \u002Fr\u002Ffwepp \u002Fr\u002Fshittyearthporn \u002Fr\u002Fshittyaskreddit \u002Fr\u002Faskashittyphilosopher \u002Fr\u002Fshittyaskhistory \u002Fr\u002Fshittysuboftheweek \u002Fr\u002Fshittyaskcooking \u002Fr\u002Fshittyhub \u002Fr\u002Fcoolguides \u002Fr\u002Ftrendingsubreddits \u002Fr\u002Fmonkslookingatbeer \u002Fr\u002Fbeerporn \u002Fr\u002Fbeerwithaview \u002Fr\u002Fshittybeerwithaview \u002Fr\u002Fshittyfoodporn \u002Fr\u002Fenttreats \u002Fr\u002Ftrees \u002Fr\u002Feldertrees \u002Fr\u002Fvaporents \u002Fr\u002Fcrainn \u002Fr\u002Feirhub \u002Fr\u002Ffairepublicofireland \u002Fr\u002Fgaeltacht \u002Fr\u002Fwestmeath \u002Fr\u002Ftipperary \u002Fr\u002Flimerick \u002Fr\u002Fkilkenny \u002Fr\u002Fireland \u002Fr\u002Firejobs \u002Fr\u002Fresumes \u002Fr\u002Fcareerguidance \u002Fr\u002Fflatone \u002Fr\u002Fcentralillinois \u002Fr\u002Fchicubs \u002Fr\u002Fwhitesox \u002Fr\u002Fminnesotatwins \u002Fr\u002Fminnesotavikings \u002Fr\u002Fgreenbaypackers \u002Fr\u002Fjaguars \u002Fr\u002Fmiamidolphins \u002Fr\u002Fnflroundtable \u002Fr\u002Fdetroitlions \u002Fr\u002Fforhonor \u002Fr\u002Fvikingstv \u002Fr\u002Fhannibaltv \u002Fr\u002Fthepathhulu \u002Fr\u002Fbatesmotel \u002Fr\u002Fhannibal \u002Fr\u002Fhitchcock \u002Fr\u002Fsilentmoviegifs \u002Fr\u002Fmoviestunts \u002Fr\u002Fbollywoodrealism \u002Fr\u002Findiamain \u002Fr\u002Findianews \u002Fr\u002Fasia \u002Fr\u002Foldindia \u002Fr\u002Fexplorepakistan \u002Fr\u002Fchurchporn \u002Fr\u002Fmedievalporn \u002Fr\u002Fcastles \u002Fr\u002Fhistoryporn \u002Fr\u002Fthewaywewere \u002Fr\u002F1970s \u002Fr\u002Fclassicmovietrailers \u002Fr\u002Fwarmovies \u002Fr\u002Fmoviecritic \u002Fr\u002Ftrailers \u002Fr\u002Fliveaction \u002Fr\u002Fanimedeals \u002Fr\u002Fdbz \u002Fr\u002Ftoonami \u002Fr\u002Fregularshow \u002Fr\u002Fthelifeandtimesoftim \u002Fr\u002Faquajail \u002Fr\u002Fmodern_family \u002Fr\u002Fsupernatural \u002Fr\u002Fmishacollins \u002Fr\u002Fjaredpadalecki \u002Fr\u002Ffandomnatural \u002Fr\u002Ffangirls \u002Fr\u002Ftrollxgirlgamers \u002Fr\u002Ftrollmedia \u002Fr\u002Ftrollgaming \u002Fr\u002Ftrollmua \u002Fr\u002Fjusttrollxthings \u002Fr\u002Ftrollxmoms \u002Fr\u002Ftrollmeta \u002Fr\u002Ftrollychromosome \u002Fr\u002Foney \u002Fr\u002Faskwomen \u002Fr\u002Fokcupid \u002Fr\u002Frelationship_advice \u002Fr\u002Fhelp \u002Fr\u002Fbugs \u002Fr\u002Fredditdev \u002Fr\u002Fenhancement \u002Fr\u002Fyoursub \u002Fr\u002Fhorrorreviewed \u002Fr\u002Ftruecreepy \u002Fr\u002Fmetatruereddit \u002Fr\u002Ftruepolitics \u002Fr\u002Ftruehub \u002Fr\u002Ftruegaming \u002Fr\u002Faskgames \u002Fr\u002Ffreegamesonandroid \u002Fr\u002Fandroidapps \u002Fr\u002Fapphookup \u002Fr\u002Fbrowsemyreddit \u002Fr\u002Ffindareddit \u002Fr\u002Ftrap \u002Fr\u002Fnaut \u002Fr\u002Fmilitaryfinance \u002Fr\u002Farmy \u002Fr\u002Fmilitarystories \u002Fr\u002Fnationalguard \u002Fr\u002Fuscg \u002Fr\u002Fusa \u002Fr\u002Fmurica \u002Fr\u002Flonestar \u002Fr\u002Fwhataburger \u002Fr\u002Ffastfood \u002Fr\u002Fcocacola \u002Fr\u002Fkelloggs \u002Fr\u002Fkellawwggs \u002Fr\u002Fawwducational \u002Fr\u002Fmarinebiologygifs \u002Fr\u002Fbiologygifs \u002Fr\u002Fchemicalreactiongifs \u002Fr\u002Fhomechemistry \u002Fr\u002Fholdmybeaker \u002Fr\u002Fholdmybeer \u002Fr\u002Fmovieoftheday \u002Fr\u002Fsharknado \u002Fr\u002Fsyfy \u002Fr\u002Fkilljoys \u002Fr\u002Ftheexpanse \u002Fr\u002Ftruedetective \u002Fr\u002Fboardwalkempire \u002Fr\u002Fmobcast \u002Fr\u002F1920s \u002Fr\u002F1960s \u002Fr\u002Fbeatles \u002Fr\u002Fminimaluminiumalism \u002Fr\u002Fghostsrights \u002Fr\u002Fbotsrights \u002Fr\u002Ftotallynotrobots \u002Fr\u002Frobotics \u002Fr\u002Fmanna \u002Fr\u002Fsingularity \u002Fr\u002Ffutureporn \u002Fr\u002Fsingularitarianism \u002Fr\u002Fautomate \u002Fr\u002Fdarkfuturology \u002Fr\u002Fcontrolproblem \u002Fr\u002Faiethics \u002Fr\u002Fainothuman \u002Fr\u002Fneuraljokes \u002Fr\u002F3amjokes \u002Fr\u002Fmommajokes \u002Fr\u002Fantijokes \u002Fr\u002Fabsolutelynotme_irl \u002Fr\u002Ftoomeirlformeirl \u002Fr\u002Fmeirl \u002Fr\u002Ftree_irl \u002Fr\u002Ffishpost \u002Fr\u002Fmod_irl \u002Fr\u002Fpics_irl \u002Fr\u002Fteleshits \u002Fr\u002Fbitstrips \u002Fr\u002Fstopbullyingcomics \u002Fr\u002Fanimalsbeingjerks \u002Fr\u002Fsurfinganimals \u002Fr\u002Funorthocat \u002Fr\u002Fcatsubs \u002Fr\u002Fstuffoncats \u002Fr\u002Fcatsinbusinessattire \u002Fr\u002Fcatsinsinks \u002Fr\u002Fcatsonkeyboards \u002Fr\u002Fmechanicalkeyboards \u002Fr\u002Fhackedgadgets \u002Fr\u002Ftechsupportmacgyver \u002Fr\u002Ftechsupport \u002Fr\u002Fprogramming \u002Fr\u002Falgorithms \u002Fr\u002Fdatamining \u002Fr\u002Fdatasets \u002Fr\u002Fwordcloud \u002Fr\u002Fdatavizrequests \u002Fr\u002Ffunnycharts \u002Fr\u002Fmapporn \u002Fr\u002Fmapmaking \u002Fr\u002Fworldbuilding \u002Fr\u002Fscificoncepts \u002Fr\u002Fapocalypseporn \u002Fr\u002Fimaginaryjerk \u002Fr\u002Fbraveryjerk \u002Fr\u002Fcirclejerk \u002Fr\u002Fpoliticaldiscussion \u002Fr\u002Fpoliticalfactchecking \u002Fr\u002Fmoderatepolitics \u002Fr\u002Ftruereddit \u002Fr\u002Fmalelifestyle \u002Fr\u002Ffitness \u002Fr\u002Fswimming \u002Fr\u002Ffreediving \u002Fr\u002Fbikeshop \u002Fr\u002Fclimbing \u002Fr\u002Fclimbharder \u002Fr\u002Fbouldering \u002Fr\u002Fclimbergirls \u002Fr\u002Fwomenshredders \u002Fr\u002Fskatergirls \u002Fr\u002Fgirlsurfers \u002Fr\u002Fkiteboarding \u002Fr\u002Flongboarding \u002Fr\u002Fstreetboarding \u002Fr\u002Fletsgosnowboarding \u002Fr\u002Fspliddit \u002Fr\u002Fbackcountry \u002Fr\u002Fwjdbbl2 \u002Fr\u002Fcaving \u002Fr\u002Fnationalparks \u002Fr\u002Fparkrangers \u002Fr\u002Fthesca \u002Fr\u002Fsearchandrescue \u002Fr\u002Fwildernessbackpacking \u002Fr\u002Fcampinggear \u002Fr\u002Fflashlight \u002Fr\u002Fcamping \u002Fr\u002Fyellowstone \u002Fr\u002Fwmnf \u002Fr\u002Fpacificcresttrail \u002Fr\u002Fcdt \u002Fr\u002Fultralight \u002Fr\u002Fbackpacking \u002Fr\u002Ftravelpartners \u002Fr\u002Fadventures \u002Fr\u002Flibraryofshadows \u002Fr\u002Fshortscarystories \u002Fr\u002Fshortscarystoriesooc \u002Fr\u002Fnosleepooc \u002Fr\u002Fnosleep"}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:an,props:{id:ab},children:[{type:b,tag:t,props:{href:"#centrality",ariaHidden:ao,tabIndex:ap},children:[{type:b,tag:c,props:{className:[aq,ar]},children:[]}]},{type:a,value:"Centrality"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Centrality is anohter important topic in graph theory. Here's a brief introduction to centrality from "},{type:b,tag:t,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FCentrality",rel:[u,v,w],target:x},children:[{type:a,value:"Wikipedia"}]},{type:a,value:B}]},{type:a,value:f},{type:b,tag:az,props:{},children:[{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"In graph theory and network analysis, indicators of centrality identify the most important vertices within a graph. Applications include identifying the most influential person(s) in a social network, key infrastructure nodes in the Internet or urban networks, and super-spreaders of disease."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"There are several different methods of measuring centrality in a graph. Here I use "},{type:b,tag:n,props:{},children:[{type:a,value:ck}]},{type:a,value:", a function included in NetworkX. It takes in a graph and returns a dictionary with graph nodes as keys and node centrality as values."}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"centrality "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:aU},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ck},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Let's see which subreddit has the highest centrality:"}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Q}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:aZ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aK},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:aZ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aK},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fimaginarybattlefields 0.0721530261127\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:a$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:cl},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:cb}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Since all of the centrality values are unique, we can look up nodes by their centrality values."}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"subr_list "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:W}]},{type:a,value:aY},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:S}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:"\n    subr_list"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bO},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:cm},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:a_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:a,value:cm},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n\nsorted_subr_list "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:" subr_list"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"sort"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"key"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cn}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:W}]},{type:a,value:aj},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:S}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:a$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:"subr_list"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aK},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:cn}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:"200"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Q}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fimaginarybattlefields \u002Fr\u002Fimaginarycityscapes \u002Fr\u002Fimaginarywastelands \u002Fr\u002Fimaginarywildlands \u002Fr\u002Fimaginaryleviathans \u002Fr\u002Fimaginarydragons \u002Fr\u002Fimaginarystarscapes \u002Fr\u002Fimaginarywesteros \u002Fr\u002Fimaginaryartifacts \u002Fr\u002Fimaginaryangels \u002Fr\u002Fimaginarymaps \u002Fr\u002Fimaginarybehemoths \u002Fr\u002Fimaginarydemons \u002Fr\u002Fimaginaryelves \u002Fr\u002Fimaginarycentaurs \u002Fr\u002Fimaginaryfuturewar \u002Fr\u002Fimaginarysoldiers \u002Fr\u002Fimaginaryhistory \u002Fr\u002Fimaginaryarmor \u002Fr\u002Fimaginarystarships \u002Fr\u002Fimaginarynetwork \u002Fr\u002Fimaginaryjedi \u002Fr\u002Fimaginarydinosaurs \u002Fr\u002Fimaginarysteampunk \u002Fr\u002Fimaginarycyberpunk \u002Fr\u002Fimaginaryarchers \u002Fr\u002Fimaginaryvehicles \u002Fr\u002Fimaginaryanime \u002Fr\u002Fimaginaryfallout \u002Fr\u002Fimaginaryastronauts \u002Fr\u002Fimaginarymusic \u002Fr\u002Fimaginaryfactories \u002Fr\u002Fimaginaryequestria \u002Fr\u002Fimaginarywarships \u002Fr\u002Fimaginaryazeroth \u002Fr\u002Fimaginaryarrakis \u002Fr\u002Fimaginarydisney \u002Fr\u002Fimaginarypolitics \u002Fr\u002Fimaginaryhorrors \u002Fr\u002Fimaginarywinterscapes \u002Fr\u002Fimaginaryseascapes \u002Fr\u002Fimaginarypirates \u002Fr\u002Fimaginarywarriors \u002Fr\u002Fimaginarymiddleearth \u002Fr\u002Fimaginarygallifrey \u002Fr\u002Fimaginarymechs \u002Fr\u002Fimaginarypropaganda \u002Fr\u002Fimaginarymerfolk \u002Fr\u002Fimaginaryvikings \u002Fr\u002Fimaginaryundead \u002Fr\u002Fimaginarybeasts \u002Fr\u002Fimaginarymutants \u002Fr\u002Fimaginaryruins \u002Fr\u002Fimaginarytamriel \u002Fr\u002Fimaginaryforests \u002Fr\u002Fimaginaryelementals \u002Fr\u002Fimaginaryskyscapes \u002Fr\u002Fimaginarymonuments \u002Fr\u002Fimaginarywaterfalls \u002Fr\u002Fimaginaryworlds \u002Fr\u002Fimaginarywizards \u002Fr\u002Fimaginaryinteriors \u002Fr\u002Fimaginaryhogwarts \u002Fr\u002Fimaginarytowers \u002Fr\u002Fimaginaryarchitecture \u002Fr\u002Fimaginaryweaponry \u002Fr\u002Fimaginarygaming \u002Fr\u002Fimaginarycastles \u002Fr\u002Fimaginaryrobotics \u002Fr\u002Fimaginarybooks \u002Fr\u002Fimaginarygnomes \u002Fr\u002Fimaginaryvillages \u002Fr\u002Fimaginarydeserts \u002Fr\u002Fimaginarywerewolves \u002Fr\u002Fimaginarydieselpunk \u002Fr\u002Fimaginaryvampires \u002Fr\u002Fimaginaryadrenaline \u002Fr\u002Fimaginarykanto \u002Fr\u002Fimaginarynatives \u002Fr\u002Fimaginaryrivers \u002Fr\u002Fimaginarytemples \u002Fr\u002Fimaginaryassassins \u002Fr\u002Fimaginaryvolcanoes \u002Fr\u002Fimaginaryclerics \u002Fr\u002Fimaginaryprisons \u002Fr\u002Fimaginarygiants \u002Fr\u002Fimaginarycowboys \u002Fr\u002Fimaginaryhumans \u002Fr\u002Fimaginarydwarves \u002Fr\u002Fimaginarycaves \u002Fr\u002Fimaginarytrolls \u002Fr\u002Fimaginarywalls \u002Fr\u002Fimaginarylakes \u002Fr\u002Fimaginarywitches \u002Fr\u002Fimaginaryorcs \u002Fr\u002Fimaginarycanyons \u002Fr\u002Fimaginaryasylums \u002Fr\u002Fimaginaryimmortals \u002Fr\u002Fimaginaryaliens \u002Fr\u002Fimaginarynobles \u002Fr\u002Fimaginaryspirits \u002Fr\u002Fimaginaryaetherpunk \u002Fr\u002Fimaginarytrees \u002Fr\u002Fimaginaryislands \u002Fr\u002Fimaginaryninjas \u002Fr\u002Fimaginaryscience \u002Fr\u002Fimaginarymountains \u002Fr\u002Fimaginaryknights \u002Fr\u002Fimaginarygoblins \u002Fr\u002Fimaginaryfaeries \u002Fr\u002Fimaginarygotham \u002Fr\u002Fimaginarycybernetics \u002Fr\u002Fimaginaryooo \u002Fr\u002Fimaginaryderelicts \u002Fr\u002Fimaginaryfood \u002Fr\u002Fimaginaryworldeaters \u002Fr\u002Fimaginarymindscapes \u002Fr\u002Fimaginaryaww \u002Fr\u002Fimaginarymarvel \u002Fr\u002Fimaginaryweather \u002Fr\u002Fimaginarynewnewyork \u002Fr\u002Fimaginaryspidey \u002Fr\u002Fimaginaryautumnscapes \u002Fr\u002Fimaginarywarhammer \u002Fr\u002Fimaginaryfeels \u002Fr\u002Fimaginarywitcher \u002Fr\u002Fimaginaryvessels \u002Fr\u002Fimaginarytaverns \u002Fr\u002Fimaginarybestof \u002Fr\u002Fimaginaryairships \u002Fr\u002Fimaginaryportals \u002Fr\u002Fimaginaryfashion \u002Fr\u002Fimaginarylovers \u002Fr\u002Fimaginarydc \u002Fr\u002Fimaginaryanimals \u002Fr\u002Fimaginaryhellscapes \u002Fr\u002Fimaginarycolorscapes \u002Fr\u002Fimaginarymonstergirls \u002Fr\u002Fimaginaryswamps \u002Fr\u002Fimaginarymythology \u002Fr\u002Fimaginaryscholars \u002Fr\u002Fimaginaryladyboners \u002Fr\u002Fimaginaryfuturism \u002Fr\u002Fimaginaryaviation \u002Fr\u002Fimaginarypathways \u002Fr\u002Fimaginarygatherings \u002Fr\u002Fimaginarybodyscapes \u002Fr\u002Fimaginaryoverwatch \u002Fr\u002Fimaginarydwellings \u002Fr\u002Fimaginarystephenking \u002Fr\u002Fspecart \u002Fr\u002Finegentlemanboners \u002Fr\u002Fcomicbookart \u002Fr\u002Fimaginarymasseffect \u002Fr\u002Fimaginaryhalo \u002Fr\u002Fimaginaryjerk \u002Fr\u002Fbackgroundart \u002Fr\u002Ffutureporn \u002Fr\u002Fimaginarywallpapers \u002Fr\u002Fimaginaryfamilies \u002Fr\u002Fimaginarylibraries \u002Fr\u002Fimaginaryturtleworlds \u002Fr\u002Fimaginarydesigns \u002Fr\u002Fwallpapers \u002Fr\u002Fapocalypseporn \u002Fr\u002Fcomicbookporn \u002Fr\u002Fisometric \u002Fr\u002Fimaginarybakerst \u002Fr\u002Fimaginaryverse \u002Fr\u002Fimaginarysunnydale \u002Fr\u002Fimaginaryfederation \u002Fr\u002Fimaginarysanctuary \u002Fr\u002Fstarshipporn \u002Fr\u002Fimaginarystarcraft \u002Fr\u002Fimaginaryoldkingdom \u002Fr\u002Fimaginarynarnia \u002Fr\u002Fimaginarycybertron \u002Fr\u002Fgameworlds \u002Fr\u002Fimaginarycarnage \u002Fr\u002Fimaginaryboners \u002Fr\u002Ficandrawthat \u002Fr\u002Fimaginarycosmere \u002Fr\u002Fimaginaryaperture \u002Fr\u002Farmoredwomen \u002Fr\u002Fimaginarywtf \u002Fr\u002Funusualart \u002Fr\u002Fimaginaryblueprints \u002Fr\u002Falternativeart \u002Fr\u002Fsympatheticmonsters \u002Fr\u002Fadorabledragons \u002Fr\u002Fimaginarysummerscapes \u002Fr\u002Fimaginarygayboners \u002Fr\u002Fimaginarystash \u002Fr\u002Fartistoftheday \u002Fr\u002Fimaginaryglaciers \u002Fr\u002Fimaginaryhybrids \u002Fr\u002Fimaginaryadventurers \u002Fr\u002Fimaginarymetropolis \u002Fr\u002Fcraftsoficeandfire \u002Fr\u002Fpopartnouveau\n"}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"There seems to be a network of \"imaginary\" subreddits that have the highest centrality. The members of this network probably all link to themselves as well as many other subreddits as the \"imaginary\" topics span a wide range content. This network may be drowning out other nodes that would otherwise have a high centrality relative to the rest of the subreddits. It might be interesting to eliminate these nodes from the graph and recalculate centrality. Let's look at the distribution of centrality values:"}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"_ "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:a$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:cl},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:ba},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:b,tag:c,props:{className:[d,J]},children:[{type:a,value:"1000"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bU},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'Subreddit Centrality (top 1000)'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bV},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'Rank'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bW},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'Centrality'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:bX},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bY},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:aN},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aO},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'~\u002FDocuments\u002FGitHub\u002Fbriancaffey.github.io\u002Fimg\u002Fsubreddit_graph\u002Fcentrality.png'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:b,tag:bZ,props:{alt:b_,src:"\u002Fimg\u002Fsubreddit_graph\u002Fcentrality.png"},children:[]}]},{type:a,value:f},{type:b,tag:an,props:{id:"connectedness"},children:[{type:b,tag:t,props:{href:"#connectedness",ariaHidden:ao,tabIndex:ap},children:[{type:b,tag:c,props:{className:[aq,ar]},children:[]}]},{type:a,value:"Connectedness"}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Let's take a look at the graph as a whole. One thing I'm not sure of is whether or not the entire graph is connected. This means that any node can be reached from any other node. Since we constructed the graph from 49 unrelated nodes, it is possible that the graph is unconnected. This would mean that one or more of the default subreddits and its subreddits is not connected with the rest of the graph. In searching for the shortest path I did not come across any pairs of nodes that did not have a path between themselves. I wouldn't be surprised if there are a handful of nodes that stand on their own."}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,D]},children:[{type:a,value:"#size of graph: nodes and edges (or, subreddits and connecting links)"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Q}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"\"Our graph has \""}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:co},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"' nodes and '"}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"number_of_edges"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"' edges.'"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"Our graph has 29854 nodes and 149491 edges.\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Q}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"\"True of False: our graph is connected... \""}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"is_connected"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'!'"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"True of False: our graph is connected... False!\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"Gc "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:aZ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"connected_component_subgraphs"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:aK},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Q}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"\"The largest connected component subgraph has \""}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:co},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:cp},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"\" nodes. \""}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"The largest connected component subgraph has 29840 nodes.\n"}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"There are 14 nodes that are not connected to the main connected component. Let's list them."}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:W}]},{type:a,value:aj},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:S}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:bq}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:aM}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:cq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:U},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:cr},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:cs},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:bG}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,H]},children:[{type:a,value:aM}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:cq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:a,value:cp},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:cr},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,T]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:cs},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Q}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:y}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"\u002Fr\u002Fspacediscussions \u002Fr\u002Fwtfit.gif \u002Fr\u002Fspace. \u002Fr\u002Fsubreddit_graph \u002Fr\u002Fvidalia \u002Fr\u002Flistentothis. \u002Fr\u002Fhistory. \u002Fr\u002Fall. \u002Fr\u002Fghostdriver \u002Fr\u002Fpersonalfinance. \u002Fr\u002Ftoombscounty \u002Fr\u002Fgaming \u002Fr\u002Fscience \u002Fr\u002Fbooks.\n"}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"Some of the large communities on reddit include \u002Fr\u002Fbooks, \u002Fr\u002Fgaming and \u002Fr\u002Fscience. These subreddits list related subreddits on separate wiki pages since there are many related subreddits for each one. They were most likely all captured in the subsequent levels of the graph, but they also did not link back to \u002Fr\u002Fscience. Here's an example:"}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:W}]},{type:a,value:aj},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:S}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"loc"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:E}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:ak},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"'\u002Fr\u002Fphysics'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:aR},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:B}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:Q}]},{type:a,value:" x\n"}]}]}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,I]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"['\u002Fr\u002Fphysicsjokes', '\u002Fr\u002Fgradadmissions', '\u002Fr\u002Fhomeworkhelp', '\u002Fr\u002Fscienceimages', '\u002Fr\u002Faskacademia', '\u002Fr\u002Fphysicsgifs', '\u002Fr\u002Fphysicsstudents', '\u002Fr\u002Fgradschool', '\u002Fr\u002Faskphysics', '\u002Fr\u002Fphysics']\n"}]}]}]},{type:a,value:f},{type:b,tag:C,props:{},children:[{type:a,value:"I've got some additional ideas to explore in another post on this topic, such as finding cliques and maximual cliques, and doing graph visualizations with D3.js. If you are interested in playing with the data, you can clone "},{type:b,tag:t,props:{href:"https:\u002F\u002Fgithub.com\u002Fbriancaffey\u002Freddit-graph-analysis",rel:[u,v,w],target:x},children:[{type:a,value:"my GitHub repo"}]},{type:a,value:" and load the pickled DataFrames like this:"}]},{type:a,value:f},{type:b,tag:p,props:{className:[q]},children:[{type:b,tag:r,props:{className:[s,A]},children:[{type:b,tag:n,props:{},children:[{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:a,value:aQ},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:X}]},{type:a,value:" pd\ndf "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:l}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:bP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:g}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bQ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:f}]}]}]}]},dir:"\u002F2017\u002F03\u002F03",path:"\u002F2017\u002F03\u002F03\u002Fgraph_subreddit.html",extension:".md",createdAt:ct,updatedAt:ct,raw:"\n# Graphing Subreddits\n\nThis notebook explores some basic concepts of graph theory. A few weeks ago I set up a script to scrape data from [reddit.com](reddit.com) with the goal of visualizing the network of related subreddits (forums on specific topics) and related data.\n\nReddit is home over 600,000 communities, known as subreddits, where people come to share information, opinions, links, etc. and discuss things in a open forum. Most subreddits display links to related subreddits. For example, \u002Fr\u002Fapple (the Apple subreddit) links to \u002Fr\u002FiPhone, a subreddit all about the iPhone, and over a dozen other Apple-related subreddits.\n\nIf you visit reddit.com as a guest, you will see a list of popular subreddits. This list is located inside an `html` tag called `drop-choices`. Here it is:\n\n```python\nfrom selenium import webdriver\nimport re\nimport time\nimport numpy as np\nfrom bs4 import BeautifulSoup\n```\n\n```python\ndriver = webdriver.PhantomJS()\ndriver.get('https:\u002F\u002Fwww.reddit.com\u002F')\ntime.sleep(4 + np.random.random())\nhtml = driver.page_source.encode('utf-8')\n\ns = BeautifulSoup(html)\ndefaults = s.find('div', attrs={'class':'drop-choices'})\nsubs = re.compile(r\"\\\u002Fr\\\u002F[\\w.]+\\\u002F?\")\ndefault_subreddits = list(set(subs.findall(str(defaults))))\n\nfor x in default_subreddits: print '[' + x + '](https:\u002F\u002Freddit.com'+ x + '), ',\n```\n\nHere are the elements of `default_subreddits`:\n\n\u003E [\u002Fr\u002FLifeProTips\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FLifeProTips\u002F), [\u002Fr\u002FFuturology\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FFuturology\u002F), [\u002Fr\u002FOldSchoolCool\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FOldSchoolCool\u002F), [\u002Fr\u002Fmildlyinteresting\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fmildlyinteresting\u002F), [\u002Fr\u002Faskscience\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Faskscience\u002F), [\u002Fr\u002FUpliftingNews\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FUpliftingNews\u002F), [\u002Fr\u002Faww\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Faww\u002F), [\u002Fr\u002FGetMotivated\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FGetMotivated\u002F), [\u002Fr\u002Fpersonalfinance\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fpersonalfinance\u002F), [\u002Fr\u002Fgadgets\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fgadgets\u002F), [\u002Fr\u002Fscience\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fscience\u002F), [\u002Fr\u002Fdataisbeautiful\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fdataisbeautiful\u002F), [\u002Fr\u002FDIY\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FDIY\u002F), [\u002Fr\u002FAskReddit\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FAskReddit\u002F), [\u002Fr\u002Fspace\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fspace\u002F), [\u002Fr\u002Fnosleep\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fnosleep\u002F), [\u002Fr\u002FDocumentaries\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FDocumentaries\u002F), [\u002Fr\u002Ftodayilearned\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Ftodayilearned\u002F), [\u002Fr\u002Ftelevision\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Ftelevision\u002F), [\u002Fr\u002FIAmA\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FIAmA\u002F), [\u002Fr\u002FArt\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FArt\u002F), [\u002Fr\u002FEarthPorn\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FEarthPorn\u002F), [\u002Fr\u002Fbooks\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fbooks\u002F), [\u002Fr\u002Fgifs\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fgifs\u002F), [\u002Fr\u002FShowerthoughts\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FShowerthoughts\u002F), [\u002Fr\u002Fblog\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fblog\u002F), [\u002Fr\u002Fnews\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fnews\u002F), [\u002Fr\u002FJokes\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FJokes\u002F), [\u002Fr\u002FTwoXChromosomes\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FTwoXChromosomes\u002F), [\u002Fr\u002Fvideos\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fvideos\u002F), [\u002Fr\u002Fphilosophy\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fphilosophy\u002F), [\u002Fr\u002Fnottheonion\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fnottheonion\u002F), [\u002Fr\u002Fexplainlikeimfive\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fexplainlikeimfive\u002F), [\u002Fr\u002Fmovies\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fmovies\u002F), [\u002Fr\u002FMusic\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FMusic\u002F), [\u002Fr\u002FWritingPrompts\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FWritingPrompts\u002F), [\u002Fr\u002Fworldnews\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fworldnews\u002F), [\u002Fr\u002Fpics\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fpics\u002F), [\u002Fr\u002Fhistory\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fhistory\u002F), [\u002Fr\u002Flistentothis\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Flistentothis\u002F), [\u002Fr\u002Fsports\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fsports\u002F), [\u002Fr\u002Ffood\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Ffood\u002F), [\u002Fr\u002Fcreepy\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fcreepy\u002F), [\u002Fr\u002Fannouncements\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fannouncements\u002F), [\u002Fr\u002Fgaming\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fgaming\u002F), [\u002Fr\u002Ftifu\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Ftifu\u002F), [\u002Fr\u002Ffunny\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Ffunny\u002F), [\u002Fr\u002Fphotoshopbattles\u002F](https:\u002F\u002Freddit.com\u002Fr\u002Fphotoshopbattles\u002F), [\u002Fr\u002FInternetIsBeautiful\u002F](https:\u002F\u002Freddit.com\u002Fr\u002FInternetIsBeautiful\u002F),\n\nMy goal here is to see how many subreddits we can reach as we branch off of these \"default\" subreddits into their related subreddits.\n\nFirst, we need to set up data structures to hold data for subreddits and their related subreddits. And we need to define an algorithm for collecting data.\n\nHere's an intrdoduction to graphs from [python.org](https:\u002F\u002Fwww.python.org\u002Fdoc\u002Fessays\u002Fgraphs\u002F):\n\n\u003E Few programming languages provide direct support for graphs as a data type, and Python is no exception. However, graphs are easily built out of lists and dictionaries. For instance, here's a simple graph (I can't use drawings in these columns, so I write down the graph's arcs):\n\n```text\nA -\u003E B\nA -\u003E C\nB -\u003E C\nB -\u003E D\nC -\u003E D\nD -\u003E C\nE -\u003E F\nF -\u003E C\n```\n\nThis graph has six nodes (A-F) and eight arcs. It can be represented by the following Python data structure:\n\n```text\ngraph =     {'A': ['B', 'C'],\n             'B': ['C', 'D'],\n             'C': ['D'],\n             'D': ['C'],\n             'E': ['F'],\n             'F': ['C']}\n```\n\nFirst let's define how we would go only one branch deep into this graph (i.e. find the related subreddits for _only_ the default subreddits). To collect the data, I first looped through the default subreddits and save the html of each subreddit to its own text file. Here's a script with comments:\n\n```python\n#first we navigate to the correct folder where we will store the first level of related subreddits\nos.chdir(os.path.expanduser('~\u002FDocuments\u002FProjects\u002FData\u002FSubreddits\u002Fone\u002F'))\n\n#next we instantiate the webdriver we will be using: PhantomJS\ndriver = webdriver.PhantomJS()\n\n#loop through the list of default subreddits\nfor num, subreddit in enumerate(default_subreddits):\n\n    #for each subreddit, we append the \u002Fr\u002Fsubreddit path to the base URL (reddit.com)\n    driver.get('https:\u002F\u002Fwww.reddit.com'+subreddit)\n\n    #wait for two seconds\n    time.sleep(2 + np.random.random())\n\n    #save the html of the loaded page to a variable: html\n    html = driver.page_source.encode('utf-8')\n\n    #remove '\u002Fr\u002F' from the subreddit name string\n    name = subreddit.split('\u002F')[2]\n\n    #open a new file and give it the name of the subreddit we just scraped\n    subreddit_html_file = open(name+'.txt', 'w+')\n\n    #write the html contents to the file\n    subreddit_html_file.write(html)\n\n    #clost the file\n    subreddit_html_file.close()\n\n    #print out the number and name of the subreddit we just scrapped to make sure things are working\n    print str(num) + ' ' + subreddit,\n\n```\n\nNext, we want to go through each file and extract the information we want. Here's what we will be getting:\n\n- Number of subscribers\n- Subreddit description\n- Date created\n- Related subreddits\n\nFor this type of project, I prefer to loop through each page and creating several small dictionaries for each data point, then combine the small dictionaries into a large dictionary, and then append the dictionary to a list of dictionaries. Once I have looped through all of the pages, I can create a pandas DataFrame from the list of dictionaries. This allows me to easily manipulate the data. Here's the script that I used to do this:\n\n```python\n#navigate to where the html files are stored (I moved them around a bit so it is not consistent with the script above)\nos.chdir('E:\u002F\u002FDATA\u002FSubreddits\u002Fsubreddits_html\u002F')\n\n#generate a list of files that we will loop through\nfiles = os.listdir('E:\u002F\u002FDATA\u002FSubreddits\u002Fsubreddits_html\u002F')\n\n#set up an empty list that we will append dictionaries to\ndict_list = []\n\n#loop through the files\nfor file_ in files:\n\n    #print out the name of the current file in the loop\n    print file_,\n\n    #open the file\n    f = open(file_, 'r')\n    #read the file contents to a local variable\n    html = f.read()\n    #create a BeautifulSoup object that we will use to parse the HTML\n    b = BeautifulSoup(html, 'lxml')\n\n    #get the subreddit name that we are working with (from the `file` variable)\n    subreddit_name = '\u002Fr\u002F' + file_[:-4].lower()\n    #put the name into a dictionary\n    subreddit_name_dict = {'subreddit':subreddit_name}\n\n    #get number of subscribers\n    subs = b.find('span', attrs={'class':'subscribers'})\n    #if the number of subscribers is displayed on the page, then we find it and add it to a dictionary\n    if subs:\n        subs = b.find('span', attrs={'class':'subscribers'}).find('span', attrs={'class':'number'}).text.replace(',', '')\n        subs_dict = {'subscribers':int(subs)}\n    #if the number of subscribers is not displayed on the page, then we set the number of subscribers in the dictionary to None\n    else:\n        subs_dict = {'subscribers':None}\n\n    #similar process for the description: if the description is displayed, get it and save it to desc\n    #if it is not available, then desc will be set to `None`\n    desc = b.find('div', attrs={'class':'md'})\n    if desc:\n        desc = b.find('div', attrs={'class':'md'}).text\n        desc = desc.replace('\\n', ' ')\n    desc_dict = {'description':desc}\n\n    #here we use regular expressions to find links anywhere on the page that have the structure: \"\u002Fr\u002Fsomething\u002F\"\n    rel_subr = re.compile(r\"\\\u002Fr\\\u002F[\\w.]+\\\u002F?\")\n    #make a list of these links based on the \"\u002Fr\u002Fsomething\u002F\" pattern\n    related_subreddits = rel_subr.findall(html)\n\n    #save the list to a dictionary\n    subreddits_dict = {'related':related_subreddits}\n\n    #same processes for recording the date that the subreddit was created: get the date from an HTML element,\n    #then save it to a dictionary. There were two different formats available in the HTML so I grabbed both\n    age = b.find('span', attrs={'class':'age'})\n    if age:\n        time1 = age.find('time')['title']\n        time2 = age.find('time')['datetime']\n\n    #save the date to a dictionary\n    time_dict = {\"date1\":time1, \"date2\":time2}\n\n    #take all the dictionaries we just created and put them together into one big dictionary\n    dictionary = dict(subs_dict.items()+desc_dict.items()+subreddits_dict.items()+subreddit_name_dict.items()+time_dict.items())\n\n    #append the big dictionary to the list that we defined right before the beginning of the loop\n    dict_list.append(dictionary)\n\n    #deconstruct the Beautiful Soup object (this can eat up memory very quickly, so it is very important when processing lots of data)\n    b.decompose()\n\n    #clost the file\n    f.close()\n```\n\nNext, let's save the results into a csv file. This let's us load the results quickly without having to scrape everyting again. To do this we can use the pandas library.\n\n```python\nimport pandas as pd\ndf0 = pd.DataFrame(dict_list, index=None)\n```\n\nAt this point, we can go through the `related` column in the DataFrame and put together a list of all the related subreddits. With this list, we can simply repeat the process over and over again. However, each time we start with a new list of subreddits, we want to make sure that they have not already been collected.\n\nNext I will read in one DataFrame that represents related subreddits \"three levels deep\" relative to the default subreddits.\n\n**Default --\u003E Related --\u003E Related --\u003E Related**\n\nThis DataFrame represents the collection of subreddits from all of these \"layers\" of the graph.\n\n```python\nimport pandas as pd\nmaster_df = pd.read_pickle('pickle\u002Fmaster_df.p')\n```\n\nNow we can do a quick visualization of the growth in number of subreddits since the website's start in 2005.\n\n```python\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nmaster_df_ = master_df[master_df.notnull()]\nmaster_df_.date1 = pd.to_datetime(master_df_['date1'])\n\nlist_of_dates = master_df_.date1.sort_values()\n\ncounts = np.arange(0, len(list_of_dates))\n_ = plt.plot(list_of_dates, counts)\n_ = plt.title('Number of subreddits over time')\n_ = plt.xlabel('Date')\n_ = plt.ylabel('Cummulative Count')\nplt.savefig(os.path.expanduser('~\u002FDocuments\u002FGitHub\u002Fbriancaffey.github.io\u002Fimg\u002Fsubreddit_graph\u002Fsubreddits_count.png'))\n```\n\n![png](\u002Fimg\u002Fsubreddit_graph\u002Fsubreddits_count.png)\n\n# Setting up a graph with NetworkX\n\nNext we can start to look at the collection of reddits and related subreddits as a graph. I will be using a Python package for network and graph analysis called [NetworkX](https:\u002F\u002Fnetworkx.github.io).\n\n```python\n#Let's make sure that we have only unique entries in the dataframe.\nmaster_df_u = master_df_.drop_duplicates('subreddit')\n```\n\n```python\nmaster_df_u = master_df_u.drop(master_df_u.index[master_df_u.subreddit=='\u002Fr\u002Ftrack__subreddits_'])\n```\n\n```python\n#here we define a dictionary where the keys are subreddits and the values are lists of related subreddits\ngraph = {x:y for x, y in zip(master_df_u.subreddit, master_df_u.related)}\n```\n\n```python\n#NetworkX comes with the python Anaconda distribution\nimport networkx as nx\n```\n\n```python\nG=nx.Graph()\nG=nx.from_dict_of_lists(graph)\n#making the graph undirected takes all of the vertices between nodes and makes them bi-directional\nG1 = G.to_undirected()\n```\n\n```python\nchoice = np.random.choice(master_df_u.subreddit, 2)\nprint choice\n```\n\n    ['\u002Fr\u002Fstreetboarding' '\u002Fr\u002Fstephenking']\n\nLet's test out some of the functions from NetworkX for graph analysis. First, let's take the two randomly selected nodes defined above and test to see if there exists a path between them:\n\n```python\nnx.has_path(G1, choice[0], choice[1])\n```\n\n    True\n\n# Shortest path\n\nNow let's see (at least one of) the shortest path that exists between these nodes:\n\n```python\nnx.shortest_path(G1, choice[0], choice[1])\n```\n\n    ['\u002Fr\u002Fstreetboarding',\n     '\u002Fr\u002Ffreebord',\n     '\u002Fr\u002Fadrenaline',\n     '\u002Fr\u002Fimaginaryadrenaline',\n     '\u002Fr\u002Fimaginarystephenking',\n     '\u002Fr\u002Fstephenking']\n\nLet's write a function that selects two random subreddits and then prints a shortest path if it exists:\n\n```python\ndef short_path():\n    choices = np.random.choice(master_df_u.subreddit, 2)\n    if nx.has_path(G1, choices[0], choices[1]) == True:\n        path = nx.shortest_path(G1, choices[0], choices[1])\n        print choices[0] + ' and ' + choices[1] + ' are joined by: \\n' + str(path)\n    else:\n        print \"No path exists between \" + choices[0] + ' and ' + choices[1]\n```\n\nHere's a collection of results from the `short_path` function defined above that start to paint a picuture of the broad set of topics covered by reddit.com:\n\n```python\nshort_path()\n```\n\n    \u002Fr\u002Fpersonalizationadvice and \u002Fr\u002Fbeautifulfemales are joined by:\n    ['\u002Fr\u002Fpersonalizationadvice', '\u002Fr\u002Fcoloranalysis', '\u002Fr\u002Ffashion', '\u002Fr\u002Fredcarpet', '\u002Fr\u002Fgentlemanboners', '\u002Fr\u002Fbeautifulfemales']\n\n```python\nshort_path()\n```\n\n    \u002Fr\u002Fcaffeine and \u002Fr\u002Fshittyramen are joined by:\n    ['\u002Fr\u002Fcaffeine', '\u002Fr\u002Ftoast', '\u002Fr\u002Fcooking', '\u002Fr\u002Framen', '\u002Fr\u002Fshittyramen']\n\n```python\nshort_path()\n```\n\n    \u002Fr\u002Fwatchingcongress and \u002Fr\u002Fiwantthatonashirt are joined by:\n    ['\u002Fr\u002Fwatchingcongress', '\u002Fr\u002Fstand', '\u002Fr\u002Fsnowden', '\u002Fr\u002Fundelete', '\u002Fr\u002Ftrees', '\u002Fr\u002Fiwantthatonashirt']\n\n```python\nshort_path()\n```\n\n    \u002Fr\u002Fasksciencediscussion and \u002Fr\u002Fdogsonhardwoodfloors are joined by:\n    ['\u002Fr\u002Fasksciencediscussion', '\u002Fr\u002Fbadscience', '\u002Fr\u002Fbadlinguistics', '\u002Fr\u002Fanimalsbeingjerks', '\u002Fr\u002Fstartledcats', '\u002Fr\u002Fdogsonhardwoodfloors']\n\n```python\nshort_path()\n```\n\n    \u002Fr\u002Frandommail and \u002Fr\u002Fmini are joined by:\n    ['\u002Fr\u002Frandommail', '\u002Fr\u002Fspiceexchange', '\u002Fr\u002Fcameraswapping', '\u002Fr\u002Fitookapicture', '\u002Fr\u002Fcarporn', '\u002Fr\u002Fmini']\n\n```python\nshort_path()\n```\n\n    \u002Fr\u002Fcatsinsinks and \u002Fr\u002Fnzmovies are joined by:\n    ['\u002Fr\u002Fcatsinsinks', '\u002Fr\u002Fwetcats', '\u002Fr\u002Ftinysubredditoftheday', '\u002Fr\u002Fsheep', '\u002Fr\u002Fnzmetahub', '\u002Fr\u002Fnzmovies']\n\n```python\nshort_path()\n```\n\n    \u002Fr\u002Fthoriumreactor and \u002Fr\u002Fsailing are joined by:\n    ['\u002Fr\u002Fthoriumreactor', '\u002Fr\u002Fenergy', '\u002Fr\u002Fspev', '\u002Fr\u002Fsailing']\n\n```python\nshort_path()\n```\n\n    \u002Fr\u002Fdeathnote and \u002Fr\u002Fvegetarianism are joined by:\n    ['\u002Fr\u002Fdeathnote', '\u002Fr\u002Ftelevision', '\u002Fr\u002Fnetflixbestof', '\u002Fr\u002Fnaturefilms', '\u002Fr\u002Fenvironment', '\u002Fr\u002Fvegetarianism']\n\n```python\nshort_path()\n```\n\n    \u002Fr\u002Fmississippir4r and \u002Fr\u002Fmathematics are joined by:\n    ['\u002Fr\u002Fmississippir4r', '\u002Fr\u002Fmississippi', '\u002Fr\u002Fprisonreform', '\u002Fr\u002Fsocialscience', '\u002Fr\u002Falltech', '\u002Fr\u002Fmathematics']\n\n```python\nshort_path()\n```\n\n    \u002Fr\u002Fbritainsgottalent and \u002Fr\u002Firelandbaldwin are joined by:\n    ['\u002Fr\u002Fbritainsgottalent', '\u002Fr\u002Fbritishtv', '\u002Fr\u002Fthat70sshow', '\u002Fr\u002Fmila_kunis', '\u002Fr\u002Fchristinaricci', '\u002Fr\u002Firelandbaldwin']\n\n```python\nshort_path()\n```\n\n    \u002Fr\u002Fthe_donald and \u002Fr\u002Fladybusiness are joined by:\n    ['\u002Fr\u002Fthe_donald', '\u002Fr\u002Fshitliberalssay', '\u002Fr\u002Ftrollxchromosomes', '\u002Fr\u002Fladybusiness']\n\n```python\nshort_path()\n```\n\n    \u002Fr\u002Fselfharm and \u002Fr\u002Fmedlabprofessionals are joined by:\n    ['\u002Fr\u002Fselfharm', '\u002Fr\u002Fadhd', '\u002Fr\u002Fneuroimaging', '\u002Fr\u002Fpharmacy', '\u002Fr\u002Fmedlabprofessionals']\n\n```python\nshort_path()\n```\n\n    \u002Fr\u002Fcoverart and \u002Fr\u002Fphillycraftbeer are joined by:\n    ['\u002Fr\u002Fcoverart', '\u002Fr\u002Fnostalgia', '\u002Fr\u002Fupvotedbecausegirl', '\u002Fr\u002Fwtf', '\u002Fr\u002Fremindsmeofdf', '\u002Fr\u002Fbeer', '\u002Fr\u002Fphillycraftbeer']\n\n```python\nshort_path()\n```\n\n    \u002Fr\u002Fhotguyswithlonghair and \u002Fr\u002Fcastles are joined by:\n    ['\u002Fr\u002Fhotguyswithlonghair', '\u002Fr\u002Fmajesticmanes', '\u002Fr\u002Fladyboners', '\u002Fr\u002Fimaginaryladyboners', '\u002Fr\u002Fimaginarycastles', '\u002Fr\u002Fcastles']\n\nTaking a look [under the hood](http:\u002F\u002Fnetworkx.readthedocs.io\u002Fen\u002Fnetworkx-1.11\u002F_modules\u002Fnetworkx\u002Falgorithms\u002Fshortest_paths\u002Funweighted.html?highlight=bidirectional_shortest_path) of NetworkX and examining the algorith that finds the [shortest path](http:\u002F\u002Fnetworkx.readthedocs.io\u002Fen\u002Fnetworkx-1.11\u002F_modules\u002Fnetworkx\u002Falgorithms\u002Fshortest_paths\u002Fgeneric.html#shortest_path) between any two nodes in a graph, we find that it simply boils down to:\n\n```\ndef shortest_path(G, source=None, target=None, weight=None):\n    paths=nx.bidirectional_shortest_path(G,source,target)\n    return paths\n```\n\nYou can read more about the `bidirectional_shortest_path` function [here](http:\u002F\u002Fnetworkx.readthedocs.io\u002Fen\u002Fnetworkx-1.11\u002F_modules\u002Fnetworkx\u002Falgorithms\u002Fshortest_paths\u002Funweighted.html?highlight=bidirectional_shortest_path) in the NetworkX documentation.\n\nWhen I was first experimenting with graph algorithms, I had an interesting result using an algorithm intruduced [here](https:\u002F\u002Fwww.python.org\u002Fdoc\u002Fessays\u002Fgraphs\u002F) in the Python documentation. Here's the algorithm:\n\n```python\ndef find_path(graph, start, end, path=[]):\n    path = path + [start]\n    if start == end:\n        return path\n    if not graph.has_key(start):\n        return None\n    for node in graph[start]:\n        if node not in path:\n            newpath = find_path(graph, node, end, path)\n            if newpath: return newpath\n    return None\n```\n\nThe above algorthim uses a process called backtracking to exaustively try all possibilities until it returns a solution. It creates an interesting \"random walk\" through groups of related subreddits. Here's the result of calling the above function on our graph (only 2 layers deep) with two random nodes: \u002Fr\u002Fpersianrap and \u002Fr\u002Fnosleep:\n\n\u003E \u002Fr\u002Fpersianrap \u002Fr\u002Fmiddleeasternmusic \u002Fr\u002Farabic \u002Fr\u002Farabs \u002Fr\u002Flibyancrisis \u002Fr\u002Fsyriancivilwar \u002Fr\u002Fyemenicrisis \u002Fr\u002Fsinaiinsurgency \u002Fr\u002Fjihadinfocus \u002Fr\u002Fcredibledefense \u002Fr\u002Fgeopolitics \u002Fr\u002Fforgottennews \u002Fr\u002Flibyanconflict \u002Fr\u002Fmenaconflicts \u002Fr\u002Firan \u002Fr\u002Firanianlgbt \u002Fr\u002Fzoroastrianism \u002Fr\u002Fkurdistan \u002Fr\u002Frojava \u002Fr\u002Fanarchism \u002Fr\u002Fimaginarypolitics \u002Fr\u002Fimaginaryimmortals \u002Fr\u002Fimaginaryclerics \u002Fr\u002Fimaginarylakes \u002Fr\u002Fimaginaryaliens \u002Fr\u002Fimaginarygnomes \u002Fr\u002Fimaginaryladyboners \u002Fr\u002Fimaginaryturtleworlds \u002Fr\u002Fimaginarysunnydale \u002Fr\u002Fimaginarydwarves \u002Fr\u002Fimaginarywizards \u002Fr\u002Fimaginaryvikings \u002Fr\u002Fimaginarycolorscapes \u002Fr\u002Fimaginarysteampunk \u002Fr\u002Fimaginarytemples \u002Fr\u002Fimaginaryblueprints \u002Fr\u002Fcomicbookart \u002Fr\u002Fimaginarytechnology \u002Fr\u002Fmtgporn \u002Fr\u002Fimaginaryoldkingdom \u002Fr\u002Fimaginaryfactories \u002Fr\u002Fimaginaryfederation \u002Fr\u002Fimaginarylovers \u002Fr\u002Fimaginarynarnia \u002Fr\u002Fimaginarydwellings \u002Fr\u002Fimaginaryscience \u002Fr\u002Fimaginarytaverns \u002Fr\u002Fimaginarybattlefields \u002Fr\u002Fcityporn \u002Fr\u002Fjapanpics \u002Fr\u002Fnationalphotosubs \u002Fr\u002Faustriapics \u002Fr\u002Fsouthkoreapics \u002Fr\u002Ftaiwanpics \u002Fr\u002Fghanapics \u002Fr\u002Fkenyapics \u002Fr\u002Fnorwaypics \u002Fr\u002Fvzlapics \u002Fr\u002Fperupics \u002Fr\u002Fantarcticapics \u002Fr\u002Fgreatlakespics \u002Fr\u002Flakeporn \u002Fr\u002Fpornoverlords \u002Fr\u002Fthingscutinhalfporn \u002Fr\u002Fmanufacturing \u002Fr\u002Fcnc \u002Fr\u002Faskengineers \u002Fr\u002Fsciencesubreddits \u002Fr\u002Fmath \u002Fr\u002Fsimulate \u002Fr\u002Fcosmology \u002Fr\u002Freddittothefuture \u002Fr\u002Fscifi \u002Fr\u002Flost \u002Fr\u002Fthe100books \u002Fr\u002Fthe100 \u002Fr\u002Ftheblacklist \u002Fr\u002Fnbc \u002Fr\u002Fdundermifflin \u002Fr\u002Fsonsofanarchy \u002Fr\u002Ftwentyfour \u002Fr\u002Fbanshee \u002Fr\u002Fhbo \u002Fr\u002Fsiliconvalleyhbo \u002Fr\u002Fsiliconvalley \u002Fr\u002Fcalifornia \u002Fr\u002Ftahoe \u002Fr\u002Fskiing \u002Fr\u002Fsnowshoeing \u002Fr\u002Fxcountryskiing \u002Fr\u002Fwintergear \u002Fr\u002Fskijumping \u002Fr\u002Fwinter \u002Fr\u002Fbigmountain \u002Fr\u002Fmountaineering \u002Fr\u002Fcampingandhiking \u002Fr\u002Fearthporn \u002Fr\u002Fnature \u002Fr\u002Fbirding \u002Fr\u002Finvasivespecies \u002Fr\u002Fzoology \u002Fr\u002Fentomology \u002Fr\u002Frainforest \u002Fr\u002Fbotany \u002Fr\u002Fwildlife \u002Fr\u002Fallscience \u002Fr\u002Fearthscience \u002Fr\u002Fenergy \u002Fr\u002Fbiomass \u002Fr\u002Frenewablenews \u002Fr\u002Fsyngas \u002Fr\u002Fclimatenews \u002Fr\u002Fcomposting \u002Fr\u002Fvermiculture \u002Fr\u002Forganicfarming \u002Fr\u002Flivestock \u002Fr\u002Fanimalwelfare \u002Fr\u002Frandomactsofpetfood \u002Fr\u002Fanimalreddits \u002Fr\u002Fcockatiel \u002Fr\u002Fcatpics \u002Fr\u002Ftortoises \u002Fr\u002Fwhales \u002Fr\u002Fcetacea \u002Fr\u002Flifeaquatic \u002Fr\u002Fhrw \u002Fr\u002Fgreen_peace \u002Fr\u002Fenvironmental_policy \u002Fr\u002Fconservation \u002Fr\u002Fdepthhub \u002Fr\u002Findepthsports \u002Fr\u002Fdeeperhubbeta \u002Fr\u002Flectures \u002Fr\u002Fspacepolicy \u002Fr\u002Fskylon \u002Fr\u002Fula \u002Fr\u002Fisro \u002Fr\u002Fengineteststands \u002Fr\u002Fjupiters \u002Fr\u002Fimaginarystarscapes \u002Fr\u002Fspacequestions \u002Fr\u002Fspaceflight \u002Fr\u002Fmoon \u002Fr\u002Fdione \u002Fr\u002Feuropa \u002Fr\u002Foortcloud \u002Fr\u002Fdwarfplanetceres \u002Fr\u002Fsaturn \u002Fr\u002Fasteroidbelt \u002Fr\u002Fmars \u002Fr\u002Frhea \u002Fr\u002Fvenus \u002Fr\u002Fastrophys \u002Fr\u002Fspacevideos \u002Fr\u002Ftranshuman \u002Fr\u002Ftimereddits \u002Fr\u002Fvirtualreality \u002Fr\u002Fvive \u002Fr\u002Foculus \u002Fr\u002Flearnvrdev \u002Fr\u002Funity3d \u002Fr\u002Fgamedev \u002Fr\u002Fcrowdfunding \u002Fr\u002Fcrowdsourcing \u002Fr\u002Fmturk \u002Fr\u002Fswagbucks \u002Fr\u002Fbeermoney \u002Fr\u002Fflipping \u002Fr\u002Fshoplifting \u002Fr\u002Fthriftstorehauls \u002Fr\u002Fdvdcollection \u002Fr\u002Ftelevisionposterporn \u002Fr\u002Fconcertposterporn \u002Fr\u002Fmovieposterporn \u002Fr\u002Flv426 \u002Fr\u002Fpredator \u002Fr\u002Farnoldschwarzenegger \u002Fr\u002Falanpartridge \u002Fr\u002Famericandad \u002Fr\u002Ftimanderic \u002Fr\u002Fhomemovies \u002Fr\u002Fgravityfalls \u002Fr\u002Fhomestarrunner \u002Fr\u002Ftelltale \u002Fr\u002Fthewalkingdeadgame \u002Fr\u002Fthewalkingdeadgifs \u002Fr\u002Ftwdnomansland \u002Fr\u002Fheycarl \u002Fr\u002Ftwdroadtosurvival \u002Fr\u002Fthewalkingdead \u002Fr\u002Fzombies \u002Fr\u002Fguns \u002Fr\u002Fswissguns \u002Fr\u002Fopencarry \u002Fr\u002Flibertarian \u002Fr\u002Fgeolibertarianism \u002Fr\u002Fbasicincome \u002Fr\u002Fbasicincomeactivism \u002Fr\u002Fmhoc \u002Fr\u002Fmodelaustralia \u002Fr\u002Frmtk \u002Fr\u002Fthenetherlands \u002Fr\u002Ftokkiefeesboek \u002Fr\u002Fnujijinactie \u002Fr\u002Fik_ihe \u002Fr\u002Fyouirl \u002Fr\u002Ffite_me_irl \u002Fr\u002F2meirl4meirl \u002Fr\u002Fdepression \u002Fr\u002Frandomactsofcards \u002Fr\u002Fphilately \u002Fr\u002Fcoins \u002Fr\u002Fcoins4sale \u002Fr\u002Fancientcoins \u002Fr\u002Fancientrome \u002Fr\u002Fflatblue \u002Fr\u002Fbestofwritingprompts \u002Fr\u002Fwritingprompts \u002Fr\u002Fpromptoftheday \u002Fr\u002Fflashfiction \u002Fr\u002Fkeepwriting \u002Fr\u002Fgetmotivated \u002Fr\u002Fmentors \u002Fr\u002Ffavors \u002Fr\u002Frecordthis \u002Fr\u002Fvideography \u002Fr\u002Fanimation \u002Fr\u002F3dsmax \u002Fr\u002Fcomputergraphics \u002Fr\u002Fcinema4d \u002Fr\u002Fdesign \u002Fr\u002Fui_design \u002Fr\u002Fdesignjobs \u002Fr\u002Fheavymind \u002Fr\u002Fwtfart \u002Fr\u002Falternativeart \u002Fr\u002Fimaginaryninjas \u002Fr\u002Fimaginaryruins \u002Fr\u002Fisometric \u002Fr\u002Fimaginaryislands \u002Fr\u002Fimaginaryverse \u002Fr\u002Ficandrawthat \u002Fr\u002Fcaricatures \u002Fr\u002Fimaginaryneweden \u002Fr\u002Fimaginaryequestria \u002Fr\u002Fimaginaryaww \u002Fr\u002Fimaginarycyberpunk \u002Fr\u002Fchinafuturism \u002Fr\u002Fscifirealism \u002Fr\u002Finegentlemanboners \u002Fr\u002Fimaginarywtf \u002Fr\u002Fimaginaryelementals \u002Fr\u002Fimaginarydinosaurs \u002Fr\u002Fdinosaurs \u002Fr\u002Fspeculativeevolution \u002Fr\u002Fhybridanimals \u002Fr\u002Fphotoshopbattles \u002Fr\u002Fcutouts \u002Fr\u002Fbattleshops \u002Fr\u002Fgraphic_design \u002Fr\u002Fvisualization \u002Fr\u002Fstatistics \u002Fr\u002Foncourtanalytics \u002Fr\u002Fnbaanalytics \u002Fr\u002Fnba \u002Fr\u002Fpacers \u002Fr\u002Fatlantahawks \u002Fr\u002Fbasketball \u002Fr\u002Fmavericks \u002Fr\u002Ffcdallas \u002Fr\u002Ftheticket \u002Fr\u002Fdallasstars \u002Fr\u002Fbostonbruins \u002Fr\u002Fpatriots \u002Fr\u002Ftennesseetitans \u002Fr\u002Fnashvillesounds \u002Fr\u002Fpredators \u002Fr\u002Fflyers \u002Fr\u002Fhockeyfandom \u002Fr\u002Fcaps \u002Fr\u002Fnhl \u002Fr\u002Fdetroitredwings \u002Fr\u002Fsabres \u002Fr\u002Ffloridapanthers \u002Fr\u002Fhabs \u002Fr\u002Fmontrealimpact \u002Fr\u002Falouettes \u002Fr\u002Fcfl \u002Fr\u002Fstadiumporn \u002Fr\u002Fnfl \u002Fr\u002Fmadden \u002Fr\u002Feurobowl \u002Fr\u002Ffantasyfb \u002Fr\u002Ffantasyfootball \u002Fr\u002F49ers \u002Fr\u002Ffootballgamefilm \u002Fr\u002Ffootballstrategy \u002Fr\u002Fcfb \u002Fr\u002Fcollegebaseball \u002Fr\u002Fmlbdraft \u002Fr\u002Fbaseball \u002Fr\u002Fcubs \u002Fr\u002Fcardinals \u002Fr\u002Fsaintlouisfc \u002Fr\u002Fstlouisblues \u002Fr\u002Fstlouis \u002Fr\u002Fstlouisbiking \u002Fr\u002Fmobicycling \u002Fr\u002Fbicycling \u002Fr\u002Fvintage_bicycles \u002Fr\u002Fmiamibiking \u002Fr\u002Ffatbike \u002Fr\u002Fcycling \u002Fr\u002Fstrava \u002Fr\u002Fphillycycling \u002Fr\u002Fwheelbuild \u002Fr\u002Fbikewrench \u002Fr\u002Fvelo \u002Fr\u002Fbikepolo \u002Fr\u002Fbicycletouring \u002Fr\u002Fbicyclingcirclejerk \u002Fr\u002Fbikecommuting \u002Fr\u002Fukbike \u002Fr\u002Fleedscycling \u002Fr\u002Flondoncycling \u002Fr\u002Ffixedgearbicycle \u002Fr\u002Fcyclingfashion \u002Fr\u002Fpeloton \u002Fr\u002Fmtb \u002Fr\u002Fclimbingporn \u002Fr\u002Fadrenaline \u002Fr\u002Fmotocross \u002Fr\u002Fbmxracing \u002Fr\u002Fwake \u002Fr\u002Fsnowboardingnoobs \u002Fr\u002Ffreebord \u002Fr\u002Fsnowboarding \u002Fr\u002Fsledding \u002Fr\u002Foutdoors \u002Fr\u002Fsoposts \u002Fr\u002Fcordcutters \u002Fr\u002Fnetflixviavpn \u002Fr\u002Fhulu \u002Fr\u002Ffiretv \u002Fr\u002Fnetflixbestof \u002Fr\u002Fraisinghope \u002Fr\u002Fmadmen \u002Fr\u002Fearthsgottalent \u002Fr\u002Fbobsburgers \u002Fr\u002Ffringe \u002Fr\u002Flouie \u002Fr\u002Ftheoriginals \u002Fr\u002Fiansomerhalder \u002Fr\u002Fkat_graham \u002Fr\u002Findianaevans \u002Fr\u002Fjanelevy \u002Fr\u002Fgagegolightly \u002Fr\u002Fsarahhyland \u002Fr\u002Fstarlets \u002Fr\u002Fninadobrev \u002Fr\u002Fkathrynnewton \u002Fr\u002Farielwinter \u002Fr\u002Fashleygreene \u002Fr\u002Fgentlemanboners \u002Fr\u002Fbandporn \u002Fr\u002Fmusicpics \u002Fr\u002Flistentomusic \u002Fr\u002Flistentonew \u002Fr\u002Fsubraddits \u002Fr\u002Fdtipics \u002Fr\u002Fdamnthatsinteresting \u002Fr\u002Finterestingasfuck \u002Fr\u002Funexpected \u002Fr\u002Fwtf \u002Fr\u002Fweird \u002Fr\u002Fanimalsbeingderps \u002Fr\u002Fanimalsbeingconfused \u002Fr\u002Fhumansbeingbros \u002Fr\u002Fhulpdiensten \u002Fr\u002Faskle \u002Fr\u002Fprotectandserve \u002Fr\u002Fgood_cop_free_donut \u002Fr\u002Fbad_cop_follow_up \u002Fr\u002Famifreetogo \u002Fr\u002Fcopwatch \u002Fr\u002Fpuppycide \u002Fr\u002Funderreportednews \u002Fr\u002Fmediaquotes \u002Fr\u002Fsavedyouaclick \u002Fr\u002Fnews \u002Fr\u002Fneutralnews \u002Fr\u002Fask_politics \u002Fr\u002Fpoliticalopinions \u002Fr\u002Fgunsarecool \u002Fr\u002Frenewableenergy \u002Fr\u002Fweb_design \u002Fr\u002Fsomebodymakethis \u002Fr\u002Fsomethingimade \u002Fr\u002Fcrafts \u002Fr\u002Fkidscrafts \u002Fr\u002Fdaddit \u002Fr\u002Fformulafeeders \u002Fr\u002Fboobsandbottles \u002Fr\u002Fcsectioncentral \u002Fr\u002Fpredaddit \u002Fr\u002Fdadbloggers \u002Fr\u002Fmombloggers \u002Fr\u002Fcutekids \u002Fr\u002Fbigfeats \u002Fr\u002Fscienceparents \u002Fr\u002Flv9hrvv \u002Fr\u002Fsahp \u002Fr\u002Ftryingforababy \u002Fr\u002Fwaiting_to_try \u002Fr\u002Fpcos \u002Fr\u002Finfertility \u002Fr\u002Fbirthparents \u002Fr\u002Ftfabchartstalkers \u002Fr\u002Ffirsttimettc \u002Fr\u002Fcautiousbtb \u002Fr\u002Fttchealthy \u002Fr\u002Fxxketo \u002Fr\u002Fketoscience \u002Fr\u002Fketogains \u002Fr\u002Fleangains \u002Fr\u002Fgettingshredded \u002Fr\u002Fbulkorcut \u002Fr\u002Fgainit \u002Fr\u002Fdecidingtobebetter \u002Fr\u002Fzen \u002Fr\u002Fbuddhism \u002Fr\u002Fastralprojection \u002Fr\u002Fspirituality \u002Fr\u002Fhinduism \u002Fr\u002Fyoga \u002Fr\u002Fveganfitness \u002Fr\u002Fposture \u002Fr\u002Fhealth \u002Fr\u002Fukhealthcare \u002Fr\u002Fpharmacy \u002Fr\u002Fnursing \u002Fr\u002Fdoctorswithoutborders \u002Fr\u002Fhumanitarian \u002Fr\u002Fassistance \u002Fr\u002Fparanormalhelp \u002Fr\u002Fparanormal \u002Fr\u002F333 \u002Fr\u002Faskparanormal \u002Fr\u002Fintelligence \u002Fr\u002Fblackhat \u002Fr\u002Fnetsec \u002Fr\u002Ftechnology \u002Fr\u002Fnewyorkfuturistparty \u002Fr\u002Frad_decentralization \u002Fr\u002Fmassachusettsfp \u002Fr\u002Fopensource \u002Fr\u002Falabamafp \u002Fr\u002Fdarknetplan \u002Fr\u002Ftorrents \u002Fr\u002Fi2p \u002Fr\u002Fprivacy \u002Fr\u002Fbadgovnofreedom \u002Fr\u002Fcensorship \u002Fr\u002Fgovernmentoppression \u002Fr\u002Fdescentintotyranny \u002Fr\u002Fwikileaks \u002Fr\u002Fdncleaks \u002Fr\u002Fhillaryforprison \u002Fr\u002Fthe_donald \u002Fr\u002Fshitredditsays \u002Fr\u002Fsrsmythos \u002Fr\u002Fsrstrees \u002Fr\u002Fentwives \u002Fr\u002Flesbients \u002Fr\u002Factuallesbians \u002Fr\u002Flesbianromance \u002Fr\u002Flesbianerotica \u002Fr\u002Fl4l \u002Fr\u002Fdyke \u002Fr\u002Fladyladyboners \u002Fr\u002Fbisexual \u002Fr\u002Fbisexy \u002Fr\u002Fbiwomen \u002Fr\u002Fpansexual \u002Fr\u002Fgenderqueer \u002Fr\u002Ftransspace \u002Fr\u002Flgbtlibrary \u002Fr\u002Flgbtnews \u002Fr\u002Fdixiequeer \u002Fr\u002Flgbt \u002Fr\u002Fsex \u002Fr\u002Fhelpmecope \u002Fr\u002Fbpd \u002Fr\u002Frapecounseling \u002Fr\u002Ftrueoffmychest \u002Fr\u002Fsuicidewatch \u002Fr\u002Fbipolarsos \u002Fr\u002Fbipolar \u002Fr\u002Fmentalpod \u002Fr\u002Fadhd \u002Fr\u002Fhoarding \u002Fr\u002Fdeclutter \u002Fr\u002Fthrifty \u002Fr\u002Ftinyhouses \u002Fr\u002Fleanfire \u002Fr\u002Flowcar \u002Fr\u002Fzerowaste \u002Fr\u002Fsimpleliving \u002Fr\u002Flivingofftheland \u002Fr\u002Fhunting \u002Fr\u002Fanimaltracking \u002Fr\u002Fsurvival \u002Fr\u002Fvedc \u002Fr\u002F4x4 \u002Fr\u002Fclassiccars \u002Fr\u002Fautomotivetraining \u002Fr\u002Fautodetailing \u002Fr\u002Fcartalk \u002Fr\u002Fmercedes_benz \u002Fr\u002Fmotorsports \u002Fr\u002Frallycross \u002Fr\u002Fworldrallycross \u002Fr\u002Fblancpain \u002Fr\u002Fnascarhometracks \u002Fr\u002Farcaracing \u002Fr\u002Fstadiumsupertrucks \u002Fr\u002Fhydroplanes \u002Fr\u002Fsailing \u002Fr\u002Fboatbuilding \u002Fr\u002Fwoodworking \u002Fr\u002Fcottage_industry \u002Fr\u002Ffarriers \u002Fr\u002Fblacksmith \u002Fr\u002Fbladesmith \u002Fr\u002Fknives \u002Fr\u002Fswissarmyknives \u002Fr\u002Fswitzerland \u002Fr\u002Fbern \u002Fr\u002Fsanktgallen \u002Fr\u002Fliechtenstein \u002Fr\u002Ferasmus \u002Fr\u002Fde \u002Fr\u002Fgermanpuns \u002Fr\u002Fschland \u002Fr\u002Frvacka \u002Fr\u002Fsloensko \u002Fr\u002Fslovakia \u002Fr\u002Fbelarus \u002Fr\u002Fandorra \u002Fr\u002Feurope \u002Fr\u002Fhungary \u002Fr\u002Ffrancophonie \u002Fr\u002Fthailand \u002Fr\u002Fvietnam \u002Fr\u002Fvietnampics \u002Fr\u002Ftravel \u002Fr\u002Fgeography \u002Fr\u002Fclimate \u002Fr\u002Fdrought \u002Fr\u002Fwaterutilities \u002Fr\u002Fdrylands \u002Fr\u002Firrigation \u002Fr\u002Fwater \u002Fr\u002Fonthewaterfront \u002Fr\u002Fwetlands \u002Fr\u002Fmarinelife \u002Fr\u002Focean \u002Fr\u002Fseasteading \u002Fr\u002Ffrontier_colonization \u002Fr\u002Farcology \u002Fr\u002Fretrofuturism \u002Fr\u002Fgoldenpath \u002Fr\u002Fpolitics \u002Fr\u002Fmoderationtheory \u002Fr\u002Fwdp \u002Fr\u002Foutoftheloop \u002Fr\u002Fwherearetheynow \u002Fr\u002Fentertainment \u002Fr\u002Fportlandia \u002Fr\u002Fthemichaeljfoxshow \u002Fr\u002Fbacktothefuture \u002Fr\u002Fbladerunner \u002Fr\u002Ffilmnoir \u002Fr\u002Fvintageladyboners \u002Fr\u002Fclassicfilms \u002Fr\u002Fforeignmovies \u002Fr\u002Fbritishfilms \u002Fr\u002Fcanadianfilm \u002Fr\u002Fnewjerseyfilm \u002Fr\u002Fnewzealandfilm \u002Fr\u002Fnewzealand \u002Fr\u002Fwellington \u002Fr\u002Fnzmetahub \u002Fr\u002Fnewzealandhistory \u002Fr\u002Fscottishhistory \u002Fr\u002Fscots \u002Fr\u002Fscottishproblems \u002Fr\u002Fbritishproblems \u002Fr\u002Fswedishproblems \u002Fr\u002Fpinsamt \u002Fr\u002Fsweden \u002Fr\u002Fsvenskpolitik \u002Fr\u002Farbetarrorelsen \u002Fr\u002Fsocialism \u002Fr\u002Fshittydebatecommunism \u002Fr\u002Fshittysocialscience \u002Fr\u002Fshittyideasforadmins \u002Fr\u002Fshittytheoryofreddit \u002Fr\u002Fshittybuildingporn \u002Fr\u002Fshittylifeprotips \u002Fr\u002Fshittyshitredditsays \u002Fr\u002Fshittyquotesporn \u002Fr\u002Fshittyama \u002Fr\u002Faskashittyparent \u002Fr\u002Fshittyprogramming \u002Fr\u002Fshittyaskalawyer \u002Fr\u002Fbadlegaladvice \u002Fr\u002Fbadscience \u002Fr\u002Fbadeconomics \u002Fr\u002Fbadhistory \u002Fr\u002Fhistoricalrage \u002Fr\u002Fmetarage \u002Fr\u002Fragenovels \u002Fr\u002Ffffffffuuuuuuuuuuuu \u002Fr\u002Fgaaaaaaayyyyyyyyyyyy \u002Fr\u002Flgbteens \u002Fr\u002Fneedafriend \u002Fr\u002Frant \u002Fr\u002Fshowerthoughts \u002Fr\u002Fmarkmywords \u002Fr\u002Fcalledit \u002Fr\u002Ffuturewhatif \u002Fr\u002Fsportswhatif \u002Fr\u002Falternatehistory \u002Fr\u002Fmaps \u002Fr\u002Fxkcd \u002Fr\u002Fkerbalspaceprogram \u002Fr\u002Fspacesimgames \u002Fr\u002Feve \u002Fr\u002Fscifigaming \u002Fr\u002Fmasseffect \u002Fr\u002Fimaginarymasseffect \u002Fr\u002Fimaginaryvampires \u002Fr\u002Fimaginarytowers \u002Fr\u002Fimaginarybestof \u002Fr\u002Fpics \u002Fr\u002Fspaceporn \u002Fr\u002Fauroraporn \u002Fr\u002Fweatherporn \u002Fr\u002Fsfwpornnetwork \u002Fr\u002Ffwepp \u002Fr\u002Fshittyearthporn \u002Fr\u002Fshittyaskreddit \u002Fr\u002Faskashittyphilosopher \u002Fr\u002Fshittyaskhistory \u002Fr\u002Fshittysuboftheweek \u002Fr\u002Fshittyaskcooking \u002Fr\u002Fshittyhub \u002Fr\u002Fcoolguides \u002Fr\u002Ftrendingsubreddits \u002Fr\u002Fmonkslookingatbeer \u002Fr\u002Fbeerporn \u002Fr\u002Fbeerwithaview \u002Fr\u002Fshittybeerwithaview \u002Fr\u002Fshittyfoodporn \u002Fr\u002Fenttreats \u002Fr\u002Ftrees \u002Fr\u002Feldertrees \u002Fr\u002Fvaporents \u002Fr\u002Fcrainn \u002Fr\u002Feirhub \u002Fr\u002Ffairepublicofireland \u002Fr\u002Fgaeltacht \u002Fr\u002Fwestmeath \u002Fr\u002Ftipperary \u002Fr\u002Flimerick \u002Fr\u002Fkilkenny \u002Fr\u002Fireland \u002Fr\u002Firejobs \u002Fr\u002Fresumes \u002Fr\u002Fcareerguidance \u002Fr\u002Fflatone \u002Fr\u002Fcentralillinois \u002Fr\u002Fchicubs \u002Fr\u002Fwhitesox \u002Fr\u002Fminnesotatwins \u002Fr\u002Fminnesotavikings \u002Fr\u002Fgreenbaypackers \u002Fr\u002Fjaguars \u002Fr\u002Fmiamidolphins \u002Fr\u002Fnflroundtable \u002Fr\u002Fdetroitlions \u002Fr\u002Fforhonor \u002Fr\u002Fvikingstv \u002Fr\u002Fhannibaltv \u002Fr\u002Fthepathhulu \u002Fr\u002Fbatesmotel \u002Fr\u002Fhannibal \u002Fr\u002Fhitchcock \u002Fr\u002Fsilentmoviegifs \u002Fr\u002Fmoviestunts \u002Fr\u002Fbollywoodrealism \u002Fr\u002Findiamain \u002Fr\u002Findianews \u002Fr\u002Fasia \u002Fr\u002Foldindia \u002Fr\u002Fexplorepakistan \u002Fr\u002Fchurchporn \u002Fr\u002Fmedievalporn \u002Fr\u002Fcastles \u002Fr\u002Fhistoryporn \u002Fr\u002Fthewaywewere \u002Fr\u002F1970s \u002Fr\u002Fclassicmovietrailers \u002Fr\u002Fwarmovies \u002Fr\u002Fmoviecritic \u002Fr\u002Ftrailers \u002Fr\u002Fliveaction \u002Fr\u002Fanimedeals \u002Fr\u002Fdbz \u002Fr\u002Ftoonami \u002Fr\u002Fregularshow \u002Fr\u002Fthelifeandtimesoftim \u002Fr\u002Faquajail \u002Fr\u002Fmodern_family \u002Fr\u002Fsupernatural \u002Fr\u002Fmishacollins \u002Fr\u002Fjaredpadalecki \u002Fr\u002Ffandomnatural \u002Fr\u002Ffangirls \u002Fr\u002Ftrollxgirlgamers \u002Fr\u002Ftrollmedia \u002Fr\u002Ftrollgaming \u002Fr\u002Ftrollmua \u002Fr\u002Fjusttrollxthings \u002Fr\u002Ftrollxmoms \u002Fr\u002Ftrollmeta \u002Fr\u002Ftrollychromosome \u002Fr\u002Foney \u002Fr\u002Faskwomen \u002Fr\u002Fokcupid \u002Fr\u002Frelationship_advice \u002Fr\u002Fhelp \u002Fr\u002Fbugs \u002Fr\u002Fredditdev \u002Fr\u002Fenhancement \u002Fr\u002Fyoursub \u002Fr\u002Fhorrorreviewed \u002Fr\u002Ftruecreepy \u002Fr\u002Fmetatruereddit \u002Fr\u002Ftruepolitics \u002Fr\u002Ftruehub \u002Fr\u002Ftruegaming \u002Fr\u002Faskgames \u002Fr\u002Ffreegamesonandroid \u002Fr\u002Fandroidapps \u002Fr\u002Fapphookup \u002Fr\u002Fbrowsemyreddit \u002Fr\u002Ffindareddit \u002Fr\u002Ftrap \u002Fr\u002Fnaut \u002Fr\u002Fmilitaryfinance \u002Fr\u002Farmy \u002Fr\u002Fmilitarystories \u002Fr\u002Fnationalguard \u002Fr\u002Fuscg \u002Fr\u002Fusa \u002Fr\u002Fmurica \u002Fr\u002Flonestar \u002Fr\u002Fwhataburger \u002Fr\u002Ffastfood \u002Fr\u002Fcocacola \u002Fr\u002Fkelloggs \u002Fr\u002Fkellawwggs \u002Fr\u002Fawwducational \u002Fr\u002Fmarinebiologygifs \u002Fr\u002Fbiologygifs \u002Fr\u002Fchemicalreactiongifs \u002Fr\u002Fhomechemistry \u002Fr\u002Fholdmybeaker \u002Fr\u002Fholdmybeer \u002Fr\u002Fmovieoftheday \u002Fr\u002Fsharknado \u002Fr\u002Fsyfy \u002Fr\u002Fkilljoys \u002Fr\u002Ftheexpanse \u002Fr\u002Ftruedetective \u002Fr\u002Fboardwalkempire \u002Fr\u002Fmobcast \u002Fr\u002F1920s \u002Fr\u002F1960s \u002Fr\u002Fbeatles \u002Fr\u002Fminimaluminiumalism \u002Fr\u002Fghostsrights \u002Fr\u002Fbotsrights \u002Fr\u002Ftotallynotrobots \u002Fr\u002Frobotics \u002Fr\u002Fmanna \u002Fr\u002Fsingularity \u002Fr\u002Ffutureporn \u002Fr\u002Fsingularitarianism \u002Fr\u002Fautomate \u002Fr\u002Fdarkfuturology \u002Fr\u002Fcontrolproblem \u002Fr\u002Faiethics \u002Fr\u002Fainothuman \u002Fr\u002Fneuraljokes \u002Fr\u002F3amjokes \u002Fr\u002Fmommajokes \u002Fr\u002Fantijokes \u002Fr\u002Fabsolutelynotme_irl \u002Fr\u002Ftoomeirlformeirl \u002Fr\u002Fmeirl \u002Fr\u002Ftree_irl \u002Fr\u002Ffishpost \u002Fr\u002Fmod_irl \u002Fr\u002Fpics_irl \u002Fr\u002Fteleshits \u002Fr\u002Fbitstrips \u002Fr\u002Fstopbullyingcomics \u002Fr\u002Fanimalsbeingjerks \u002Fr\u002Fsurfinganimals \u002Fr\u002Funorthocat \u002Fr\u002Fcatsubs \u002Fr\u002Fstuffoncats \u002Fr\u002Fcatsinbusinessattire \u002Fr\u002Fcatsinsinks \u002Fr\u002Fcatsonkeyboards \u002Fr\u002Fmechanicalkeyboards \u002Fr\u002Fhackedgadgets \u002Fr\u002Ftechsupportmacgyver \u002Fr\u002Ftechsupport \u002Fr\u002Fprogramming \u002Fr\u002Falgorithms \u002Fr\u002Fdatamining \u002Fr\u002Fdatasets \u002Fr\u002Fwordcloud \u002Fr\u002Fdatavizrequests \u002Fr\u002Ffunnycharts \u002Fr\u002Fmapporn \u002Fr\u002Fmapmaking \u002Fr\u002Fworldbuilding \u002Fr\u002Fscificoncepts \u002Fr\u002Fapocalypseporn \u002Fr\u002Fimaginaryjerk \u002Fr\u002Fbraveryjerk \u002Fr\u002Fcirclejerk \u002Fr\u002Fpoliticaldiscussion \u002Fr\u002Fpoliticalfactchecking \u002Fr\u002Fmoderatepolitics \u002Fr\u002Ftruereddit \u002Fr\u002Fmalelifestyle \u002Fr\u002Ffitness \u002Fr\u002Fswimming \u002Fr\u002Ffreediving \u002Fr\u002Fbikeshop \u002Fr\u002Fclimbing \u002Fr\u002Fclimbharder \u002Fr\u002Fbouldering \u002Fr\u002Fclimbergirls \u002Fr\u002Fwomenshredders \u002Fr\u002Fskatergirls \u002Fr\u002Fgirlsurfers \u002Fr\u002Fkiteboarding \u002Fr\u002Flongboarding \u002Fr\u002Fstreetboarding \u002Fr\u002Fletsgosnowboarding \u002Fr\u002Fspliddit \u002Fr\u002Fbackcountry \u002Fr\u002Fwjdbbl2 \u002Fr\u002Fcaving \u002Fr\u002Fnationalparks \u002Fr\u002Fparkrangers \u002Fr\u002Fthesca \u002Fr\u002Fsearchandrescue \u002Fr\u002Fwildernessbackpacking \u002Fr\u002Fcampinggear \u002Fr\u002Fflashlight \u002Fr\u002Fcamping \u002Fr\u002Fyellowstone \u002Fr\u002Fwmnf \u002Fr\u002Fpacificcresttrail \u002Fr\u002Fcdt \u002Fr\u002Fultralight \u002Fr\u002Fbackpacking \u002Fr\u002Ftravelpartners \u002Fr\u002Fadventures \u002Fr\u002Flibraryofshadows \u002Fr\u002Fshortscarystories \u002Fr\u002Fshortscarystoriesooc \u002Fr\u002Fnosleepooc \u002Fr\u002Fnosleep\n\n# Centrality\n\nCentrality is anohter important topic in graph theory. Here's a brief introduction to centrality from [Wikipedia](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FCentrality):\n\n\u003E In graph theory and network analysis, indicators of centrality identify the most important vertices within a graph. Applications include identifying the most influential person(s) in a social network, key infrastructure nodes in the Internet or urban networks, and super-spreaders of disease.\n\nThere are several different methods of measuring centrality in a graph. Here I use `eigenvector_centrality_numpy`, a function included in NetworkX. It takes in a graph and returns a dictionary with graph nodes as keys and node centrality as values.\n\n```python\ncentrality = nx.eigenvector_centrality_numpy(G1)\n```\n\nLet's see which subreddit has the highest centrality:\n\n```python\nprint max(centrality, key=centrality.get), centrality[max(centrality, key=centrality.get)]\n```\n\n    \u002Fr\u002Fimaginarybattlefields 0.0721530261127\n\n```python\nlen(centrality) == len(sorted(centrality.values(), reverse=True))\n```\n\n    True\n\nSince all of the centrality values are unique, we can look up nodes by their centrality values.\n\n```python\nsubr_list = []\nfor node in centrality:\n    subr_list.append((node, centrality[node]))\n\nsorted_subr_list = subr_list.sort(key=lambda x: x[1])\n```\n\n```python\nfor x in sorted(subr_list, key=lambda x: x[1], reverse=True)[:200]: print x[0],\n```\n\n    \u002Fr\u002Fimaginarybattlefields \u002Fr\u002Fimaginarycityscapes \u002Fr\u002Fimaginarywastelands \u002Fr\u002Fimaginarywildlands \u002Fr\u002Fimaginaryleviathans \u002Fr\u002Fimaginarydragons \u002Fr\u002Fimaginarystarscapes \u002Fr\u002Fimaginarywesteros \u002Fr\u002Fimaginaryartifacts \u002Fr\u002Fimaginaryangels \u002Fr\u002Fimaginarymaps \u002Fr\u002Fimaginarybehemoths \u002Fr\u002Fimaginarydemons \u002Fr\u002Fimaginaryelves \u002Fr\u002Fimaginarycentaurs \u002Fr\u002Fimaginaryfuturewar \u002Fr\u002Fimaginarysoldiers \u002Fr\u002Fimaginaryhistory \u002Fr\u002Fimaginaryarmor \u002Fr\u002Fimaginarystarships \u002Fr\u002Fimaginarynetwork \u002Fr\u002Fimaginaryjedi \u002Fr\u002Fimaginarydinosaurs \u002Fr\u002Fimaginarysteampunk \u002Fr\u002Fimaginarycyberpunk \u002Fr\u002Fimaginaryarchers \u002Fr\u002Fimaginaryvehicles \u002Fr\u002Fimaginaryanime \u002Fr\u002Fimaginaryfallout \u002Fr\u002Fimaginaryastronauts \u002Fr\u002Fimaginarymusic \u002Fr\u002Fimaginaryfactories \u002Fr\u002Fimaginaryequestria \u002Fr\u002Fimaginarywarships \u002Fr\u002Fimaginaryazeroth \u002Fr\u002Fimaginaryarrakis \u002Fr\u002Fimaginarydisney \u002Fr\u002Fimaginarypolitics \u002Fr\u002Fimaginaryhorrors \u002Fr\u002Fimaginarywinterscapes \u002Fr\u002Fimaginaryseascapes \u002Fr\u002Fimaginarypirates \u002Fr\u002Fimaginarywarriors \u002Fr\u002Fimaginarymiddleearth \u002Fr\u002Fimaginarygallifrey \u002Fr\u002Fimaginarymechs \u002Fr\u002Fimaginarypropaganda \u002Fr\u002Fimaginarymerfolk \u002Fr\u002Fimaginaryvikings \u002Fr\u002Fimaginaryundead \u002Fr\u002Fimaginarybeasts \u002Fr\u002Fimaginarymutants \u002Fr\u002Fimaginaryruins \u002Fr\u002Fimaginarytamriel \u002Fr\u002Fimaginaryforests \u002Fr\u002Fimaginaryelementals \u002Fr\u002Fimaginaryskyscapes \u002Fr\u002Fimaginarymonuments \u002Fr\u002Fimaginarywaterfalls \u002Fr\u002Fimaginaryworlds \u002Fr\u002Fimaginarywizards \u002Fr\u002Fimaginaryinteriors \u002Fr\u002Fimaginaryhogwarts \u002Fr\u002Fimaginarytowers \u002Fr\u002Fimaginaryarchitecture \u002Fr\u002Fimaginaryweaponry \u002Fr\u002Fimaginarygaming \u002Fr\u002Fimaginarycastles \u002Fr\u002Fimaginaryrobotics \u002Fr\u002Fimaginarybooks \u002Fr\u002Fimaginarygnomes \u002Fr\u002Fimaginaryvillages \u002Fr\u002Fimaginarydeserts \u002Fr\u002Fimaginarywerewolves \u002Fr\u002Fimaginarydieselpunk \u002Fr\u002Fimaginaryvampires \u002Fr\u002Fimaginaryadrenaline \u002Fr\u002Fimaginarykanto \u002Fr\u002Fimaginarynatives \u002Fr\u002Fimaginaryrivers \u002Fr\u002Fimaginarytemples \u002Fr\u002Fimaginaryassassins \u002Fr\u002Fimaginaryvolcanoes \u002Fr\u002Fimaginaryclerics \u002Fr\u002Fimaginaryprisons \u002Fr\u002Fimaginarygiants \u002Fr\u002Fimaginarycowboys \u002Fr\u002Fimaginaryhumans \u002Fr\u002Fimaginarydwarves \u002Fr\u002Fimaginarycaves \u002Fr\u002Fimaginarytrolls \u002Fr\u002Fimaginarywalls \u002Fr\u002Fimaginarylakes \u002Fr\u002Fimaginarywitches \u002Fr\u002Fimaginaryorcs \u002Fr\u002Fimaginarycanyons \u002Fr\u002Fimaginaryasylums \u002Fr\u002Fimaginaryimmortals \u002Fr\u002Fimaginaryaliens \u002Fr\u002Fimaginarynobles \u002Fr\u002Fimaginaryspirits \u002Fr\u002Fimaginaryaetherpunk \u002Fr\u002Fimaginarytrees \u002Fr\u002Fimaginaryislands \u002Fr\u002Fimaginaryninjas \u002Fr\u002Fimaginaryscience \u002Fr\u002Fimaginarymountains \u002Fr\u002Fimaginaryknights \u002Fr\u002Fimaginarygoblins \u002Fr\u002Fimaginaryfaeries \u002Fr\u002Fimaginarygotham \u002Fr\u002Fimaginarycybernetics \u002Fr\u002Fimaginaryooo \u002Fr\u002Fimaginaryderelicts \u002Fr\u002Fimaginaryfood \u002Fr\u002Fimaginaryworldeaters \u002Fr\u002Fimaginarymindscapes \u002Fr\u002Fimaginaryaww \u002Fr\u002Fimaginarymarvel \u002Fr\u002Fimaginaryweather \u002Fr\u002Fimaginarynewnewyork \u002Fr\u002Fimaginaryspidey \u002Fr\u002Fimaginaryautumnscapes \u002Fr\u002Fimaginarywarhammer \u002Fr\u002Fimaginaryfeels \u002Fr\u002Fimaginarywitcher \u002Fr\u002Fimaginaryvessels \u002Fr\u002Fimaginarytaverns \u002Fr\u002Fimaginarybestof \u002Fr\u002Fimaginaryairships \u002Fr\u002Fimaginaryportals \u002Fr\u002Fimaginaryfashion \u002Fr\u002Fimaginarylovers \u002Fr\u002Fimaginarydc \u002Fr\u002Fimaginaryanimals \u002Fr\u002Fimaginaryhellscapes \u002Fr\u002Fimaginarycolorscapes \u002Fr\u002Fimaginarymonstergirls \u002Fr\u002Fimaginaryswamps \u002Fr\u002Fimaginarymythology \u002Fr\u002Fimaginaryscholars \u002Fr\u002Fimaginaryladyboners \u002Fr\u002Fimaginaryfuturism \u002Fr\u002Fimaginaryaviation \u002Fr\u002Fimaginarypathways \u002Fr\u002Fimaginarygatherings \u002Fr\u002Fimaginarybodyscapes \u002Fr\u002Fimaginaryoverwatch \u002Fr\u002Fimaginarydwellings \u002Fr\u002Fimaginarystephenking \u002Fr\u002Fspecart \u002Fr\u002Finegentlemanboners \u002Fr\u002Fcomicbookart \u002Fr\u002Fimaginarymasseffect \u002Fr\u002Fimaginaryhalo \u002Fr\u002Fimaginaryjerk \u002Fr\u002Fbackgroundart \u002Fr\u002Ffutureporn \u002Fr\u002Fimaginarywallpapers \u002Fr\u002Fimaginaryfamilies \u002Fr\u002Fimaginarylibraries \u002Fr\u002Fimaginaryturtleworlds \u002Fr\u002Fimaginarydesigns \u002Fr\u002Fwallpapers \u002Fr\u002Fapocalypseporn \u002Fr\u002Fcomicbookporn \u002Fr\u002Fisometric \u002Fr\u002Fimaginarybakerst \u002Fr\u002Fimaginaryverse \u002Fr\u002Fimaginarysunnydale \u002Fr\u002Fimaginaryfederation \u002Fr\u002Fimaginarysanctuary \u002Fr\u002Fstarshipporn \u002Fr\u002Fimaginarystarcraft \u002Fr\u002Fimaginaryoldkingdom \u002Fr\u002Fimaginarynarnia \u002Fr\u002Fimaginarycybertron \u002Fr\u002Fgameworlds \u002Fr\u002Fimaginarycarnage \u002Fr\u002Fimaginaryboners \u002Fr\u002Ficandrawthat \u002Fr\u002Fimaginarycosmere \u002Fr\u002Fimaginaryaperture \u002Fr\u002Farmoredwomen \u002Fr\u002Fimaginarywtf \u002Fr\u002Funusualart \u002Fr\u002Fimaginaryblueprints \u002Fr\u002Falternativeart \u002Fr\u002Fsympatheticmonsters \u002Fr\u002Fadorabledragons \u002Fr\u002Fimaginarysummerscapes \u002Fr\u002Fimaginarygayboners \u002Fr\u002Fimaginarystash \u002Fr\u002Fartistoftheday \u002Fr\u002Fimaginaryglaciers \u002Fr\u002Fimaginaryhybrids \u002Fr\u002Fimaginaryadventurers \u002Fr\u002Fimaginarymetropolis \u002Fr\u002Fcraftsoficeandfire \u002Fr\u002Fpopartnouveau\n\nThere seems to be a network of \"imaginary\" subreddits that have the highest centrality. The members of this network probably all link to themselves as well as many other subreddits as the \"imaginary\" topics span a wide range content. This network may be drowning out other nodes that would otherwise have a high centrality relative to the rest of the subreddits. It might be interesting to eliminate these nodes from the graph and recalculate centrality. Let's look at the distribution of centrality values:\n\n```python\n_ = plt.plot(sorted(centrality.values(), reverse=True)[:1000])\n_ = plt.title('Subreddit Centrality (top 1000)')\n_ = plt.xlabel('Rank')\n_ = plt.ylabel('Centrality')\nplt.savefig(os.path.expanduser('~\u002FDocuments\u002FGitHub\u002Fbriancaffey.github.io\u002Fimg\u002Fsubreddit_graph\u002Fcentrality.png'))\n```\n\n![png](\u002Fimg\u002Fsubreddit_graph\u002Fcentrality.png)\n\n# Connectedness\n\nLet's take a look at the graph as a whole. One thing I'm not sure of is whether or not the entire graph is connected. This means that any node can be reached from any other node. Since we constructed the graph from 49 unrelated nodes, it is possible that the graph is unconnected. This would mean that one or more of the default subreddits and its subreddits is not connected with the rest of the graph. In searching for the shortest path I did not come across any pairs of nodes that did not have a path between themselves. I wouldn't be surprised if there are a handful of nodes that stand on their own.\n\n```python\n#size of graph: nodes and edges (or, subreddits and connecting links)\nprint \"Our graph has \" + str(nx.number_of_nodes(G1)) + ' nodes and ' + str(nx.number_of_edges(G1)) + ' edges.'\n```\n\n    Our graph has 29854 nodes and 149491 edges.\n\n```python\nprint \"True of False: our graph is connected... \" + str(nx.is_connected(G1)) + '!'\n```\n\n    True of False: our graph is connected... False!\n\n```python\nGc = max(nx.connected_component_subgraphs(G1), key=len)\nprint \"The largest connected component subgraph has \" + str(nx.number_of_nodes(Gc)) + \" nodes. \"\n```\n\n    The largest connected component subgraph has 29840 nodes.\n\nThere are 14 nodes that are not connected to the main connected component. Let's list them.\n\n```python\nfor x in list(set(nx.to_dict_of_lists(G1, nodelist=None).keys()) - set(nx.to_dict_of_lists(Gc, nodelist=None).keys())): print x,\n```\n\n    \u002Fr\u002Fspacediscussions \u002Fr\u002Fwtfit.gif \u002Fr\u002Fspace. \u002Fr\u002Fsubreddit_graph \u002Fr\u002Fvidalia \u002Fr\u002Flistentothis. \u002Fr\u002Fhistory. \u002Fr\u002Fall. \u002Fr\u002Fghostdriver \u002Fr\u002Fpersonalfinance. \u002Fr\u002Ftoombscounty \u002Fr\u002Fgaming \u002Fr\u002Fscience \u002Fr\u002Fbooks.\n\nSome of the large communities on reddit include \u002Fr\u002Fbooks, \u002Fr\u002Fgaming and \u002Fr\u002Fscience. These subreddits list related subreddits on separate wiki pages since there are many related subreddits for each one. They were most likely all captured in the subsequent levels of the graph, but they also did not link back to \u002Fr\u002Fscience. Here's an example:\n\n```python\nfor x in master_df_u.loc[master_df_u.subreddit=='\u002Fr\u002Fphysics'].related: print x\n```\n\n    ['\u002Fr\u002Fphysicsjokes', '\u002Fr\u002Fgradadmissions', '\u002Fr\u002Fhomeworkhelp', '\u002Fr\u002Fscienceimages', '\u002Fr\u002Faskacademia', '\u002Fr\u002Fphysicsgifs', '\u002Fr\u002Fphysicsstudents', '\u002Fr\u002Fgradschool', '\u002Fr\u002Faskphysics', '\u002Fr\u002Fphysics']\n\nI've got some additional ideas to explore in another post on this topic, such as finding cliques and maximual cliques, and doing graph visualizations with D3.js. If you are interested in playing with the data, you can clone [my GitHub repo](https:\u002F\u002Fgithub.com\u002Fbriancaffey\u002Freddit-graph-analysis) and load the pickled DataFrames like this:\n\n```python\nimport pandas as pd\ndf = pd.read_pickle('pickle\u002Fmaster_df.p')\n```\n"}}],fetch:{},mutations:[]}}("text","element","span","token","punctuation","\n","(",")","operator","."," ","=","string","code","keyword","div","nuxt-content-highlight","pre","line-numbers","a","nofollow","noopener","noreferrer","_blank",",",", ","language-python",":","p","comment","[","]","+","builtin","language-text","number","\n\n    ","\n    ","short_path","{","}","import","print","nx","in","boolean","G1","find","for","as","if","0"," plt","1"," choices","centrality"," attrs","'class'","str","\n\n","\n_ "," x","random"," x ","subreddit","None","master_df_u","h1","true",-1,"icon","icon-link","html"," np"," b","items","==","\n        ","get","blockquote","path","2","li","'span'","'subscribers'"," pd","len"," choice","True","return"," key","'div'","set","os","expanduser"," age"," pandas ","related"," master_df_u","graph"," nx"," end"," path","start"," node ","max"," centrality","sorted"," reverse","reddit.com","from"," numpy "," webdriver","PhantomJS","sleep","4"," driver","page_source","encode","'utf-8'"," BeautifulSoup"," re","compile","r\"\\\u002Fr\\\u002F[\\w.]+\\\u002F?\"","list","subs","findall","default_subreddits","https:\u002F\u002Fwww.python.org\u002Fdoc\u002Fessays\u002Fgraphs\u002F","\nos","chdir","\n    html "," subreddit","open","\n    subreddit_html_file","#clost the file","close","' '","'E:\u002F\u002FDATA\u002FSubreddits\u002Fsubreddits_html\u002F'"," file_","-","'subreddit'","replace","\n        subs_dict ","else","'md'"," desc","'time'","append","read_pickle","'pickle\u002Fmaster_df.p'"," master_df_","list_of_dates","plot","title","xlabel","ylabel","\nplt","savefig","img","png","choice","has_path","True\n","shortest_path","def","function","' and '","http:\u002F\u002Fnetworkx.readthedocs.io\u002Fen\u002Fnetworkx-1.11\u002F_modules\u002Fnetworkx\u002Falgorithms\u002Fshortest_paths\u002Funweighted.html?highlight=bidirectional_shortest_path","here","not"," graph","eigenvector_centrality_numpy","values","node","lambda","number_of_nodes","Gc","to_dict_of_lists"," nodelist","keys","2021-10-10T04:32:35.160Z")));